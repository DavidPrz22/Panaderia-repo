diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..637c4c8c
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+env/ 
\ No newline at end of file
diff --git a/RecetaSearchListItem.tsx b/RecetaSearchListItem.tsx
new file mode 100644
index 00000000..0519ecba
--- /dev/null
+++ b/RecetaSearchListItem.tsx
@@ -0,0 +1 @@
+ 
\ No newline at end of file
diff --git a/backend/.gitignore b/backend/.gitignore
new file mode 100644
index 00000000..1cf01105
--- /dev/null
+++ b/backend/.gitignore
@@ -0,0 +1,138 @@
+# Django #
+*.log
+*.pot
+*.pyc
+__pycache__
+db.sqlite3
+media
+
+# Backup files # 
+*.bak 
+
+# If you are using PyCharm # 
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# AWS User-specific
+.idea/**/aws.xml
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Python # 
+*.py[cod] 
+*$py.class 
+
+# Distribution / packaging 
+.Python build/ 
+develop-eggs/ 
+dist/ 
+downloads/ 
+eggs/ 
+.eggs/ 
+lib/ 
+lib64/ 
+parts/ 
+sdist/ 
+var/ 
+wheels/ 
+*.whl
+*.egg-info/ 
+.installed.cfg 
+*.egg 
+*.manifest 
+*.spec 
+
+# Installer logs 
+pip-log.txt 
+pip-delete-this-directory.txt 
+
+# Unit test / coverage reports 
+htmlcov/ 
+.tox/ 
+.coverage 
+.coverage.* 
+.cache 
+.pytest_cache/ 
+nosetests.xml 
+coverage.xml 
+*.cover 
+.hypothesis/ 
+
+# Jupyter Notebook 
+.ipynb_checkpoints 
+
+# pyenv 
+.python-version 
+
+# celery 
+celerybeat-schedule.* 
+
+# SageMath parsed files 
+*.sage.py 
+
+# Environments 
+.env 
+.venv 
+env/ 
+venv/ 
+ENV/ 
+env.bak/ 
+venv.bak/ 
+
+# mkdocs documentation 
+/site 
+
+# mypy 
+.mypy_cache/ 
+
+# Sublime Text # 
+*.tmlanguage.cache 
+*.tmPreferences.cache 
+*.stTheme.cache 
+*.sublime-workspace 
+*.sublime-project 
+
+# sftp configuration file 
+sftp-config.json 
+
+# Package control specific files Package 
+Control.last-run 
+Control.ca-list 
+Control.ca-bundle 
+Control.system-ca-bundle 
+GitHub.sublime-settings 
+
+# Visual Studio Code # 
+.vscode/* 
+!.vscode/settings.json 
+!.vscode/tasks.json 
+!.vscode/launch.json 
+!.vscode/extensions.json 
+.history
\ No newline at end of file
diff --git a/backend/djangobackend/apps/compras/__init__.py b/backend/djangobackend/apps/compras/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/compras/admin.py b/backend/djangobackend/apps/compras/admin.py
new file mode 100644
index 00000000..8c38f3f3
--- /dev/null
+++ b/backend/djangobackend/apps/compras/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/backend/djangobackend/apps/compras/apps.py b/backend/djangobackend/apps/compras/apps.py
new file mode 100644
index 00000000..b3eebbfb
--- /dev/null
+++ b/backend/djangobackend/apps/compras/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class ComprasConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.compras'
diff --git a/backend/djangobackend/apps/compras/migrations/0001_initial.py b/backend/djangobackend/apps/compras/migrations/0001_initial.py
new file mode 100644
index 00000000..c69f6d2c
--- /dev/null
+++ b/backend/djangobackend/apps/compras/migrations/0001_initial.py
@@ -0,0 +1,56 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='DetalleOrdenesCompra',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_solicitada', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('cantidad_recibida', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_unitario_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('subtotal_linea_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='OrdenesCompra',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fecha_emision_oc', models.DateField()),
+                ('fecha_entrega_esperada', models.DateField()),
+                ('fecha_entrega_real', models.DateField(blank=True, null=True)),
+                ('subtotal_oc_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('monto_impuestos_oc_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('monto_total_oc_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('tasa_cambio_aplicada', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('subtotal_oc_ves', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('monto_impuestos_oc_ves', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('monto_total_oc_ves', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('direccion_envio', models.TextField(blank=True, max_length=255, null=True)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Proveedores',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_proveedor', models.CharField(max_length=100)),
+                ('apellido_proveedor', models.CharField(blank=True, max_length=100, null=True)),
+                ('nombre_comercial', models.CharField(blank=True, max_length=100, null=True)),
+                ('email_contacto', models.EmailField(blank=True, max_length=100, null=True)),
+                ('telefono_contacto', models.CharField(blank=True, max_length=100, null=True)),
+                ('fecha_creacion_registro', models.DateField(auto_now_add=True)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+    ]
diff --git a/backend/djangobackend/apps/compras/migrations/0002_initial.py b/backend/djangobackend/apps/compras/migrations/0002_initial.py
new file mode 100644
index 00000000..aed6f2a4
--- /dev/null
+++ b/backend/djangobackend/apps/compras/migrations/0002_initial.py
@@ -0,0 +1,43 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('compras', '0001_initial'),
+        ('core', '0001_initial'),
+        ('inventario', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='detalleordenescompra',
+            name='materia_prima',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventario.materiasprimas'),
+        ),
+        migrations.AddField(
+            model_name='detalleordenescompra',
+            name='producto_reventa',
+            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventario.productosreventa'),
+        ),
+        migrations.AddField(
+            model_name='detalleordenescompra',
+            name='unidad_medida_compra',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='ordenescompra',
+            name='estado_oc',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.estadosordencompra'),
+        ),
+        migrations.AddField(
+            model_name='ordenescompra',
+            name='metodo_pago',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.metodosdepago'),
+        ),
+    ]
diff --git a/backend/djangobackend/apps/compras/migrations/0003_initial.py b/backend/djangobackend/apps/compras/migrations/0003_initial.py
new file mode 100644
index 00000000..ff24b82d
--- /dev/null
+++ b/backend/djangobackend/apps/compras/migrations/0003_initial.py
@@ -0,0 +1,42 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('compras', '0002_initial'),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='ordenescompra',
+            name='usuario_creador',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.AddField(
+            model_name='detalleordenescompra',
+            name='orden_compra',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compras.ordenescompra'),
+        ),
+        migrations.AddField(
+            model_name='proveedores',
+            name='usuario_registro',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.AddField(
+            model_name='ordenescompra',
+            name='proveedor',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='compras.proveedores'),
+        ),
+        migrations.AddConstraint(
+            model_name='detalleordenescompra',
+            constraint=models.CheckConstraint(condition=models.Q(models.Q(('materia_prima__isnull', False), ('producto_reventa__isnull', True)), models.Q(('materia_prima__isnull', True), ('producto_reventa__isnull', False)), _connector='OR'), name='detalle_orden_compra_un_solo_tipo_de_producto'),
+        ),
+    ]
diff --git a/backend/djangobackend/apps/compras/migrations/__init__.py b/backend/djangobackend/apps/compras/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/compras/models.py b/backend/djangobackend/apps/compras/models.py
new file mode 100644
index 00000000..fc855248
--- /dev/null
+++ b/backend/djangobackend/apps/compras/models.py
@@ -0,0 +1,66 @@
+from django.db import models
+from apps.users.models import User
+from apps.core.models import EstadosOrdenCompra, MetodosDePago
+from apps.core.models import UnidadesDeMedida
+from django.db.models import Q
+
+# Create your models here.
+class Proveedores(models.Model):
+    nombre_proveedor = models.CharField(max_length=100, null=False, blank=False)
+    apellido_proveedor = models.CharField(max_length=100, null=True, blank=True)
+    nombre_comercial = models.CharField(max_length=100, null=True, blank=True)
+    email_contacto = models.EmailField(max_length=100, null=True, blank=True)
+    telefono_contacto = models.CharField(max_length=100, null=True, blank=True)
+    fecha_creacion_registro = models.DateField(auto_now_add=True)
+    usuario_registro = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True) # cambiar a false
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre_proveedor
+
+
+class OrdenesCompra(models.Model):
+    proveedor = models.ForeignKey(Proveedores, on_delete=models.CASCADE, null=False, blank=False)
+    usuario_creador = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False)
+    fecha_emision_oc = models.DateField(null=False, blank=False)
+    fecha_entrega_esperada = models.DateField(null=False, blank=False)
+    fecha_entrega_real = models.DateField(null=True, blank=True)
+    estado_oc = models.ForeignKey(EstadosOrdenCompra, on_delete=models.CASCADE, null=False, blank=False)
+    subtotal_oc_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    monto_impuestos_oc_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    monto_total_oc_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    metodo_pago = models.ForeignKey(MetodosDePago, on_delete=models.CASCADE, null=False, blank=False)
+    tasa_cambio_aplicada = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    subtotal_oc_ves = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    monto_impuestos_oc_ves = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    monto_total_oc_ves = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    direccion_envio = models.TextField(max_length=255, null=True, blank=True)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return f"OC {self.id} - {self.proveedor.nombre_proveedor}"
+
+
+class DetalleOrdenesCompra(models.Model):
+    orden_compra = models.ForeignKey(OrdenesCompra, on_delete=models.CASCADE, null=False, blank=False)
+    materia_prima = models.ForeignKey('inventario.MateriasPrimas', on_delete=models.CASCADE, null=True)
+    producto_reventa = models.ForeignKey('inventario.ProductosReventa', on_delete=models.CASCADE, null=True)
+    cantidad_solicitada = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    cantidad_recibida = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    unidad_medida_compra = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False)
+    costo_unitario_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    subtotal_linea_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        if self.materia_prima:
+            return f"Detalle OC {self.id} - {self.materia_prima.nombre}"
+        return f"Detalle OC {self.id} - {self.producto_reventa.nombre_producto}"
+    
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(Q(materia_prima__isnull=False) & Q(producto_reventa__isnull=True)) | (Q(materia_prima__isnull=True) & Q(producto_reventa__isnull=False)),
+                name='detalle_orden_compra_un_solo_tipo_de_producto'
+            )
+        ]
\ No newline at end of file
diff --git a/backend/djangobackend/apps/compras/serializers.py b/backend/djangobackend/apps/compras/serializers.py
new file mode 100644
index 00000000..92390d44
--- /dev/null
+++ b/backend/djangobackend/apps/compras/serializers.py
@@ -0,0 +1,18 @@
+from rest_framework import serializers
+from apps.compras.models import Proveedores
+
+class ProveedoresSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Proveedores
+        fields = [
+                    'id', 
+                    'nombre_proveedor', 
+                    'apellido_proveedor', 
+                    'nombre_comercial',   
+                    'email_contacto', 
+                    'telefono_contacto', 
+                    'fecha_creacion_registro', 
+                    'usuario_registro', 
+                    'notas'
+                ]
+
diff --git a/backend/djangobackend/apps/compras/tests.py b/backend/djangobackend/apps/compras/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/compras/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/compras/urls.py b/backend/djangobackend/apps/compras/urls.py
new file mode 100644
index 00000000..b3f6a24e
--- /dev/null
+++ b/backend/djangobackend/apps/compras/urls.py
@@ -0,0 +1,7 @@
+from rest_framework.routers import DefaultRouter
+from apps.compras.viewsets import ProveedoresViewSet
+
+router = DefaultRouter()
+router.register('proveedores', ProveedoresViewSet, basename='proveedores')
+
+urlpatterns = router.urls
\ No newline at end of file
diff --git a/backend/djangobackend/apps/compras/viewsets.py b/backend/djangobackend/apps/compras/viewsets.py
new file mode 100644
index 00000000..c9896b4e
--- /dev/null
+++ b/backend/djangobackend/apps/compras/viewsets.py
@@ -0,0 +1,7 @@
+from rest_framework import viewsets
+from apps.compras.models import Proveedores
+from apps.compras.serializers import ProveedoresSerializer
+
+class ProveedoresViewSet(viewsets.ModelViewSet):
+    queryset = Proveedores.objects.all()
+    serializer_class = ProveedoresSerializer
\ No newline at end of file
diff --git a/backend/djangobackend/apps/core/__init__.py b/backend/djangobackend/apps/core/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/core/admin.py b/backend/djangobackend/apps/core/admin.py
new file mode 100644
index 00000000..8c38f3f3
--- /dev/null
+++ b/backend/djangobackend/apps/core/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/backend/djangobackend/apps/core/apps.py b/backend/djangobackend/apps/core/apps.py
new file mode 100644
index 00000000..41437683
--- /dev/null
+++ b/backend/djangobackend/apps/core/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class CoreConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.core'
diff --git a/backend/djangobackend/apps/core/migrations/0001_initial.py b/backend/djangobackend/apps/core/migrations/0001_initial.py
new file mode 100644
index 00000000..ca398ae5
--- /dev/null
+++ b/backend/djangobackend/apps/core/migrations/0001_initial.py
@@ -0,0 +1,72 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='CategoriasMateriaPrima',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_categoria', models.CharField(max_length=100)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CategoriasProductosElaborados',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_categoria', models.CharField(max_length=100)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='CategoriasProductosReventa',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_categoria', models.CharField(max_length=100)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='EstadosOrdenCompra',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_estado_oc', models.CharField(max_length=100)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='EstadosOrdenVenta',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_estado_ov', models.CharField(max_length=100)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MetodosDePago',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_metodo', models.CharField(max_length=100)),
+                ('requiere_referencia', models.BooleanField(default=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='UnidadesDeMedida',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_completo', models.CharField(max_length=50, unique=True)),
+                ('abreviatura', models.CharField(max_length=10)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+                ('tipo_medida', models.CharField(choices=[('peso', 'Peso'), ('volumen', 'Volumen'), ('unidad', 'Unidad'), ('longitud', 'Longitud'), ('otro', 'Otro')], max_length=10)),
+            ],
+        ),
+    ]
diff --git a/backend/djangobackend/apps/core/migrations/__init__.py b/backend/djangobackend/apps/core/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/core/models.py b/backend/djangobackend/apps/core/models.py
new file mode 100644
index 00000000..1160503f
--- /dev/null
+++ b/backend/djangobackend/apps/core/models.py
@@ -0,0 +1,60 @@
+from django.db import models
+
+# Create your models here.
+
+class UnidadesDeMedida(models.Model):
+    nombre_completo = models.CharField(max_length=50, null=False, blank=False, unique=True)
+    abreviatura = models.CharField(max_length=10, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+    tipo_medida = models.CharField(max_length=10, choices=[('peso', 'Peso'), ('volumen', 'Volumen'), ('unidad', 'Unidad'), ('longitud', 'Longitud'), ('otro', 'Otro')])
+
+    def __str__(self):
+        return self.nombre_completo
+
+
+class CategoriasMateriaPrima(models.Model):
+    nombre_categoria = models.CharField(max_length=100, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre_categoria
+
+
+class CategoriasProductosElaborados(models.Model):
+    nombre_categoria = models.CharField(max_length=100, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre_categoria
+
+
+class CategoriasProductosReventa(models.Model):
+    nombre_categoria = models.CharField(max_length=100, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre_categoria
+
+
+class MetodosDePago(models.Model):
+    nombre_metodo = models.CharField(max_length=100, null=False, blank=False)
+    requiere_referencia = models.BooleanField(default=False)
+
+    def __str__(self):
+        return self.nombre_metodo
+
+
+class EstadosOrdenVenta(models.Model):
+    nombre_estado_ov = models.CharField(max_length=100, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+    
+    def __str__(self):
+        return self.nombre_estado_ov
+
+
+class EstadosOrdenCompra(models.Model): # Ej: "Borrador", "Emitida", "Recibida Parcialmente", "Recibida Completa", "Cancelada"
+    nombre_estado_oc = models.CharField(max_length=100, null=False, blank=False)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre_estado_oc
\ No newline at end of file
diff --git a/backend/djangobackend/apps/core/serializers.py b/backend/djangobackend/apps/core/serializers.py
new file mode 100644
index 00000000..83d39ca5
--- /dev/null
+++ b/backend/djangobackend/apps/core/serializers.py
@@ -0,0 +1,12 @@
+from rest_framework import serializers
+from .models import UnidadesDeMedida, CategoriasMateriaPrima
+
+class UnidadMedidaSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = UnidadesDeMedida
+        fields = ['id', 'nombre_completo', 'abreviatura']
+
+class CategoriaMateriaPrimaSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = CategoriasMateriaPrima
+        fields = ['id', 'nombre_categoria']
\ No newline at end of file
diff --git a/backend/djangobackend/apps/core/tests.py b/backend/djangobackend/apps/core/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/core/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/core/urls.py b/backend/djangobackend/apps/core/urls.py
new file mode 100644
index 00000000..05b1594e
--- /dev/null
+++ b/backend/djangobackend/apps/core/urls.py
@@ -0,0 +1,8 @@
+from rest_framework import routers
+from .viewsets import UnidadMedidaViewSet, CategoriaMateriaPrimaViewSet
+
+router = routers.DefaultRouter()
+router.register(r'unidades-medida', UnidadMedidaViewSet)
+router.register(r'categorias-materiaprima', CategoriaMateriaPrimaViewSet)
+
+urlpatterns = router.urls
\ No newline at end of file
diff --git a/backend/djangobackend/apps/core/viewsets.py b/backend/djangobackend/apps/core/viewsets.py
new file mode 100644
index 00000000..e50eb10e
--- /dev/null
+++ b/backend/djangobackend/apps/core/viewsets.py
@@ -0,0 +1,11 @@
+from rest_framework import viewsets
+from .models import UnidadesDeMedida, CategoriasMateriaPrima
+from .serializers import UnidadMedidaSerializer, CategoriaMateriaPrimaSerializer
+
+class UnidadMedidaViewSet(viewsets.ModelViewSet):
+    queryset = UnidadesDeMedida.objects.all()
+    serializer_class = UnidadMedidaSerializer
+
+class CategoriaMateriaPrimaViewSet(viewsets.ModelViewSet):
+    queryset = CategoriasMateriaPrima.objects.all()
+    serializer_class = CategoriaMateriaPrimaSerializer
\ No newline at end of file
diff --git a/backend/djangobackend/apps/inventario/__init__.py b/backend/djangobackend/apps/inventario/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/inventario/admin.py b/backend/djangobackend/apps/inventario/admin.py
new file mode 100644
index 00000000..8c38f3f3
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/backend/djangobackend/apps/inventario/apps.py b/backend/djangobackend/apps/inventario/apps.py
new file mode 100644
index 00000000..a3caa70b
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class InventarioConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.inventario'
diff --git a/backend/djangobackend/apps/inventario/migrations/0001_initial.py b/backend/djangobackend/apps/inventario/migrations/0001_initial.py
new file mode 100644
index 00000000..73730596
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/migrations/0001_initial.py
@@ -0,0 +1,106 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('compras', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='LotesProductosElaborados',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_inicial_lote', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('stock_actual_lote', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('fecha_produccion', models.DateField()),
+                ('fecha_caducidad', models.DateField()),
+                ('coste_unitario_lote_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('activo', models.BooleanField(default=False)),
+                ('peso_nominal', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LotesProductosReventa',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fecha_recepcion', models.DateField()),
+                ('fecha_caducidad', models.DateField()),
+                ('cantidad_recibida', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('stock_actual_lote', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('coste_unitario_lote_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('activo', models.BooleanField(default=False)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='MateriasPrimas',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre', models.CharField(max_length=100, unique=True)),
+                ('stock_actual', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('SKU', models.CharField(blank=True, max_length=50, null=True, unique=True)),
+                ('nombre_empaque_estandar', models.CharField(blank=True, max_length=100, null=True)),
+                ('cantidad_empaque_estandar', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
+                ('punto_reorden', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('fecha_ultima_actualizacion', models.DateField(auto_now=True)),
+                ('fecha_creacion_registro', models.DateField(auto_now_add=True)),
+                ('fecha_modificacion_registro', models.DateField(auto_now=True)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ProductosElaborados',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_producto', models.CharField(max_length=100, unique=True)),
+                ('SKU', models.CharField(blank=True, max_length=50, null=True, unique=True)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+                ('tipo_manejo_venta', models.CharField(choices=[('UNIDAD', 'Unidad'), ('PESO_VOLUMEN', 'Peso_Volumen')], max_length=15)),
+                ('precio_venta_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('punto_reorden', models.IntegerField(default=0)),
+                ('stock_actual', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('fecha_creacion_registro', models.DateField(auto_now_add=True)),
+                ('es_intermediario', models.BooleanField(default=False)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ProductosReventa',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_producto', models.CharField(max_length=100, unique=True)),
+                ('descripcion', models.TextField(blank=True, max_length=255, null=True)),
+                ('SKU', models.CharField(blank=True, max_length=50, null=True, unique=True)),
+                ('marca', models.CharField(blank=True, max_length=100, null=True)),
+                ('tipo_manejo_venta', models.CharField(choices=[('UNIDAD', 'Unidad'), ('PESO_VOLUMEN', 'Peso_Volumen')], max_length=15)),
+                ('stock_actual', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('precio_venta_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_ultima_compra_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('pecedero', models.BooleanField(default=False)),
+                ('activo', models.BooleanField(default=False)),
+                ('fecha_creacion_registro', models.DateField(auto_now_add=True)),
+                ('fecha_modificacion_registro', models.DateField(auto_now=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LotesMateriasPrimas',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fecha_recepcion', models.DateField()),
+                ('fecha_caducidad', models.DateField()),
+                ('cantidad_recibida', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('stock_actual_lote', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_unitario_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('activo', models.BooleanField(default=False)),
+                ('detalle_oc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='compras.detalleordenescompra')),
+                ('proveedor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='compras.proveedores')),
+            ],
+        ),
+    ]
diff --git a/backend/djangobackend/apps/inventario/migrations/0002_initial.py b/backend/djangobackend/apps/inventario/migrations/0002_initial.py
new file mode 100644
index 00000000..cf64baf3
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/migrations/0002_initial.py
@@ -0,0 +1,98 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('compras', '0002_initial'),
+        ('core', '0001_initial'),
+        ('inventario', '0001_initial'),
+        ('produccion', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='lotesproductoselaborados',
+            name='produccion_origen',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='produccion.produccion'),
+        ),
+        migrations.AddField(
+            model_name='lotesproductosreventa',
+            name='detalle_oc',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='compras.detalleordenescompra'),
+        ),
+        migrations.AddField(
+            model_name='lotesproductosreventa',
+            name='proveedor',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='compras.proveedores'),
+        ),
+        migrations.AddField(
+            model_name='materiasprimas',
+            name='categoria',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.categoriasmateriaprima'),
+        ),
+        migrations.AddField(
+            model_name='materiasprimas',
+            name='unidad_medida_base',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materias_primas_unidad_base', to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='materiasprimas',
+            name='unidad_medida_empaque_estandar',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='materias_primas_empaque', to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='lotesmateriasprimas',
+            name='materia_prima',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.materiasprimas'),
+        ),
+        migrations.AddField(
+            model_name='productoselaborados',
+            name='categoria',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.categoriasproductoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='productoselaborados',
+            name='unidad_medida_nominal',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='productos_elaborados_unidad_nominal', to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='productoselaborados',
+            name='unidad_venta',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='productos_elaborados_unidad_venta', to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='lotesproductoselaborados',
+            name='producto_elaborado',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.productoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='productosreventa',
+            name='categoria',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.categoriasproductosreventa'),
+        ),
+        migrations.AddField(
+            model_name='productosreventa',
+            name='proveedor_preferido',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='compras.proveedores'),
+        ),
+        migrations.AddField(
+            model_name='productosreventa',
+            name='unidad_base_inventario',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='lotesproductosreventa',
+            name='producto_reventa',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.productosreventa'),
+        ),
+        migrations.AddConstraint(
+            model_name='productoselaborados',
+            constraint=models.CheckConstraint(condition=models.Q(models.Q(('es_intermediario', True), ('precio_venta_usd__isnull', False)), models.Q(('es_intermediario', False), ('precio_venta_usd__isnull', True)), _connector='OR'), name='intermediario_punto_reorden'),
+        ),
+    ]
diff --git a/backend/djangobackend/apps/inventario/migrations/__init__.py b/backend/djangobackend/apps/inventario/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/inventario/models.py b/backend/djangobackend/apps/inventario/models.py
new file mode 100644
index 00000000..57d252ec
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/models.py
@@ -0,0 +1,134 @@
+from django.db import models
+from apps.core.models import UnidadesDeMedida, CategoriasMateriaPrima, CategoriasProductosReventa, CategoriasProductosElaborados
+from django.db.models import Q, Sum
+from django.db.models.signals import post_save, post_delete
+from django.dispatch import receiver
+from django.utils import timezone
+
+# Create your models here.
+class MateriasPrimas(models.Model):
+    nombre = models.CharField(max_length=100, null=False, blank=False, unique=True)
+    unidad_medida_base = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False, related_name='materias_primas_unidad_base')
+    stock_actual = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    SKU = models.CharField(max_length=50, null=True, blank=True, unique=True)
+    nombre_empaque_estandar = models.CharField(max_length=100, null=True, blank=True)
+    cantidad_empaque_estandar = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
+    unidad_medida_empaque_estandar = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, related_name='materias_primas_empaque', null=True, blank=True)
+    punto_reorden = models.DecimalField(max_digits=10, decimal_places=2, default=0, null=False, blank=False)
+    fecha_ultima_actualizacion = models.DateField(auto_now=True)
+    fecha_creacion_registro = models.DateField(auto_now_add=True)
+    fecha_modificacion_registro = models.DateField(auto_now=True)
+    categoria = models.ForeignKey(CategoriasMateriaPrima, on_delete=models.CASCADE)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.nombre
+
+
+class LotesMateriasPrimas(models.Model):
+    materia_prima = models.ForeignKey(MateriasPrimas, on_delete=models.CASCADE, null=False, blank=False)
+    proveedor = models.ForeignKey('compras.Proveedores', on_delete=models.CASCADE, null=True, blank=True)
+    fecha_recepcion = models.DateField(null=False, blank=False)
+    fecha_caducidad = models.DateField(null=False, blank=False)
+    cantidad_recibida = models.DecimalField(max_digits=10, decimal_places=2, default=0, null=False, blank=False)
+    stock_actual_lote = models.DecimalField(max_digits=10, decimal_places=2, default=0, null=False, blank=False)
+    costo_unitario_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0, null=False, blank=False)
+    detalle_oc = models.ForeignKey('compras.DetalleOrdenesCompra', on_delete=models.CASCADE, null=True, blank=True)
+    activo = models.BooleanField(default=False)
+    
+    def __str__(self):
+        return f"Lote {self.id} - {self.materia_prima.nombre} - {self.stock_actual_lote}"
+
+
+class ProductosElaborados(models.Model):
+    nombre_producto = models.CharField(max_length=100, null=False, blank=False, unique=True)
+    SKU = models.CharField(max_length=50, null=True, blank=True, unique=True)
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+    tipo_manejo_venta = models.CharField(choices=[('UNIDAD', 'Unidad'), ('PESO_VOLUMEN', 'Peso_Volumen')], max_length=15, null=False, blank=False)
+    unidad_medida_nominal = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=True, blank=True, related_name='productos_elaborados_unidad_nominal')
+    #   Peso nominal o estándar del producto si se vende como una unidad contable.
+    #   Por ejemplo, una "Torta Entera" (vendida por 'Unidad') puede tener un peso_nominal de 1.5 (kg).
+    unidad_venta = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=True, blank=True, related_name='productos_elaborados_unidad_venta') ## Si es por unidad, precio total. Si es por peso_volumen, sera el precio por unidad de volumen
+    precio_venta_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    punto_reorden = models.IntegerField(default=0, null=False, blank=False)
+    stock_actual = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    categoria = models.ForeignKey(CategoriasProductosElaborados, on_delete=models.CASCADE)
+    fecha_creacion_registro = models.DateField(auto_now_add=True)
+    es_intermediario = models.BooleanField(default=False, null=False)
+
+    def __str__(self):
+        return f"Producto {self.id} - {self.nombre_producto}"
+    
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(Q(es_intermediario=True) & Q(precio_venta_usd__isnull=False)) |
+                    (Q(es_intermediario=False) & Q(precio_venta_usd__isnull=True)),
+                name='intermediario_punto_reorden'
+            )
+        ]
+
+
+class LotesProductosElaborados(models.Model):
+    produccion_origen = models.ForeignKey('produccion.Produccion', on_delete=models.CASCADE,null=False, blank=False)
+    producto_elaborado = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, null=False, blank=False)
+    cantidad_inicial_lote = models.DecimalField(max_digits=10, decimal_places=2, default=0) # Cantidad original producida en este lote (copiado de Produccion.cantidad_producida)
+    stock_actual_lote = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    fecha_produccion = models.DateField(null=False, blank=False)
+    fecha_caducidad = models.DateField(null=False, blank=False)
+    coste_unitario_lote_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    activo = models.BooleanField(default=False)
+    peso_nominal = models.DecimalField(max_digits=10, decimal_places=2, default=0, null=True, blank=True)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return f"Lote {self.id} - {self.producto_elaborado.nombre_producto} - {self.stock_actual_lote}"
+
+
+class ProductosReventa(models.Model):
+    nombre_producto = models.CharField(max_length=100, null=False, blank=False, unique=True) # -- Ej: "Refresco de Cola Lata 355ml", "Jamón Cocido Superior", "Queso Gouda Pieza".
+    descripcion = models.TextField(max_length=255, null=True, blank=True)
+    SKU = models.CharField(max_length=50, null=True, blank=True, unique=True) # -- Ej: "RC355", "JCS", "QG".
+    categoria = models.ForeignKey(CategoriasProductosReventa, on_delete=models.CASCADE)
+    marca = models.CharField(max_length=100, null=True, blank=True)
+    proveedor_preferido = models.ForeignKey('compras.Proveedores', on_delete=models.CASCADE, null=True, blank=True)
+    tipo_manejo_venta = models.CharField(choices=[('UNIDAD', 'Unidad'), ('PESO_VOLUMEN', 'Peso_Volumen')], max_length=15, null=False, blank=False) # -- Indica si se vende por unidad fija o por peso/volumen.
+    unidad_base_inventario = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False) # Unidad en la que se gestiona el stock (ej: "Unidad" para latas, "Gramos" para jamón).
+    stock_actual = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    precio_venta_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0) #  Si tipo_manejo_venta es 'UNIDAD', es precio/unidad. Si es 'PESO_VOLUMEN', es precio/id_unidad_base_inventario (ej. precio por gramo).
+    costo_ultima_compra_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    pecedero = models.BooleanField(default=False, null=False) # - Indica si requiere gestión de lotes por caducidad.
+    activo = models.BooleanField(default=False, null=False)
+    fecha_creacion_registro = models.DateField(auto_now_add=True)
+    fecha_modificacion_registro = models.DateField(auto_now=True)
+    
+    def __str__(self):
+        return f"Producto {self.id} - {self.nombre_producto} {self.stock_actual}"
+
+
+class LotesProductosReventa(models.Model):
+    producto_reventa = models.ForeignKey(ProductosReventa, on_delete=models.CASCADE, null=False, blank=False)
+    fecha_recepcion = models.DateField(null=False, blank=False)
+    fecha_caducidad = models.DateField(null=False, blank=False)
+    cantidad_recibida = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    stock_actual_lote = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    coste_unitario_lote_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    detalle_oc = models.ForeignKey('compras.DetalleOrdenesCompra', on_delete=models.CASCADE, null=True, blank=True)
+    proveedor = models.ForeignKey('compras.Proveedores', on_delete=models.CASCADE, null=True, blank=True)
+    activo = models.BooleanField(default=False, null=False)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return f"Lote {self.id} - {self.producto_reventa.nombre_producto} - {self.stock_actual_lote}"
+
+
+@receiver([post_save, post_delete], sender=LotesMateriasPrimas)
+def update_materia_prima_stock(sender, instance, **kwargs):
+    materia_prima = instance.materia_prima
+    total_stock = LotesMateriasPrimas.objects.filter(
+        materia_prima=materia_prima,
+        fecha_caducidad__gt=timezone.now().date()
+    ).aggregate(total=Sum('stock_actual_lote'))['total'] or 0
+    
+    materia_prima.stock_actual = total_stock
+    materia_prima.save()
diff --git a/backend/djangobackend/apps/inventario/serializers.py b/backend/djangobackend/apps/inventario/serializers.py
new file mode 100644
index 00000000..0abed14f
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/serializers.py
@@ -0,0 +1,245 @@
+from rest_framework import serializers
+from .models import MateriasPrimas, LotesMateriasPrimas
+from apps.core.models import UnidadesDeMedida, CategoriasMateriaPrima
+from apps.compras.serializers import ProveedoresSerializer
+from apps.compras.models import Proveedores
+from django.db.models import Sum
+
+class UnidadMedidaSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = UnidadesDeMedida
+        fields = ['id', 'nombre_completo', 'abreviatura', 'descripcion', 'tipo_medida']
+
+class CategoriaMateriaPrimaSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = CategoriasMateriaPrima
+        fields = ['id', 'nombre_categoria', 'descripcion']
+
+class MateriaPrimaSerializer(serializers.ModelSerializer):
+    unidad_medida_base_detail = UnidadMedidaSerializer(source='unidad_medida_base', read_only=True)
+    unidad_medida_empaque_estandar_detail = UnidadMedidaSerializer(source='unidad_medida_empaque_estandar', read_only=True)
+    categoria_detail = CategoriaMateriaPrimaSerializer(source='categoria', read_only=True)
+
+    class Meta:
+        model = MateriasPrimas
+        fields = [ 
+                'id', 
+                'nombre', 
+                'unidad_medida_base', 
+                'unidad_medida_base_detail',
+                'unidad_medida_empaque_estandar', 
+                'unidad_medida_empaque_estandar_detail',
+                'stock_actual', 
+                'SKU',
+                'nombre_empaque_estandar',
+                'cantidad_empaque_estandar',
+                'unidad_medida_empaque_estandar',
+                'unidad_medida_empaque_estandar_detail',
+                'punto_reorden', 
+                'categoria',
+                'descripcion',
+                'fecha_ultima_actualizacion',
+                'fecha_creacion_registro',
+                'fecha_modificacion_registro'
+                ]
+
+
+class MateriaPrimaSearchSerializer(serializers.ModelSerializer):
+    categoria_nombre = serializers.CharField(source='categoria.nombre_categoria', read_only=True)
+    class Meta:
+        model = MateriasPrimas
+        fields = ['id', 'nombre', 'categoria_nombre'] 
+
+
+class LotesMateriaPrimaSerializer(serializers.ModelSerializer):
+    fecha_recepcion = serializers.DateField(format="%Y-%m-%d", input_formats=["%Y-%m-%d", "iso-8601"])
+    fecha_caducidad = serializers.DateField(format="%Y-%m-%d", input_formats=["%Y-%m-%d", "iso-8601"])
+    proveedor = ProveedoresSerializer(read_only=True)
+    proveedor_id = serializers.PrimaryKeyRelatedField(
+        source='proveedor',
+        queryset=Proveedores.objects.all(),
+        write_only=True
+    )
+
+    class Meta:
+        model = LotesMateriasPrimas
+        fields = [
+            'id', 
+            'materia_prima', 
+            'proveedor',
+            'proveedor_id',
+            'fecha_recepcion',
+            'fecha_caducidad', 
+            'cantidad_recibida', 
+            'stock_actual_lote', 
+            'costo_unitario_usd', 
+            'detalle_oc', 
+            'activo'
+        ]
+
+
+class MateriaPrimaSerializer(serializers.ModelSerializer):
+
+    # Nested serializers for detailed representation
+    unidad_medida_base_detail = UnidadMedidaSerializer(source='unidad_medida_base', read_only=True)
+    unidad_medida_empaque_estandar_detail = UnidadMedidaSerializer(source='unidad_medida_empaque_estandar', read_only=True)
+    categoria_detail = CategoriaMateriaPrimaSerializer(source='categoria', read_only=True)
+
+    # For write operations, we still use IDs
+    unidad_medida_base = serializers.PrimaryKeyRelatedField(queryset=UnidadesDeMedida.objects.all(), write_only=True)
+    unidad_medida_empaque_estandar = serializers.PrimaryKeyRelatedField(
+        queryset=UnidadesDeMedida.objects.all(), 
+        required=False, 
+        allow_null=True,
+        write_only=True
+    )
+    
+    # Optional fields with proper null handling
+    nombre_empaque_estandar = serializers.CharField(
+        max_length=100,
+        required=False,
+        allow_null=True,
+        allow_blank=True
+    )
+    cantidad_empaque_estandar = serializers.DecimalField(
+        max_digits=10,
+        decimal_places=2,
+        required=False,
+        allow_null=True
+    )
+    descripcion = serializers.CharField(
+        max_length=255,
+        required=False,
+        allow_null=True,
+        allow_blank=True
+    )
+    
+    categoria = serializers.PrimaryKeyRelatedField(queryset=CategoriasMateriaPrima.objects.all(), write_only=True)
+
+    class Meta:
+        model = MateriasPrimas
+        fields = [
+            'id',
+            'nombre',
+            'unidad_medida_base',
+            'unidad_medida_base_detail',
+            'stock_actual',
+            'SKU',
+            'nombre_empaque_estandar',
+            'cantidad_empaque_estandar',
+            'unidad_medida_empaque_estandar',
+            'unidad_medida_empaque_estandar_detail',
+            'punto_reorden',
+            'fecha_ultima_actualizacion',
+            'fecha_creacion_registro',
+            'fecha_modificacion_registro',
+            'categoria',
+            'categoria_detail',
+            'descripcion'
+        ]
+        read_only_fields = [
+            'id',
+            'fecha_ultima_actualizacion',
+            'fecha_creacion_registro',
+            'fecha_modificacion_registro',
+            'stock_actual'
+        ]
+
+    def validate_nombre(self, value):
+        """Validate that nombre doesn't contain special characters and is properly capitalized."""
+        if not value.strip():
+            raise serializers.ValidationError("El nombre no puede estar vacío o contener solo espacios.")
+        return value.strip().title()
+
+    def validate_SKU(self, value):
+        """Validate SKU format."""
+        if not value or not value.strip():
+            raise serializers.ValidationError("El SKU es requerido.")
+            
+        value = value.strip().upper()
+        if len(value) < 3:
+            raise serializers.ValidationError("El SKU debe tener al menos 3 caracteres.")
+        return value
+
+    def validate_punto_reorden(self, value):
+        """Validate that punto_reorden is positive."""
+        if value < 0:
+            raise serializers.ValidationError("El punto de reorden no puede ser negativo.")
+        return value
+
+    def validate_cantidad_empaque_estandar(self, value):
+        """Validate that cantidad_empaque_estandar is positive if provided."""
+        if value is None or value == 0 or value == "0" or value == "":
+            return None
+
+        if value < 0:
+            raise serializers.ValidationError("La cantidad de empaque estándar debe ser mayor que 0.")
+        return value
+    
+    def validate_unidad_medida_empaque_estandar(self, value):
+        """Validate that unidad_medida_empaque_estandar is provided if required."""
+        if value is None or value == 0 or value == "0" or value == "":
+            return None
+        return value
+
+    def validate(self, data):
+        """Validate related fields and business rules."""
+        # Clean empty strings, zeros, and empty values to None for optional fields
+        optional_fields = ['nombre_empaque_estandar', 'descripcion']
+        numeric_fields = ['cantidad_empaque_estandar', 'unidad_medida_empaque_estandar']
+        
+        # Handle string fields
+        for field in optional_fields:
+            if field in data and isinstance(data[field], str) and not data[field].strip():
+                data[field] = None
+        
+        # Handle numeric fields
+        for field in numeric_fields:
+            if field in data and (data[field] == 0 or data[field] == "0" or data[field] == ""):
+                data[field] = None
+
+        # Packaging fields validation
+        packaging_fields = {
+            'nombre_empaque_estandar': 'Nombre de empaque estándar',
+            'cantidad_empaque_estandar': 'Cantidad de empaque estándar',
+            'unidad_medida_empaque_estandar': 'Unidad de medida de empaque estándar'
+        }
+        
+        # Check if any non-null packaging field is provided
+        provided_fields = {k: v for k, v in data.items() if k in packaging_fields and v is not None}
+        
+        if provided_fields:
+            # If any packaging field is provided with a non-null value, ensure all are provided
+            missing_fields = [
+                packaging_fields[field] 
+                for field in packaging_fields 
+                if field not in data or data.get(field) is None
+            ]
+            if missing_fields:
+                raise serializers.ValidationError({
+                    'packaging_error': (
+                        f"Los siguientes campos de empaque son requeridos cuando se proporciona "
+                        f"información de empaque: {', '.join(missing_fields)}"
+                    )
+                })
+
+        return data
+
+    def to_representation(self, instance):
+        """Customize the output representation of the serializer."""
+        data = super().to_representation(instance)
+        
+        # Remove write_only fields from output
+        write_only_fields = ['unidad_medida_base', 'unidad_medida_empaque_estandar', 'categoria']
+        for field in write_only_fields:
+            data.pop(field, None)
+
+        # Format dates for better readability
+        date_fields = ['fecha_ultima_actualizacion', 'fecha_creacion_registro', 'fecha_modificacion_registro']
+        for field in date_fields:
+            if data.get(field):
+                data[field] = instance.__getattribute__(field).strftime('%Y-%m-%d')
+
+        return data
+    
+
diff --git a/backend/djangobackend/apps/inventario/tests.py b/backend/djangobackend/apps/inventario/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/inventario/urls.py b/backend/djangobackend/apps/inventario/urls.py
new file mode 100644
index 00000000..74892672
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/urls.py
@@ -0,0 +1,9 @@
+from rest_framework.routers import DefaultRouter
+from apps.inventario.viewsets import MateriaPrimaViewSet, LotesMateriaPrimaViewSet, MateriaPrimaSearchViewSet
+
+router = DefaultRouter()
+router.register('materiaprima', MateriaPrimaViewSet, basename='materiaprima')
+router.register('lotesmateriaprima', LotesMateriaPrimaViewSet, basename='lotesmateriaprima')
+router.register('materiaprimasearch', MateriaPrimaSearchViewSet, basename='materiaprimasearch')
+
+urlpatterns = router.urls
diff --git a/backend/djangobackend/apps/inventario/viewsets.py b/backend/djangobackend/apps/inventario/viewsets.py
new file mode 100644
index 00000000..4c5954f5
--- /dev/null
+++ b/backend/djangobackend/apps/inventario/viewsets.py
@@ -0,0 +1,119 @@
+from rest_framework import viewsets, status
+from apps.inventario.models import MateriasPrimas, LotesMateriasPrimas
+from apps.inventario.serializers import MateriaPrimaSerializer, LotesMateriaPrimaSerializer, MateriaPrimaSearchSerializer
+from django.db.models import Min, Sum
+from rest_framework.response import Response
+from rest_framework.decorators import action
+from datetime import datetime
+from collections import defaultdict
+
+class MateriaPrimaViewSet(viewsets.ModelViewSet):
+    queryset = MateriasPrimas.objects.all()
+    serializer_class = MateriaPrimaSerializer
+
+
+class MateriaPrimaSearchViewSet(viewsets.ModelViewSet):
+    queryset = MateriasPrimas.objects.all()
+    serializer_class = MateriaPrimaSearchSerializer
+
+    @action(methods=['get'], detail=False, url_path='search-materia-prima')
+    def search_materia_prima(self, request):
+        search_query = request.query_params.get('search')
+        if not search_query:
+            return Response(status=status.HTTP_400_BAD_REQUEST, data={"error": "El parámetro 'search' es requerido"})
+
+        materia_primas = MateriasPrimas.objects.filter(
+            nombre__icontains=search_query
+        ).select_related('categoria')
+
+        categorias_dict = defaultdict(list)
+        for materia_prima in materia_primas:
+            categoria = materia_prima.categoria.nombre_categoria
+            categorias_dict[categoria].append({
+                'id': materia_prima.id, 
+                'nombre': materia_prima.nombre,
+                'tipo': 'MateriaPrima'
+            })
+        
+        materia_primas_por_categoria = [
+            {categoria: items} for categoria, items in categorias_dict.items()
+        ]
+        
+        return Response(materia_primas_por_categoria)
+
+
+class LotesMateriaPrimaViewSet(viewsets.ModelViewSet):
+    queryset = LotesMateriasPrimas.objects.all()
+    serializer_class = LotesMateriaPrimaSerializer
+
+    def get_queryset(self):
+        queryset = super().get_queryset()
+        materia_prima = self.request.query_params.get('materia_prima')
+        if materia_prima:
+            queryset = queryset.filter(materia_prima=materia_prima)
+        return queryset
+    
+    def create(self, request, *args, **kwargs):
+        serializer = self.get_serializer(data=request.data)
+        serializer.is_valid(raise_exception=True)
+
+        materia_prima_id = serializer.validated_data['materia_prima']
+        lotes_materia_prima = LotesMateriasPrimas.objects.filter(materia_prima=materia_prima_id)
+
+        # Get the closest expiration date from existing lots
+        aggregation = lotes_materia_prima.aggregate(closest_date=Min('fecha_caducidad'))
+        closest_date = aggregation['closest_date']
+
+        new_fecha_caducidad = serializer.validated_data['fecha_caducidad']
+
+        if closest_date is None:
+            # If there are no existing lots, this is the first one and should be active
+            serializer.validated_data['activo'] = True
+            serializer.validated_data['stock_actual_lote'] = serializer.validated_data['cantidad_recibida']
+        elif new_fecha_caducidad < closest_date:
+            # If the new lot expires sooner than any existing lot
+            # Set this one as active and deactivate all others
+            serializer.validated_data['activo'] = True
+            serializer.validated_data['stock_actual_lote'] = serializer.validated_data['cantidad_recibida']
+            lotes_materia_prima.update(activo=False)
+        else:
+            # If the new lot expires later than or equal to the closest existing lot
+            # Keep it inactive
+            serializer.validated_data['activo'] = False
+            serializer.validated_data['stock_actual_lote'] = serializer.validated_data['cantidad_recibida']
+
+        # Save only once through perform_create
+        self.perform_create(serializer)
+        headers = self.get_success_headers(serializer.data)
+        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
+    
+
+    @action(detail=True, methods=['put'], url_path='activate')
+    def activate(self, request, pk=None):
+        try:
+            lote_por_activar = LotesMateriasPrimas.objects.get(id=pk)
+            
+            # Convert to datetime.date for comparison since fecha_caducidad is a DateField
+            if datetime.now().date() < lote_por_activar.fecha_caducidad:
+                # First deactivate current active lote of the same materia prima
+                LotesMateriasPrimas.objects.filter(
+                    materia_prima=lote_por_activar.materia_prima, 
+                    activo=True
+                ).update(activo=False)
+                
+                # Activate the new lote
+                lote_por_activar.activo = True
+                lote_por_activar.save()
+                
+                return Response(status=status.HTTP_200_OK)
+            else:
+                return Response(
+                    status=status.HTTP_400_BAD_REQUEST, 
+                    data={"error": "Este Lote ya caducó"}
+                )
+                
+        except LotesMateriasPrimas.DoesNotExist:
+            return Response(
+                status=status.HTTP_404_NOT_FOUND, 
+                data={"error": "Lote no encontrado"}
+            )
diff --git a/backend/djangobackend/apps/produccion/__init__.py b/backend/djangobackend/apps/produccion/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/produccion/admin.py b/backend/djangobackend/apps/produccion/admin.py
new file mode 100644
index 00000000..8c38f3f3
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/backend/djangobackend/apps/produccion/apps.py b/backend/djangobackend/apps/produccion/apps.py
new file mode 100644
index 00000000..3be58824
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class ProduccionConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.produccion'
diff --git a/backend/djangobackend/apps/produccion/migrations/0001_initial.py b/backend/djangobackend/apps/produccion/migrations/0001_initial.py
new file mode 100644
index 00000000..477562dc
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/migrations/0001_initial.py
@@ -0,0 +1,76 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('core', '0001_initial'),
+        ('inventario', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='DetalleProduccionCosumos',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_consumida', models.DecimalField(decimal_places=3, max_digits=10)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='LogTransformacion',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_producto_entrada_efectiva', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('cantidad_producto_salida_total_generado', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_unitario_entrada_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_total_entrada_calculado_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('costo_unitario_salida_calculado_usd', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
+                ('notas', models.TextField(blank=True, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Produccion',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_producida', models.DecimalField(decimal_places=3, max_digits=10)),
+                ('fecha_produccion', models.DateField()),
+                ('costo_total_componentes_usd', models.DecimalField(decimal_places=3, max_digits=10)),
+                ('notas', models.TextField(blank=True, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Recetas',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='RecetasDetalles',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre', models.CharField(default='Receta', max_length=255)),
+                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='DefinicionTransformacion',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre', models.CharField(max_length=255)),
+                ('cantidad_entrada', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('cantidad_salida', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
+                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
+                ('activo', models.BooleanField(default=False)),
+                ('producto_elaborado_entrada', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformaciones_como_entrada', to='inventario.productoselaborados')),
+                ('producto_elaborado_salida', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformaciones_como_salida', to='inventario.productoselaborados')),
+                ('unidad_medida_entrada', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformaciones_unidad_entrada', to='core.unidadesdemedida')),
+                ('unidad_medida_salida', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformaciones_unidad_salida', to='core.unidadesdemedida')),
+            ],
+        ),
+    ]
diff --git a/backend/djangobackend/apps/produccion/migrations/0002_initial.py b/backend/djangobackend/apps/produccion/migrations/0002_initial.py
new file mode 100644
index 00000000..0f847310
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/migrations/0002_initial.py
@@ -0,0 +1,103 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('core', '0001_initial'),
+        ('inventario', '0002_initial'),
+        ('produccion', '0001_initial'),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='definiciontransformacion',
+            name='usuario_creacion',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='lote_materia_prima_consumida',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.lotesmateriasprimas'),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='lote_producto_intermedio_consumido',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.lotesproductoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='materia_prima_consumida',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.materiasprimas'),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='producto_intermedio_consumido',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.productoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='unidad_medida',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unidadesdemedida'),
+        ),
+        migrations.AddField(
+            model_name='logtransformacion',
+            name='definicion_transformacion',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='produccion.definiciontransformacion'),
+        ),
+        migrations.AddField(
+            model_name='logtransformacion',
+            name='usuario_creacion',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.AddField(
+            model_name='produccion',
+            name='producto_elaborado',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventario.productoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='produccion',
+            name='usuario_creacion',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
+        ),
+        migrations.AddField(
+            model_name='detalleproduccioncosumos',
+            name='produccion',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='produccion.produccion'),
+        ),
+        migrations.AddField(
+            model_name='recetas',
+            name='componente_materia_prima',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventario.materiasprimas'),
+        ),
+        migrations.AddField(
+            model_name='recetas',
+            name='componente_producto_intermedio',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recetas_como_componente', to='inventario.productoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='recetas',
+            name='producto_elaborado',
+            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recetas_como_producto_final', to='inventario.productoselaborados'),
+        ),
+        migrations.AddField(
+            model_name='recetas',
+            name='receta_detalle',
+            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='produccion.recetasdetalles'),
+        ),
+        migrations.AddConstraint(
+            model_name='detalleproduccioncosumos',
+            constraint=models.CheckConstraint(condition=models.Q(models.Q(('materia_prima_consumida__isnull', False), ('lote_materia_prima_consumida__isnull', False), ('producto_intermedio_consumido__isnull', True), ('lote_producto_intermedio_consumido__isnull', True)), models.Q(('materia_prima_consumida__isnull', True), ('lote_materia_prima_consumida__isnull', True), ('producto_intermedio_consumido__isnull', False), ('lote_producto_intermedio_consumido__isnull', False)), _connector='OR'), name='materia_prima_or_producto_intermedio_and_lote_required'),
+        ),
+        migrations.AddConstraint(
+            model_name='recetas',
+            constraint=models.CheckConstraint(condition=models.Q(models.Q(('componente_materia_prima__isnull', False), ('componente_producto_intermedio__isnull', True)), models.Q(('componente_materia_prima__isnull', True), ('componente_producto_intermedio__isnull', False)), _connector='OR'), name='receta_un_solo_tipo_componente'),
+        ),
+    ]
diff --git a/backend/djangobackend/apps/produccion/migrations/0003_force_create_recetas_detalles.py b/backend/djangobackend/apps/produccion/migrations/0003_force_create_recetas_detalles.py
new file mode 100644
index 00000000..ae4a2194
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/migrations/0003_force_create_recetas_detalles.py
@@ -0,0 +1,25 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:22
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('produccion', '0001_initial'),  # Adjust number if needed
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='RecetasDetalles',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre', models.CharField(default='Receta', max_length=255)),
+                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
+            ],
+        ),
+        migrations.AddField(
+            model_name='recetas',
+            name='receta_detalle',
+            field=models.ForeignKey(on_delete=models.CASCADE, to='produccion.recetasdetalles'),
+        ),
+    ]
\ No newline at end of file
diff --git a/backend/djangobackend/apps/produccion/migrations/0004_merge_0002_initial_0003_force_create_recetas_detalles.py b/backend/djangobackend/apps/produccion/migrations/0004_merge_0002_initial_0003_force_create_recetas_detalles.py
new file mode 100644
index 00000000..0c1cbf15
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/migrations/0004_merge_0002_initial_0003_force_create_recetas_detalles.py
@@ -0,0 +1,14 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:25
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('produccion', '0002_initial'),
+        ('produccion', '0003_force_create_recetas_detalles'),
+    ]
+
+    operations = [
+    ]
diff --git a/backend/djangobackend/apps/produccion/migrations/__init__.py b/backend/djangobackend/apps/produccion/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/produccion/models.py b/backend/djangobackend/apps/produccion/models.py
new file mode 100644
index 00000000..0b8117b9
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/models.py
@@ -0,0 +1,99 @@
+from django.db import models
+from apps.inventario.models import ProductosElaborados, MateriasPrimas, LotesMateriasPrimas, LotesProductosElaborados
+from apps.core.models import UnidadesDeMedida
+from django.db.models import Q
+from apps.users.models import User
+
+# Create your models here.
+
+class RecetasDetalles(models.Model):
+    nombre = models.CharField(max_length=255, null=False, blank=False, default='Receta')
+    fecha_creacion = models.DateTimeField(auto_now_add=True)
+
+    def __str__(self):
+        return f"{self.nombre}"
+
+
+class Recetas(models.Model):
+    producto_elaborado = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, related_name='recetas_como_producto_final', null=True, blank=True)
+    componente_materia_prima = models.ForeignKey(MateriasPrimas, on_delete=models.CASCADE, null=True, blank=True)
+    componente_producto_intermedio = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, related_name='recetas_como_componente', null=True, blank=True)
+    receta_detalle = models.ForeignKey(RecetasDetalles, on_delete=models.CASCADE, null=False, blank=False)
+
+    def __str__(self):
+        return f"{self.producto_elaborado.nombre} - {self.componente_materia_prima.nombre}"
+
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(
+                    Q(componente_materia_prima__isnull=False) & Q(componente_producto_intermedio__isnull=True)) |
+                    (Q(componente_materia_prima__isnull=True) & Q(componente_producto_intermedio__isnull=False)),
+                name="receta_un_solo_tipo_componente"
+            )
+        ]
+
+
+class Produccion(models.Model):
+    producto_elaborado = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, null=False, blank=False)
+    cantidad_producida = models.DecimalField(max_digits=10, decimal_places=3, null=False, blank=False)
+    fecha_produccion = models.DateField(null=False, blank=False)
+    costo_total_componentes_usd = models.DecimalField(max_digits=10, decimal_places=3)
+    notas = models.TextField(null=True, blank=True)
+    usuario_creacion = models.ForeignKey(User, on_delete=models.CASCADE)
+    
+    def __str__(self):
+        return f"{self.producto_elaborado.nombre} - {self.fecha_produccion}"
+
+
+class DetalleProduccionCosumos(models.Model):
+    produccion = models.ForeignKey(Produccion, on_delete=models.CASCADE, null=False, blank=False)
+    materia_prima_consumida = models.ForeignKey(MateriasPrimas, on_delete=models.CASCADE)
+    producto_intermedio_consumido = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE)
+    lote_materia_prima_consumida = models.ForeignKey(LotesMateriasPrimas, on_delete=models.CASCADE)
+    lote_producto_intermedio_consumido = models.ForeignKey(LotesProductosElaborados, on_delete=models.CASCADE)
+    cantidad_consumida = models.DecimalField(max_digits=10, decimal_places=3, null=False, blank=False)
+    unidad_medida = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE)
+    
+    def __str__(self):
+        return f"{self.produccion.producto_elaborado.nombre} - {self.materia_prima_consumida.nombre or self.producto_intermedio_consumido.nombre} - {self.cantidad_consumida}"
+    
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(Q(materia_prima_consumida__isnull=False) & Q(lote_materia_prima_consumida__isnull=False) & Q(producto_intermedio_consumido__isnull=True) & Q(lote_producto_intermedio_consumido__isnull=True)) |
+                (Q(materia_prima_consumida__isnull=True) & Q(lote_materia_prima_consumida__isnull=True) & Q(producto_intermedio_consumido__isnull=False) & Q(lote_producto_intermedio_consumido__isnull=False)),
+                name="materia_prima_or_producto_intermedio_and_lote_required"
+            )
+        ]
+
+
+class DefinicionTransformacion(models.Model):
+    nombre = models.CharField(max_length=255, null=False, blank=False)
+    producto_elaborado_entrada = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, null=False, blank=False, related_name='transformaciones_como_entrada')
+    cantidad_entrada= models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False, default=0)
+    unidad_medida_entrada = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False, related_name='transformaciones_unidad_entrada')
+    producto_elaborado_salida = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, null=False, blank=False, related_name='transformaciones_como_salida')
+    unidad_medida_salida = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False, related_name='transformaciones_unidad_salida')
+    cantidad_salida = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False, default=0)
+    usuario_creacion = models.ForeignKey(User, on_delete=models.CASCADE)
+    fecha_creacion = models.DateTimeField(auto_now_add=True)
+    activo = models.BooleanField(default=False)
+    
+    def __str__(self):
+        return f"{self.nombre} - {self.producto_elaborado_entrada.nombre} - {self.producto_elaborado_salida.nombre}"
+
+
+class LogTransformacion(models.Model):
+    definicion_transformacion = models.ForeignKey(DefinicionTransformacion, on_delete=models.CASCADE)
+    cantidad_producto_entrada_efectiva = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False, default=0) # Cantidad del producto de entrada que realmente se transformó en este evento (ej: se transformaron 2 tortas enteras).
+    cantidad_producto_salida_total_generado = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False, default=0) # Cantidad total del producto de salida generada en este evento (ej: si se transformaron 2 tortas y cada una produce 8 porciones, aquí sería 16)
+    costo_unitario_entrada_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0)
+    costo_total_entrada_calculado_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0) # Calculado: cantidad_producto_entrada_efectiva * costo_unitario_entrada_al_momento.
+    costo_unitario_salida_calculado_usd = models.DecimalField(max_digits=10, decimal_places=2, default=0) # - Calculado: costo_total_entrada_calculado / cantidad_producto_salida_total_generado. Este es el costo de cada unidad de porción generada.
+    usuario_creacion = models.ForeignKey(User, on_delete=models.CASCADE)
+    fecha_creacion = models.DateTimeField(auto_now_add=True)
+    notas = models.TextField(null=True, blank=True)
+
+    def __str__(self):
+        return f"{self.definicion_transformacion.nombre} - {self.cantidad_producto_entrada_efectiva} - {self.cantidad_producto_salida_total_generado}"
\ No newline at end of file
diff --git a/backend/djangobackend/apps/produccion/serializers.py b/backend/djangobackend/apps/produccion/serializers.py
new file mode 100644
index 00000000..0f021914
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/serializers.py
@@ -0,0 +1,19 @@
+from rest_framework import serializers
+from .models import Recetas, RecetasDetalles
+
+class RecetasSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = Recetas
+        fields = [
+                    'id',
+                    'producto_elaborado', 
+                    'componente_materia_prima', 
+                    'componente_producto_intermedio',
+                    'receta_detalle'
+                ]
+
+
+class RecetasDetallesSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = RecetasDetalles
+        fields = ['nombre', 'fecha_creacion']
\ No newline at end of file
diff --git a/backend/djangobackend/apps/produccion/tests.py b/backend/djangobackend/apps/produccion/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/produccion/urls.py b/backend/djangobackend/apps/produccion/urls.py
new file mode 100644
index 00000000..819791af
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/urls.py
@@ -0,0 +1,7 @@
+from rest_framework.routers import DefaultRouter
+from .viewsets import RecetasViewSet
+
+router = DefaultRouter()
+router.register(r'recetas', RecetasViewSet)
+
+urlpatterns = router.urls
\ No newline at end of file
diff --git a/backend/djangobackend/apps/produccion/views.py b/backend/djangobackend/apps/produccion/views.py
new file mode 100644
index 00000000..91ea44a2
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/backend/djangobackend/apps/produccion/viewsets.py b/backend/djangobackend/apps/produccion/viewsets.py
new file mode 100644
index 00000000..34721565
--- /dev/null
+++ b/backend/djangobackend/apps/produccion/viewsets.py
@@ -0,0 +1,79 @@
+from rest_framework import viewsets, status
+from rest_framework.response import Response
+from .models import Recetas, RecetasDetalles, MateriasPrimas
+from apps.produccion.serializers import RecetasSerializer, RecetasDetallesSerializer
+
+class RecetasDetallesViewSet(viewsets.ModelViewSet):
+    queryset = RecetasDetalles.objects.all()
+    serializer_class = RecetasDetallesSerializer
+
+
+class RecetasViewSet(viewsets.ModelViewSet):
+    queryset = Recetas.objects.all()
+    serializer_class = RecetasSerializer
+
+    def create(self, request, *args, **kwargs):
+    # Step 1: Manual validation of frontend data
+        data = request.data
+        nombre = data.get('nombre')
+        componentes = data.get('componente_receta', [])
+        # Basic validation
+        if not nombre:
+            return Response({'error': 'El nombre es requerido'}, status=status.HTTP_400_BAD_REQUEST)
+        
+        if not componentes or len(componentes) == 0:
+            return Response({'error': 'Los componentes son requeridos'}, status=status.HTTP_400_BAD_REQUEST)
+        
+        receta_detalle = RecetasDetalles.objects.create(nombre=nombre)
+
+        recetas_created = []
+        for componente in componentes:
+            objecto_componente = {}
+            if componente.get('materia_prima') == True:
+                objecto_componente = {
+                    'producto_elaborado': None,
+                    'componente_materia_prima': componente['componente_id'],        
+                    'componente_producto_intermedio': None,
+                    'receta_detalle': receta_detalle.id,
+                }
+                
+            elif componente.get('producto_intermedio') == True:
+                objecto_componente = {
+                    'producto_elaborado': None,
+                    'componente_materia_prima': None,
+                    'componente_producto_intermedio': componente['componente_id'],
+                    'receta_detalle': receta_detalle.id,
+                }
+            serializer = self.get_serializer(data=objecto_componente)
+            if serializer.is_valid():
+                serializer.save()
+                recetas_created.append(serializer.data)
+            else:
+                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+        return Response(recetas_created, status=status.HTTP_201_CREATED)
+
+        
+
+        # Step 2: Transform and create records
+        # recetas_created = []
+        
+        # for componente in componentes:
+        #     componente_id = componente.get('componente_id')
+        #     is_materia_prima = componente.get('materia_prima', False)
+            
+        #     # Transform to Django model format
+        #     receta_data = {
+        #         'nombre': nombre,
+        #         'componente_materia_prima': componente_id if is_materia_prima else None,
+        #         'componente_producto_intermedio': componente_id if not is_materia_prima else None,
+        #     }
+            
+        #     # Step 3: Use existing serializer for model validation
+        #     serializer = self.get_serializer(data=receta_data)
+        #     if serializer.is_valid():
+        #         receta = serializer.save()
+        #         recetas_created.append(serializer.data)
+        #     else:
+        #         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+        
+        return Response(data, status=status.HTTP_400_BAD_REQUEST)
diff --git a/backend/djangobackend/apps/users/__init__.py b/backend/djangobackend/apps/users/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/users/admin.py b/backend/djangobackend/apps/users/admin.py
new file mode 100644
index 00000000..424235e8
--- /dev/null
+++ b/backend/djangobackend/apps/users/admin.py
@@ -0,0 +1,14 @@
+from django.contrib import admin
+
+# Register your models here.
+from apps.users.models import User
+from apps.inventario.models import MateriasPrimas, ProductosElaborados, ProductosReventa, LotesMateriasPrimas, LotesProductosElaborados, LotesProductosReventa, UnidadesDeMedida
+
+admin.site.register(User)
+admin.site.register(MateriasPrimas)
+admin.site.register(ProductosElaborados)
+admin.site.register(ProductosReventa)
+admin.site.register(LotesMateriasPrimas)
+admin.site.register(LotesProductosElaborados)
+admin.site.register(LotesProductosReventa)
+admin.site.register(UnidadesDeMedida)
\ No newline at end of file
diff --git a/backend/djangobackend/apps/users/apps.py b/backend/djangobackend/apps/users/apps.py
new file mode 100644
index 00000000..2bb189ca
--- /dev/null
+++ b/backend/djangobackend/apps/users/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class UsersConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.users'
diff --git a/backend/djangobackend/apps/users/migrations/0001_initial.py b/backend/djangobackend/apps/users/migrations/0001_initial.py
new file mode 100644
index 00000000..2b6138e6
--- /dev/null
+++ b/backend/djangobackend/apps/users/migrations/0001_initial.py
@@ -0,0 +1,37 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.utils.timezone
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='User',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('password', models.CharField(max_length=128, verbose_name='password')),
+                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
+                ('username', models.CharField(max_length=64, unique=True)),
+                ('email', models.EmailField(max_length=254, unique=True)),
+                ('full_name', models.CharField(max_length=255)),
+                ('rol', models.CharField(choices=[('Gerente', 'Gerente'), ('Vendedor', 'Vendedor'), ('Admin', 'Administrador')], default='Vendedor', max_length=20, verbose_name='Rol de Usuario')),
+                ('is_staff', models.BooleanField(default=False)),
+                ('is_superuser', models.BooleanField(default=False)),
+                ('is_active', models.BooleanField(default=True)),
+                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
+                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
+                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
+            ],
+            options={
+                'abstract': False,
+            },
+        ),
+    ]
diff --git a/backend/djangobackend/apps/users/migrations/__init__.py b/backend/djangobackend/apps/users/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/users/models.py b/backend/djangobackend/apps/users/models.py
new file mode 100644
index 00000000..9b93e252
--- /dev/null
+++ b/backend/djangobackend/apps/users/models.py
@@ -0,0 +1,82 @@
+# users/models.py
+from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
+from django.db import models
+from django.utils import timezone
+
+class MyUserManager(BaseUserManager):
+    def _create_user(self, username, password, **extra_fields):
+        if not username:
+            raise ValueError('Debes proveer nombre de usuario')
+
+        user = self.model(username=username, **extra_fields)
+        user.set_password(password)
+        user.save(using=self._db)
+
+        return user
+
+    def create_user(self, username=None, password=None, **extra_fields):
+        extra_fields.setdefault('is_staff', False)
+        extra_fields.setdefault('is_superuser', False)
+
+        if username is None:
+            raise ValueError('El nombre de usuario es requerido para crear un usuario.')
+        if 'full_name' not in extra_fields:
+            raise ValueError('El nombre completo es requerido para crear un usuario.')
+        if 'rol' not in extra_fields:
+            extra_fields['rol'] = UserRoles.SALES 
+
+        return self._create_user(username, password, **extra_fields)
+
+    def create_superuser(self, username, password=None, **extra_fields):
+        extra_fields.setdefault('is_staff', True)
+        extra_fields.setdefault('is_superuser', True)
+
+        if username is None:
+            raise ValueError('El nombre de usuario es requerido para crear un superusuario.')
+        # For superuser, ensure full_name and rol are set, or provide sensible defaults
+        if 'full_name' not in extra_fields:
+            extra_fields['full_name'] = f"Admin {username}" 
+        if 'rol' not in extra_fields:
+            extra_fields['rol'] = UserRoles.ADMIN
+
+        if extra_fields.get('is_staff') is not True:
+            raise ValueError('Superuser must have is_staff=True.')
+        if extra_fields.get('is_superuser') is not True:
+            raise ValueError('Superuser must have is_superuser=True.')
+        return self._create_user(username, password, **extra_fields)
+
+
+class UserRoles(models.TextChoices):
+    MANAGER = 'Gerente', 'Gerente'
+    SALES = 'Vendedor', 'Vendedor'
+    ADMIN = 'Admin', 'Administrador'
+
+
+class User(AbstractBaseUser, PermissionsMixin):
+
+    username = models.CharField(max_length=64, unique=True)
+    email = models.EmailField(unique=True)
+    full_name = models.CharField(max_length=255, blank=False)
+    rol = models.CharField(
+                            max_length=20, 
+                            choices=UserRoles.choices, 
+                            default=UserRoles.SALES,
+                            verbose_name='Rol de Usuario'
+                        )
+    is_staff = models.BooleanField(default=False)
+    is_superuser = models.BooleanField(default=False)
+    is_active = models.BooleanField(default=True)
+
+    date_joined = models.DateTimeField(default=timezone.now)
+
+    objects = MyUserManager()
+
+    USERNAME_FIELD = 'username'
+    REQUIRED_FIELDS = ['full_name', 'rol'] 
+
+
+    def __str__(self):
+        return f"Nombre de usuario: { self.username }, Nombre completo {self.full_name}"
+
+    def get_full_name(self):
+        return self.full_name
\ No newline at end of file
diff --git a/backend/djangobackend/apps/users/serializers.py b/backend/djangobackend/apps/users/serializers.py
new file mode 100644
index 00000000..62225a8a
--- /dev/null
+++ b/backend/djangobackend/apps/users/serializers.py
@@ -0,0 +1,21 @@
+from apps.users.models import User
+from rest_framework import serializers
+
+class UserSerializer(serializers.ModelSerializer):
+    class Meta:
+        model = User
+        fields = [
+            'id',
+            'username', 
+            'password', 
+            'email', 
+            'full_name', 
+            'rol',
+        ]
+        extra_kwargs = {
+            'password': {'write_only': True}
+        }
+
+    def create(self, validated_data):
+        user = User.objects.create_user(**validated_data)
+        return user
\ No newline at end of file
diff --git a/backend/djangobackend/apps/users/tests.py b/backend/djangobackend/apps/users/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/users/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/users/urls.py b/backend/djangobackend/apps/users/urls.py
new file mode 100644
index 00000000..1a25c6e7
--- /dev/null
+++ b/backend/djangobackend/apps/users/urls.py
@@ -0,0 +1,7 @@
+from rest_framework.routers import DefaultRouter
+from apps.users.viewsets import UserViewSet
+
+router = DefaultRouter()
+router.register('users', UserViewSet, basename='user')
+
+urlpatterns = router.urls
\ No newline at end of file
diff --git a/backend/djangobackend/apps/users/views.py b/backend/djangobackend/apps/users/views.py
new file mode 100644
index 00000000..7913bbb4
--- /dev/null
+++ b/backend/djangobackend/apps/users/views.py
@@ -0,0 +1,98 @@
+from rest_framework.response import Response
+from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
+from rest_framework_simplejwt.serializers import TokenRefreshSerializer
+from rest_framework.permissions import IsAuthenticated
+from rest_framework import status
+from rest_framework_simplejwt.exceptions import InvalidToken
+from django.contrib.auth import authenticate
+from django.conf import settings
+from apps.users.serializers import UserSerializer
+from rest_framework.views import APIView
+
+class CustomTokenObtainPairView(TokenObtainPairView):
+    def post(self, request, *args, **kwargs):
+
+        # Validate credentials first
+        username = request.data.get('username')
+        password = request.data.get('password')
+
+        if not username or not password:
+            return Response(
+                {'detail': 'Nombre de usuario o contraseña no válidos.'},
+                status=status.HTTP_400_BAD_REQUEST
+            )
+        
+        user = authenticate(request, username=username, password=password)
+        if not user:
+            return Response(
+                {'detail': 'Credenciales incorrectas'},
+                status=status.HTTP_401_UNAUTHORIZED
+            )
+
+        # Generate tokens
+        response = super().post(request, *args, **kwargs)
+        
+        if response.status_code == 200:
+            refresh_token = response.data["refresh"]
+            access_token = response.data["access"]
+            
+            # Set httpOnly cookie with debug
+            response.set_cookie(
+                "refresh_token",
+                refresh_token,
+                max_age=864000,                    # 10 days
+                httponly=True,                     # Security: No JS access
+                secure=False,                      # Allow HTTP in development
+                samesite="Lax",                   # Less restrictive
+                domain=None,                      # Auto-determine domain
+                path="/",                         # Available site-wide
+            )
+
+            response.data = {
+                "access": access_token,
+                "userData": UserSerializer(user).data
+            }
+        
+        return response
+
+
+class CustomTokenRefreshView(TokenRefreshView):
+    serializer_class = TokenRefreshSerializer
+
+    def post(self, request, *args, **kwargs):
+        refresh_token = request.COOKIES.get("refresh_token")
+        if not refresh_token:
+            raise InvalidToken('No refresh token found in cookie.')
+        
+        serializer = self.get_serializer(data={"refresh": refresh_token})
+        try:
+            serializer.is_valid(raise_exception=True)
+        except InvalidToken as e:
+            raise InvalidToken(e.detail)
+
+        response = Response(serializer.validated_data, status=status.HTTP_200_OK)
+        return response
+
+
+class CustomLogoutView(APIView):
+    """
+    Logout view that clears the refresh token cookie
+    """
+    permission_classes = []  # Allow both authenticated and unauthenticated users
+    
+    def post(self, request, *args, **kwargs):
+        response = Response(
+            {'detail': 'Successfully logged out'}, 
+            status=status.HTTP_200_OK
+        )
+        
+        # Clear the refresh token cookie
+        response.delete_cookie(
+            "refresh_token",
+            path="/",
+            domain=None,
+            samesite="Lax"
+        )
+        
+        return response
+
diff --git a/backend/djangobackend/apps/users/viewsets.py b/backend/djangobackend/apps/users/viewsets.py
new file mode 100644
index 00000000..38659fbe
--- /dev/null
+++ b/backend/djangobackend/apps/users/viewsets.py
@@ -0,0 +1,43 @@
+from apps.users.models import User
+from apps.users.serializers import UserSerializer
+from rest_framework import viewsets, status
+from rest_framework.permissions import IsAuthenticated, AllowAny
+# from rest_framework.decorators import action
+# from rest_framework.response import Response
+# from django.contrib.auth import authenticate
+
+
+# Create your views here.
+class UserViewSet(viewsets.ModelViewSet):
+    queryset = User.objects.all()
+    serializer_class = UserSerializer
+
+    def get_permissions(self):
+        if self.action == 'create':
+            self.permission_classes = [AllowAny]
+        return super().get_permissions()
+
+    # @action(detail=False, methods=['post'], permission_classes=[AllowAny], url_path='validate-credentials')
+    # def login(self, request):
+    #     """
+    #     Validate user credentials (username and password).
+    #     """
+    #     username = request.data.get('username')
+    #     password = request.data.get('password')
+
+    #     if not username or not password:
+    #         return Response(
+    #             {'detail': 'Nombre de usuario o contraseña no válidos.'},
+    #             status=status.HTTP_400_BAD_REQUEST
+    #         )
+
+    #     user = authenticate(request, username=username, password=password)
+    #     if user is not None:
+
+            
+    #         return Response({'userData': UserSerializer(user).data}, status=status.HTTP_200_OK)
+    #     else:
+    #         return Response(
+    #             {'detail': 'Credenciales incorrectas'},
+    #             status=status.HTTP_401_UNAUTHORIZED
+    #         )
diff --git a/backend/djangobackend/apps/ventas/__init__.py b/backend/djangobackend/apps/ventas/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/ventas/admin.py b/backend/djangobackend/apps/ventas/admin.py
new file mode 100644
index 00000000..8c38f3f3
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/backend/djangobackend/apps/ventas/apps.py b/backend/djangobackend/apps/ventas/apps.py
new file mode 100644
index 00000000..0ff8227f
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class VentasConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'apps.ventas'
diff --git a/backend/djangobackend/apps/ventas/migrations/0001_initial.py b/backend/djangobackend/apps/ventas/migrations/0001_initial.py
new file mode 100644
index 00000000..f9aabd63
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/migrations/0001_initial.py
@@ -0,0 +1,119 @@
+# Generated by Django 5.2.1 on 2025-08-05 16:01
+
+import django.db.models.deletion
+from django.conf import settings
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('core', '0001_initial'),
+        ('inventario', '0002_initial'),
+        ('produccion', '0001_initial'),
+        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Clientes',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('nombre_cliente', models.CharField(max_length=100)),
+                ('apellido_cliente', models.CharField(max_length=100)),
+                ('telefono', models.CharField(max_length=100, null=True)),
+                ('email', models.CharField(blank=True, max_length=100, null=True)),
+                ('rif_cedula', models.CharField(blank=True, max_length=100, null=True)),
+                ('fecha_registro', models.DateField(auto_now_add=True)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='OrdenVenta',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fecha_creacion_orden', models.DateField()),
+                ('fecha_entrega_solicitada', models.DateField()),
+                ('fecha_entrega_definitiva', models.DateField()),
+                ('notas_generales', models.TextField(blank=True, max_length=255, null=True)),
+                ('monto_descuento_usd', models.DecimalField(blank=True, decimal_places=2, default=0, max_digits=10, null=True)),
+                ('monto_total_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('monto_total_ves', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('tasa_cambio_aplicada', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ventas.clientes')),
+                ('usuario_creador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Ventas',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('fecha_venta', models.DateField()),
+                ('monto_total_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('monto_total_ves', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('tasa_cambio_aplicada', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+                ('cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ventas.clientes')),
+                ('usuario_cajero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='DetallesOrdenVenta',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_solicitada', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('precio_unitario_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('subtotal_linea_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+                ('produccion_asociada', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='produccion.produccion')),
+                ('producto_elaborado', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventario.productoselaborados')),
+                ('producto_reventa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inventario.productosreventa')),
+                ('unidad_medida', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unidadesdemedida')),
+                ('orden_venta_asociada', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ventas.ordenventa')),
+            ],
+            options={
+                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('producto_elaborado__isnull', False), ('producto_reventa__isnull', True)), models.Q(('producto_elaborado__isnull', True), ('producto_reventa__isnull', False)), _connector='OR'), name='detalle_orden_venta_un_solo_tipo_de_producto')],
+            },
+        ),
+        migrations.CreateModel(
+            name='Pagos',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('monto_pago_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('monto_pago_ves', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('fecha_pago', models.DateField()),
+                ('referencia_pago', models.CharField(blank=True, max_length=100, null=True)),
+                ('tasa_cambio_aplicada', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('notas', models.TextField(blank=True, max_length=255, null=True)),
+                ('metodo_pago', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.metodosdepago')),
+                ('orden_venta_asociada', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ventas.ordenventa')),
+                ('usuario_registrador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
+                ('venta_asociada', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ventas.ventas')),
+            ],
+            options={
+                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('venta_asociada__isnull', False), ('orden_venta_asociada__isnull', True)), models.Q(('venta_asociada__isnull', True), ('orden_venta_asociada__isnull', False)), _connector='OR'), name='un_solo_tipo_de_venta_por_pago')],
+            },
+        ),
+        migrations.CreateModel(
+            name='DetalleVenta',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('cantidad_vendida', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('precio_unitario_usd', models.DecimalField(decimal_places=2, max_digits=10)),
+                ('subtotal_linea_usd', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
+                ('lote_producto_elaborado_vendido', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventario.lotesproductoselaborados')),
+                ('lote_producto_reventa_vendido', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventario.lotesproductosreventa')),
+                ('producto_elaborado', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventario.productoselaborados')),
+                ('producto_reventa', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='inventario.productosreventa')),
+                ('unidad_medida_venta', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.unidadesdemedida')),
+                ('venta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detalles', to='ventas.ventas')),
+            ],
+            options={
+                'verbose_name': 'Detalle de Venta',
+                'verbose_name_plural': 'Detalles de Venta',
+                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('producto_elaborado__isnull', False), ('producto_reventa__isnull', True)), models.Q(('producto_elaborado__isnull', True), ('producto_reventa__isnull', False)), _connector='OR'), name='detalle_venta_un_solo_tipo_de_producto'), models.CheckConstraint(condition=models.Q(('producto_elaborado__isnull', True), ('lote_producto_elaborado_vendido__isnull', False), _connector='OR'), name='producto_elaborado_requiere_lote'), models.CheckConstraint(condition=models.Q(('producto_elaborado__isnull', False), ('lote_producto_elaborado_vendido__isnull', True), _connector='OR'), name='lote_elaborado_solo_con_producto_elaborado'), models.CheckConstraint(condition=models.Q(('producto_reventa__isnull', False), ('lote_producto_reventa_vendido__isnull', True), _connector='OR'), name='lote_reventa_solo_con_producto_reventa')],
+            },
+        ),
+    ]
diff --git a/backend/djangobackend/apps/ventas/migrations/__init__.py b/backend/djangobackend/apps/ventas/migrations/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/apps/ventas/models.py b/backend/djangobackend/apps/ventas/models.py
new file mode 100644
index 00000000..892ee909
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/models.py
@@ -0,0 +1,194 @@
+from django.db import models
+from django.db.models import Q
+from django.core.exceptions import ValidationError
+from apps.users.models import User
+from apps.inventario.models import UnidadesDeMedida, ProductosElaborados, ProductosReventa, LotesProductosElaborados, LotesProductosReventa
+from apps.produccion.models import Produccion
+from apps.core.models import MetodosDePago
+# Create your models here.
+class Clientes(models.Model):
+    nombre_cliente = models.CharField(max_length=100, null=False, blank=False)
+    apellido_cliente = models.CharField(max_length=100, null=False, blank=False)
+    telefono = models.CharField(max_length=100, null=True, blank=False)
+    email = models.CharField(max_length=100, null=True, blank=True)
+    rif_cedula = models.CharField(max_length=100, null=True, blank=True)
+    fecha_registro = models.DateField(auto_now_add=True)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+    
+    def __str__(self):
+        return self.nombre_cliente
+
+
+class Ventas(models.Model):
+    cliente = models.ForeignKey(Clientes, on_delete=models.CASCADE, null=False, blank=False)
+    usuario_cajero = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False)
+    fecha_venta = models.DateField(null=False, blank=False)
+    monto_total_usd = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    monto_total_ves = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    tasa_cambio_aplicada = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+
+    def __str__(self):
+        return self.cliente.nombre_cliente
+
+
+class DetalleVenta(models.Model):
+    """
+    Representa una línea individual dentro de una Venta.
+    """
+    # --- Campos de Relación ---
+    venta = models.ForeignKey(Ventas, on_delete=models.CASCADE, related_name='detalles')
+    
+    # Un detalle debe estar asociado a un producto, pero solo a uno de los dos tipos.
+    producto_elaborado = models.ForeignKey(ProductosElaborados, on_delete=models.PROTECT, null=True, blank=True)
+    producto_reventa = models.ForeignKey(ProductosReventa, on_delete=models.PROTECT, null=True, blank=True)
+    
+    # El lote específico que se está vendiendo.
+    lote_producto_elaborado_vendido = models.ForeignKey(LotesProductosElaborados, on_delete=models.PROTECT, null=True, blank=True)
+    lote_producto_reventa_vendido = models.ForeignKey(LotesProductosReventa, on_delete=models.PROTECT, null=True, blank=True)
+    
+    # --- Campos de la Venta ---
+    unidad_medida_venta = models.ForeignKey(UnidadesDeMedida, on_delete=models.PROTECT)
+    
+    cantidad_vendida = models.DecimalField(max_digits=10, decimal_places=2) # Decimal por si vendes fracciones (ej. 1.5 kg)
+    precio_unitario_usd = models.DecimalField(max_digits=10, decimal_places=2)
+    
+    subtotal_linea_usd = models.DecimalField(max_digits=12, decimal_places=2, editable=False)
+
+    def __str__(self):
+        producto_nombre = ""
+        if self.producto_elaborado:
+            producto_nombre = self.producto_elaborado.nombre
+        elif self.producto_reventa:
+            producto_nombre = self.producto_reventa.nombre
+        return f"Venta #{self.venta.id} - {self.cantidad_vendida} x {producto_nombre}"
+
+    # MEJORA 3: Validación a nivel de aplicación con mensajes de error claros.
+    def clean(self):
+        super().clean()
+        
+        # --- Regla: Debe haber un producto, y solo uno. ---
+        if self.producto_elaborado and self.producto_reventa:
+            raise ValidationError("Un detalle de venta no puede tener un producto elaborado y un producto de reventa al mismo tiempo.")
+        
+        if not self.producto_elaborado and not self.producto_reventa:
+            raise ValidationError("Un detalle de venta debe estar asociado a un producto elaborado o a un producto de reventa.")
+            
+        # --- Reglas para Producto Elaborado ---
+        if self.producto_elaborado:
+            if not self.lote_producto_elaborado_vendido:
+                raise ValidationError("Si se vende un producto elaborado, se debe especificar el lote.")
+            if self.producto_reventa or self.lote_producto_reventa_vendido:
+                raise ValidationError("Un detalle de producto elaborado no puede tener campos de producto de reventa.")
+
+        # --- Reglas para Producto de Reventa ---
+        if self.producto_reventa:
+            if self.producto_elaborado or self.lote_producto_elaborado_vendido:
+                raise ValidationError("Un detalle de producto de reventa no puede tener campos de producto elaborado.")
+            # Aquí la lógica es que un producto de reventa PUEDE o NO tener lote.
+            # No se necesita una validación explícita más allá de la consistencia.
+
+    # MEJORA 4 (continuación): Sobrescribir save() para el cálculo.
+    def save(self, *args, **kwargs):
+        # Calcula el subtotal antes de guardar
+        self.subtotal_linea_usd = self.cantidad_vendida * self.precio_unitario_usd
+        
+        # Llama al método clean() para ejecutar las validaciones antes de intentar guardar en la BD.
+        # Esto es una buena práctica para asegurar que los datos son válidos a nivel de aplicación.
+        self.clean()
+        
+        super().save(*args, **kwargs)
+
+    class Meta:
+        verbose_name = "Detalle de Venta"
+        verbose_name_plural = "Detalles de Venta"
+        
+        # MEJORA 2: Restricciones más simples y específicas.
+        constraints = [
+            # Restricción 1: Asegura que solo uno de los dos campos de producto tiene valor.
+            models.CheckConstraint(
+                check=(
+                    Q(producto_elaborado__isnull=False, producto_reventa__isnull=True) |
+                    Q(producto_elaborado__isnull=True, producto_reventa__isnull=False)
+                ),
+                name='detalle_venta_un_solo_tipo_de_producto'
+            ),
+            # Restricción 2: Si hay producto elaborado, DEBE haber lote elaborado.
+            models.CheckConstraint(
+                check=Q(producto_elaborado__isnull=True) | Q(lote_producto_elaborado_vendido__isnull=False),
+                name='producto_elaborado_requiere_lote'
+            ),
+            # Restricción 3: No se puede tener un lote sin su producto correspondiente (consistencia).
+            models.CheckConstraint(
+                check=Q(producto_elaborado__isnull=False) | Q(lote_producto_elaborado_vendido__isnull=True),
+                name='lote_elaborado_solo_con_producto_elaborado'
+            ),
+            models.CheckConstraint(
+                check=Q(producto_reventa__isnull=False) | Q(lote_producto_reventa_vendido__isnull=True),
+                name='lote_reventa_solo_con_producto_reventa'
+            )
+        ]
+
+
+class OrdenVenta(models.Model):
+    cliente = models.ForeignKey(Clientes, on_delete=models.CASCADE, null=False, blank=False)
+    fecha_creacion_orden = models.DateField(null=False, blank=False)
+    fecha_entrega_solicitada = models.DateField(null=False, blank=False)
+    fecha_entrega_definitiva = models.DateField(null=False, blank=False)
+    usuario_creador = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False)
+    notas_generales = models.TextField(max_length=255, null=True, blank=True)
+    monto_descuento_usd = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True, default=0)
+    monto_total_usd = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    monto_total_ves = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    tasa_cambio_aplicada = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+
+    def __str__(self):
+        return f"Orden de Venta #{self.id} - {self.cliente.nombre_cliente}"
+
+
+class DetallesOrdenVenta(models.Model):
+    produccion_asociada = models.ForeignKey(Produccion, on_delete=models.CASCADE, null=False, blank=False)
+    orden_venta_asociada = models.ForeignKey(OrdenVenta, on_delete=models.CASCADE, null=False, blank=False)
+    producto_elaborado = models.ForeignKey(ProductosElaborados, on_delete=models.CASCADE, null=True, blank=True)
+    producto_reventa = models.ForeignKey(ProductosReventa, on_delete=models.CASCADE, null=True, blank=True)
+    cantidad_solicitada = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    unidad_medida = models.ForeignKey(UnidadesDeMedida, on_delete=models.CASCADE, null=False, blank=False)
+    precio_unitario_usd = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    subtotal_linea_usd = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+    
+    def __str__(self):
+        return f"Detalle de Orden de Venta #{self.id} - {self.producto_elaborado.nombre if self.producto_elaborado else self.producto_reventa.nombre}"
+
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(Q(producto_elaborado__isnull=False) & Q(producto_reventa__isnull=True)) | (Q(producto_elaborado__isnull=True) & Q(producto_reventa__isnull=False)),
+                name='detalle_orden_venta_un_solo_tipo_de_producto'
+            )
+        ]
+
+
+class Pagos(models.Model):
+    venta_asociada = models.ForeignKey(Ventas, on_delete=models.CASCADE, null=True, blank=True)
+    orden_venta_asociada = models.ForeignKey(OrdenVenta, on_delete=models.CASCADE, null=True, blank=True)
+    metodo_pago = models.ForeignKey(MetodosDePago, on_delete=models.CASCADE, null=False, blank=False)
+    monto_pago_usd = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    monto_pago_ves = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    fecha_pago = models.DateField(null=False, blank=False)
+    referencia_pago = models.CharField(max_length=100, null=True, blank=True)
+    usuario_registrador = models.ForeignKey(User, on_delete=models.CASCADE, null=False, blank=False)
+    tasa_cambio_aplicada = models.DecimalField(max_digits=10, decimal_places=2, null=False, blank=False)
+    notas = models.TextField(max_length=255, null=True, blank=True)
+    
+    def __str__(self):
+        return f"Pago #{self.id} - {self.metodo_pago.nombre}"
+    
+    class Meta:
+        constraints = [
+            models.CheckConstraint(
+                check=(Q(venta_asociada__isnull=False) & Q(orden_venta_asociada__isnull=True)) | (Q(venta_asociada__isnull=True) & Q(orden_venta_asociada__isnull=False)),
+                name='un_solo_tipo_de_venta_por_pago'
+            )
+        ]
+
diff --git a/backend/djangobackend/apps/ventas/tests.py b/backend/djangobackend/apps/ventas/tests.py
new file mode 100644
index 00000000..7ce503c2
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/backend/djangobackend/apps/ventas/views.py b/backend/djangobackend/apps/ventas/views.py
new file mode 100644
index 00000000..91ea44a2
--- /dev/null
+++ b/backend/djangobackend/apps/ventas/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/backend/djangobackend/djangobackend/__init__.py b/backend/djangobackend/djangobackend/__init__.py
new file mode 100644
index 00000000..e69de29b
diff --git a/backend/djangobackend/djangobackend/asgi.py b/backend/djangobackend/djangobackend/asgi.py
new file mode 100644
index 00000000..4c785d51
--- /dev/null
+++ b/backend/djangobackend/djangobackend/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for djangobackend project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'djangobackend.settings')
+
+application = get_asgi_application()
diff --git a/backend/djangobackend/djangobackend/settings.py b/backend/djangobackend/djangobackend/settings.py
new file mode 100644
index 00000000..caeb9433
--- /dev/null
+++ b/backend/djangobackend/djangobackend/settings.py
@@ -0,0 +1,203 @@
+"""
+Django settings for djangobackend project.
+
+Generated by 'django-admin startproject' using Django 5.2.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/5.2/ref/settings/
+"""
+
+from pathlib import Path
+from datetime import timedelta
+
+import os
+from dotenv import load_dotenv
+from urllib.parse import urlparse, parse_qsl
+
+load_dotenv()
+
+tmpPostgres = urlparse(os.getenv('DATABASE_URL'))
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-7-9@3mthi-+)4)1pjpmzu+44em^*ib+%0md)&#z)ag2t!6q98x'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = ['*']
+
+
+# REST_FRAMEWORK = { }
+
+REST_FRAMEWORK = {
+    'DEFAULT_AUTHENTICATION_CLASSES': (
+        'rest_framework_simplejwt.authentication.JWTAuthentication',
+    ),
+    'DEFAULT_PERMISSION_CLASSES': (
+        'rest_framework.permissions.IsAuthenticated',
+    ),
+}
+
+
+from datetime import timedelta
+
+SIMPLE_JWT = {
+    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
+    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),   # Default is 1 day
+
+    # You can add custom claims to your tokens if needed:
+    # 'USER_ID_FIELD': 'id',
+    # 'USER_ID_CLAIM': 'user_id',
+    # 'AUTH_HEADER_TYPES': ('Bearer',),
+    # 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
+    # 'ALGORITHM': 'HS256',
+    # 'SIGNING_KEY': settings.SECRET_KEY, # It's recommended to use a separate key for JWT
+    # 'VERIFYING_KEY': None,
+    # 'AUDIENCE': None,
+    # 'ISSUER': None,
+    # 'JWK_URL': None,
+    # 'LEEWAY': 0,
+}
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'rest_framework',
+    'rest_framework_simplejwt',
+    'corsheaders',
+    
+    'apps.core.apps.CoreConfig',
+    'apps.users.apps.UsersConfig',
+    'apps.inventario.apps.InventarioConfig',
+    'apps.produccion.apps.ProduccionConfig',
+    'apps.compras.apps.ComprasConfig',
+    'apps.ventas.apps.VentasConfig',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'corsheaders.middleware.CorsMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+CORS_ALLOWED_ORIGINS = [
+    "http://localhost:5174",  # Your Vite frontend
+    "http://localhost:3000",  # React default port
+]
+
+CORS_ALLOW_CREDENTIALS = True
+
+CORS_EXPOSE_HEADERS = ['Set-Cookie']
+
+CORS_ALLOW_HEADERS = [
+    'accept',
+    'accept-encoding', 
+    'authorization',
+    'content-type',
+    'dnt',
+    'origin',
+    'user-agent',
+    'x-csrftoken',
+    'x-requested-with',
+]
+
+ROOT_URLCONF = 'djangobackend.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'djangobackend.wsgi.application'
+
+# Database
+# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': tmpPostgres.path.replace('/', ''),
+        'USER': tmpPostgres.username,
+        'PASSWORD': tmpPostgres.password,
+        'HOST': tmpPostgres.hostname,
+        'PORT': 5432,
+        'OPTIONS': dict(parse_qsl(tmpPostgres.query)),
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/5.2/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/5.2/howto/static-files/
+
+STATIC_URL = 'static/'
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
+
+
+# settings.py
+AUTH_USER_MODEL = 'users.User'
\ No newline at end of file
diff --git a/backend/djangobackend/djangobackend/urls.py b/backend/djangobackend/djangobackend/urls.py
new file mode 100644
index 00000000..1ea6d8ef
--- /dev/null
+++ b/backend/djangobackend/djangobackend/urls.py
@@ -0,0 +1,15 @@
+from django.contrib import admin
+from django.urls import path, include
+from apps.users.views import CustomTokenObtainPairView, CustomTokenRefreshView, CustomLogoutView
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('api/token/', CustomTokenObtainPairView.as_view(), name='get_token'),
+    path('api/token/refresh/', CustomTokenRefreshView.as_view(), name='refresh'),
+    path('api/logout/', CustomLogoutView.as_view(), name='logout'),
+    path('api/', include('apps.users.urls')),
+    path('api/', include('apps.inventario.urls')),
+    path('api/', include('apps.core.urls')),
+    path('api/', include('apps.compras.urls')),
+    path('api/', include('apps.produccion.urls')),
+]
diff --git a/backend/djangobackend/djangobackend/wsgi.py b/backend/djangobackend/djangobackend/wsgi.py
new file mode 100644
index 00000000..39af9eff
--- /dev/null
+++ b/backend/djangobackend/djangobackend/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for djangobackend project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'djangobackend.settings')
+
+application = get_wsgi_application()
diff --git a/backend/djangobackend/manage.py b/backend/djangobackend/manage.py
new file mode 100755
index 00000000..77f98009
--- /dev/null
+++ b/backend/djangobackend/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'djangobackend.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/backend/requirements.txt b/backend/requirements.txt
new file mode 100644
index 00000000..2c795253
--- /dev/null
+++ b/backend/requirements.txt
@@ -0,0 +1,6 @@
+Django==5.2.1
+djangorestframework==3.16.0
+django-cors-headers==4.7.0
+djangorestframework_simplejwt==5.5.0
+python-dotenv==1.1.1
+psycopg2==2.9.10
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/.env b/frontend/panaderia-interfaz/.env
new file mode 100644
index 00000000..93fa24af
--- /dev/null
+++ b/frontend/panaderia-interfaz/.env
@@ -0,0 +1 @@
+VITE_API_URL=http://localhost:8000
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/.gitignore b/frontend/panaderia-interfaz/.gitignore
new file mode 100644
index 00000000..a547bf36
--- /dev/null
+++ b/frontend/panaderia-interfaz/.gitignore
@@ -0,0 +1,24 @@
+# Logs
+logs
+*.log
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+pnpm-debug.log*
+lerna-debug.log*
+
+node_modules
+dist
+dist-ssr
+*.local
+
+# Editor directories and files
+.vscode/*
+!.vscode/extensions.json
+.idea
+.DS_Store
+*.suo
+*.ntvs*
+*.njsproj
+*.sln
+*.sw?
diff --git a/frontend/panaderia-interfaz/README.md b/frontend/panaderia-interfaz/README.md
new file mode 100644
index 00000000..a2980c22
--- /dev/null
+++ b/frontend/panaderia-interfaz/README.md
@@ -0,0 +1,54 @@
+# React + TypeScript + Vite
+
+This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
+
+Currently, two official plugins are available:
+
+- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
+- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
+
+## Expanding the ESLint configuration
+
+If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:
+
+```js
+export default tseslint.config({
+  extends: [
+    // Remove ...tseslint.configs.recommended and replace with this
+    ...tseslint.configs.recommendedTypeChecked,
+    // Alternatively, use this for stricter rules
+    ...tseslint.configs.strictTypeChecked,
+    // Optionally, add this for stylistic rules
+    ...tseslint.configs.stylisticTypeChecked,
+  ],
+  languageOptions: {
+    // other options...
+    parserOptions: {
+      project: ["./tsconfig.node.json", "./tsconfig.app.json"],
+      tsconfigRootDir: import.meta.dirname,
+    },
+  },
+});
+```
+
+You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:
+
+```js
+// eslint.config.js
+import reactX from "eslint-plugin-react-x";
+import reactDom from "eslint-plugin-react-dom";
+
+export default tseslint.config({
+  plugins: {
+    // Add the react-x and react-dom plugins
+    "react-x": reactX,
+    "react-dom": reactDom,
+  },
+  rules: {
+    // other rules...
+    // Enable its recommended typescript rules
+    ...reactX.configs["recommended-typescript"].rules,
+    ...reactDom.configs.recommended.rules,
+  },
+});
+```
diff --git a/frontend/panaderia-interfaz/eslint.config.js b/frontend/panaderia-interfaz/eslint.config.js
new file mode 100644
index 00000000..79a552ea
--- /dev/null
+++ b/frontend/panaderia-interfaz/eslint.config.js
@@ -0,0 +1,28 @@
+import js from "@eslint/js";
+import globals from "globals";
+import reactHooks from "eslint-plugin-react-hooks";
+import reactRefresh from "eslint-plugin-react-refresh";
+import tseslint from "typescript-eslint";
+
+export default tseslint.config(
+  { ignores: ["dist"] },
+  {
+    extends: [js.configs.recommended, ...tseslint.configs.recommended],
+    files: ["**/*.{ts,tsx}"],
+    languageOptions: {
+      ecmaVersion: 2020,
+      globals: globals.browser,
+    },
+    plugins: {
+      "react-hooks": reactHooks,
+      "react-refresh": reactRefresh,
+    },
+    rules: {
+      ...reactHooks.configs.recommended.rules,
+      "react-refresh/only-export-components": [
+        "warn",
+        { allowConstantExport: true },
+      ],
+    },
+  },
+);
diff --git a/frontend/panaderia-interfaz/index.html b/frontend/panaderia-interfaz/index.html
new file mode 100644
index 00000000..c470b0b2
--- /dev/null
+++ b/frontend/panaderia-interfaz/index.html
@@ -0,0 +1,19 @@
+<!doctype html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>Sistema</title>
+    <link rel="preconnect" href="https://fonts.googleapis.com" />
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
+    <link
+      href="https://fonts.googleapis.com/css2?family=Anton&family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Roboto:ital,wght@0,100..900;1,100..900&family=Sevillana&display=swap"
+      rel="stylesheet"
+    />
+  </head>
+  <body>
+    <div id="root"></div>
+    <script type="module" src="/src/main.tsx"></script>
+  </body>
+</html>
diff --git a/frontend/panaderia-interfaz/package-lock.json b/frontend/panaderia-interfaz/package-lock.json
new file mode 100644
index 00000000..5cc91e07
--- /dev/null
+++ b/frontend/panaderia-interfaz/package-lock.json
@@ -0,0 +1,4398 @@
+{
+  "name": "panaderia-interfaz",
+  "version": "0.0.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "panaderia-interfaz",
+      "version": "0.0.0",
+      "dependencies": {
+        "@hookform/resolvers": "^5.1.1",
+        "@tailwindcss/vite": "^4.1.11",
+        "@tanstack/react-query": "^5.83.0",
+        "axios": "^1.11.0",
+        "jwt-decode": "^4.0.0",
+        "react": "^19.1.0",
+        "react-dom": "^19.1.0",
+        "react-hook-form": "^7.57.0",
+        "react-router-dom": "^7.6.1",
+        "tailwindcss": "^4.1.11",
+        "zod": "^3.25.50"
+      },
+      "devDependencies": {
+        "@eslint/js": "^9.30.1",
+        "@types/node": "^24.1.0",
+        "@types/react": "^19.1.8",
+        "@types/react-dom": "^19.1.6",
+        "@vitejs/plugin-react": "^4.6.0",
+        "eslint": "^9.30.1",
+        "eslint-plugin-react-hooks": "^5.2.0",
+        "eslint-plugin-react-refresh": "^0.4.20",
+        "globals": "^16.3.0",
+        "prettier": "3.6.2",
+        "typescript": "~5.8.3",
+        "typescript-eslint": "^8.35.1",
+        "vite": "^7.0.4"
+      }
+    },
+    "node_modules/@ampproject/remapping": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
+      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/code-frame": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
+      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "js-tokens": "^4.0.0",
+        "picocolors": "^1.1.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/compat-data": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
+      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/core": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
+      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-compilation-targets": "^7.27.2",
+        "@babel/helper-module-transforms": "^7.27.3",
+        "@babel/helpers": "^7.27.6",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/traverse": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@babel/generator": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
+      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.28.0",
+        "@babel/types": "^7.28.0",
+        "@jridgewell/gen-mapping": "^0.3.12",
+        "@jridgewell/trace-mapping": "^0.3.28",
+        "jsesc": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
+      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/compat-data": "^7.27.2",
+        "@babel/helper-validator-option": "^7.27.1",
+        "browserslist": "^4.24.0",
+        "lru-cache": "^5.1.1",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-globals": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
+      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-imports": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
+      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/traverse": "^7.27.1",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-transforms": {
+      "version": "7.27.3",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
+      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-module-imports": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "@babel/traverse": "^7.27.3"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@babel/helper-plugin-utils": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
+      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-string-parser": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
+      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-identifier": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
+      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-option": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
+      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helpers": {
+      "version": "7.27.6",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
+      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.27.6"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/parser": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
+      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.28.0"
+      },
+      "bin": {
+        "parser": "bin/babel-parser.js"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/plugin-transform-react-jsx-self": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
+      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-transform-react-jsx-source": {
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
+      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/template": {
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
+      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/parser": "^7.27.2",
+        "@babel/types": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/traverse": {
+      "version": "7.28.0",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
+      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.28.0",
+        "@babel/helper-globals": "^7.28.0",
+        "@babel/parser": "^7.28.0",
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.28.0",
+        "debug": "^4.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/types": {
+      "version": "7.28.1",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.1.tgz",
+      "integrity": "sha512-x0LvFTekgSX+83TI28Y9wYPUfzrnl2aT5+5QLnO6v7mSJYtEEevuDRN0F0uSHRk1G1IWZC43o00Y0xDDrpBGPQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-string-parser": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@esbuild/aix-ppc64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.6.tgz",
+      "integrity": "sha512-ShbM/3XxwuxjFiuVBHA+d3j5dyac0aEVVq1oluIDf71hUw0aRF59dV/efUsIwFnR6m8JNM2FjZOzmaZ8yG61kw==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "aix"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-arm": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.6.tgz",
+      "integrity": "sha512-S8ToEOVfg++AU/bHwdksHNnyLyVM+eMVAOf6yRKFitnwnbwwPNqKr3srzFRe7nzV69RQKb5DgchIX5pt3L53xg==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.6.tgz",
+      "integrity": "sha512-hd5zdUarsK6strW+3Wxi5qWws+rJhCCbMiC9QZyzoxfk5uHRIE8T287giQxzVpEvCwuJ9Qjg6bEjcRJcgfLqoA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/android-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.6.tgz",
+      "integrity": "sha512-0Z7KpHSr3VBIO9A/1wcT3NTy7EB4oNC4upJ5ye3R7taCc2GUdeynSLArnon5G8scPwaU866d3H4BCrE5xLW25A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/darwin-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.6.tgz",
+      "integrity": "sha512-FFCssz3XBavjxcFxKsGy2DYK5VSvJqa6y5HXljKzhRZ87LvEi13brPrf/wdyl/BbpbMKJNOr1Sd0jtW4Ge1pAA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/darwin-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.6.tgz",
+      "integrity": "sha512-GfXs5kry/TkGM2vKqK2oyiLFygJRqKVhawu3+DOCk7OxLy/6jYkWXhlHwOoTb0WqGnWGAS7sooxbZowy+pK9Yg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/freebsd-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.6.tgz",
+      "integrity": "sha512-aoLF2c3OvDn2XDTRvn8hN6DRzVVpDlj2B/F66clWd/FHLiHaG3aVZjxQX2DYphA5y/evbdGvC6Us13tvyt4pWg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/freebsd-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.6.tgz",
+      "integrity": "sha512-2SkqTjTSo2dYi/jzFbU9Plt1vk0+nNg8YC8rOXXea+iA3hfNJWebKYPs3xnOUf9+ZWhKAaxnQNUf2X9LOpeiMQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-arm": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.6.tgz",
+      "integrity": "sha512-SZHQlzvqv4Du5PrKE2faN0qlbsaW/3QQfUUc6yO2EjFcA83xnwm91UbEEVx4ApZ9Z5oG8Bxz4qPE+HFwtVcfyw==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.6.tgz",
+      "integrity": "sha512-b967hU0gqKd9Drsh/UuAm21Khpoh6mPBSgz8mKRq4P5mVK8bpA+hQzmm/ZwGVULSNBzKdZPQBRT3+WuVavcWsQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-ia32": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.6.tgz",
+      "integrity": "sha512-aHWdQ2AAltRkLPOsKdi3xv0mZ8fUGPdlKEjIEhxCPm5yKEThcUjHpWB1idN74lfXGnZ5SULQSgtr5Qos5B0bPw==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-loong64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.6.tgz",
+      "integrity": "sha512-VgKCsHdXRSQ7E1+QXGdRPlQ/e08bN6WMQb27/TMfV+vPjjTImuT9PmLXupRlC90S1JeNNW5lzkAEO/McKeJ2yg==",
+      "cpu": [
+        "loong64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-mips64el": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.6.tgz",
+      "integrity": "sha512-WViNlpivRKT9/py3kCmkHnn44GkGXVdXfdc4drNmRl15zVQ2+D2uFwdlGh6IuK5AAnGTo2qPB1Djppj+t78rzw==",
+      "cpu": [
+        "mips64el"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-ppc64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.6.tgz",
+      "integrity": "sha512-wyYKZ9NTdmAMb5730I38lBqVu6cKl4ZfYXIs31Baf8aoOtB4xSGi3THmDYt4BTFHk7/EcVixkOV2uZfwU3Q2Jw==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-riscv64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.6.tgz",
+      "integrity": "sha512-KZh7bAGGcrinEj4qzilJ4hqTY3Dg2U82c8bv+e1xqNqZCrCyc+TL9AUEn5WGKDzm3CfC5RODE/qc96OcbIe33w==",
+      "cpu": [
+        "riscv64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-s390x": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.6.tgz",
+      "integrity": "sha512-9N1LsTwAuE9oj6lHMyyAM+ucxGiVnEqUdp4v7IaMmrwb06ZTEVCIs3oPPplVsnjPfyjmxwHxHMF8b6vzUVAUGw==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/linux-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.6.tgz",
+      "integrity": "sha512-A6bJB41b4lKFWRKNrWoP2LHsjVzNiaurf7wyj/XtFNTsnPuxwEBWHLty+ZE0dWBKuSK1fvKgrKaNjBS7qbFKig==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/netbsd-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.6.tgz",
+      "integrity": "sha512-IjA+DcwoVpjEvyxZddDqBY+uJ2Snc6duLpjmkXm/v4xuS3H+3FkLZlDm9ZsAbF9rsfP3zeA0/ArNDORZgrxR/Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/netbsd-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.6.tgz",
+      "integrity": "sha512-dUXuZr5WenIDlMHdMkvDc1FAu4xdWixTCRgP7RQLBOkkGgwuuzaGSYcOpW4jFxzpzL1ejb8yF620UxAqnBrR9g==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/openbsd-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.6.tgz",
+      "integrity": "sha512-l8ZCvXP0tbTJ3iaqdNf3pjaOSd5ex/e6/omLIQCVBLmHTlfXW3zAxQ4fnDmPLOB1x9xrcSi/xtCWFwCZRIaEwg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/openbsd-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.6.tgz",
+      "integrity": "sha512-hKrmDa0aOFOr71KQ/19JC7az1P0GWtCN1t2ahYAf4O007DHZt/dW8ym5+CUdJhQ/qkZmI1HAF8KkJbEFtCL7gw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/openharmony-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.6.tgz",
+      "integrity": "sha512-+SqBcAWoB1fYKmpWoQP4pGtx+pUUC//RNYhFdbcSA16617cchuryuhOCRpPsjCblKukAckWsV+aQ3UKT/RMPcA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openharmony"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/sunos-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.6.tgz",
+      "integrity": "sha512-dyCGxv1/Br7MiSC42qinGL8KkG4kX0pEsdb0+TKhmJZgCUDBGmyo1/ArCjNGiOLiIAgdbWgmWgib4HoCi5t7kA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "sunos"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-arm64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.6.tgz",
+      "integrity": "sha512-42QOgcZeZOvXfsCBJF5Afw73t4veOId//XD3i+/9gSkhSV6Gk3VPlWncctI+JcOyERv85FUo7RxuxGy+z8A43Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-ia32": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.6.tgz",
+      "integrity": "sha512-4AWhgXmDuYN7rJI6ORB+uU9DHLq/erBbuMoAuB4VWJTu5KtCgcKYPynF0YI1VkBNuEfjNlLrFr9KZPJzrtLkrQ==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@esbuild/win32-x64": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.6.tgz",
+      "integrity": "sha512-NgJPHHbEpLQgDH2MjQu90pzW/5vvXIZ7KOnPyNBm92A6WgZ/7b6fJyUBjoumLqeOQQGqY2QjQxRo97ah4Sj0cA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
+      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "eslint-visitor-keys": "^3.4.3"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
+      }
+    },
+    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
+      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint-community/regexpp": {
+      "version": "4.12.1",
+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
+      }
+    },
+    "node_modules/@eslint/config-array": {
+      "version": "0.21.0",
+      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
+      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@eslint/object-schema": "^2.1.6",
+        "debug": "^4.3.1",
+        "minimatch": "^3.1.2"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/config-helpers": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.0.tgz",
+      "integrity": "sha512-ViuymvFmcJi04qdZeDc2whTHryouGcDlaxPqarTD0ZE10ISpxGUVZGZDx4w01upyIynL3iu6IXH2bS1NhclQMw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/core": {
+      "version": "0.15.1",
+      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.1.tgz",
+      "integrity": "sha512-bkOp+iumZCCbt1K1CmWf0R9pM5yKpDv+ZXtvSyQpudrI9kuFLp+bM2WOPXImuD/ceQuaa8f5pj93Y7zyECIGNA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@types/json-schema": "^7.0.15"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/eslintrc": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
+      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ajv": "^6.12.4",
+        "debug": "^4.3.2",
+        "espree": "^10.0.1",
+        "globals": "^14.0.0",
+        "ignore": "^5.2.0",
+        "import-fresh": "^3.2.1",
+        "js-yaml": "^4.1.0",
+        "minimatch": "^3.1.2",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@eslint/eslintrc/node_modules/globals": {
+      "version": "14.0.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
+      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@eslint/js": {
+      "version": "9.31.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.31.0.tgz",
+      "integrity": "sha512-LOm5OVt7D4qiKCqoiPbA7LWmI+tbw1VbTUowBcUMgQSuM6poJufkFkYDcQpo5KfgD39TnNySV26QjOh7VFpSyw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://eslint.org/donate"
+      }
+    },
+    "node_modules/@eslint/object-schema": {
+      "version": "2.1.6",
+      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
+      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@eslint/plugin-kit": {
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.3.tgz",
+      "integrity": "sha512-1+WqvgNMhmlAambTvT3KPtCl/Ibr68VldY2XY40SL1CE0ZXiakFR/cbTspaF5HsnpDMvcYYoJHfl4980NBjGag==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@eslint/core": "^0.15.1",
+        "levn": "^0.4.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      }
+    },
+    "node_modules/@hookform/resolvers": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/@hookform/resolvers/-/resolvers-5.1.1.tgz",
+      "integrity": "sha512-J/NVING3LMAEvexJkyTLjruSm7aOFx7QX21pzkiJfMoNG0wl5aFEjLTl7ay7IQb9EWY6AkrBy7tHL2Alijpdcg==",
+      "license": "MIT",
+      "dependencies": {
+        "@standard-schema/utils": "^0.3.0"
+      },
+      "peerDependencies": {
+        "react-hook-form": "^7.55.0"
+      }
+    },
+    "node_modules/@humanfs/core": {
+      "version": "0.19.1",
+      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
+      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18.0"
+      }
+    },
+    "node_modules/@humanfs/node": {
+      "version": "0.16.6",
+      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
+      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@humanfs/core": "^0.19.1",
+        "@humanwhocodes/retry": "^0.3.0"
+      },
+      "engines": {
+        "node": ">=18.18.0"
+      }
+    },
+    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
+      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/module-importer": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=12.22"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@humanwhocodes/retry": {
+      "version": "0.4.3",
+      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
+      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=18.18"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/nzakas"
+      }
+    },
+    "node_modules/@isaacs/fs-minipass": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
+      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
+      "license": "ISC",
+      "dependencies": {
+        "minipass": "^7.0.4"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.12",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
+      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.4",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
+      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.29",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
+      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@nodelib/fs.scandir": {
+      "version": "2.1.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
+      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "2.0.5",
+        "run-parallel": "^1.1.9"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.stat": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
+      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@nodelib/fs.walk": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
+      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.scandir": "2.1.5",
+        "fastq": "^1.6.0"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/@rolldown/pluginutils": {
+      "version": "1.0.0-beta.19",
+      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.19.tgz",
+      "integrity": "sha512-3FL3mnMbPu0muGOCaKAhhFEYmqv9eTfPSJRJmANrCwtgK8VuxpsZDGK+m0LYAGoyO8+0j5uRe4PeyPDK1yA/hA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@rollup/rollup-android-arm-eabi": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.1.tgz",
+      "integrity": "sha512-NEySIFvMY0ZQO+utJkgoMiCAjMrGvnbDLHvcmlA33UXJpYBCvlBEbMMtV837uCkS+plG2umfhn0T5mMAxGrlRA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-android-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.1.tgz",
+      "integrity": "sha512-ujQ+sMXJkg4LRJaYreaVx7Z/VMgBBd89wGS4qMrdtfUFZ+TSY5Rs9asgjitLwzeIbhwdEhyj29zhst3L1lKsRQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.1.tgz",
+      "integrity": "sha512-FSncqHvqTm3lC6Y13xncsdOYfxGSLnP+73k815EfNmpewPs+EyM49haPS105Rh4aF5mJKywk9X0ogzLXZzN9lA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-x64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.1.tgz",
+      "integrity": "sha512-2/vVn/husP5XI7Fsf/RlhDaQJ7x9zjvC81anIVbr4b/f0xtSmXQTFcGIQ/B1cXIYM6h2nAhJkdMHTnD7OtQ9Og==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-arm64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.1.tgz",
+      "integrity": "sha512-4g1kaDxQItZsrkVTdYQ0bxu4ZIQ32cotoQbmsAnW1jAE4XCMbcBPDirX5fyUzdhVCKgPcrwWuucI8yrVRBw2+g==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-x64": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.1.tgz",
+      "integrity": "sha512-L/6JsfiL74i3uK1Ti2ZFSNsp5NMiM4/kbbGEcOCps99aZx3g8SJMO1/9Y0n/qKlWZfn6sScf98lEOUe2mBvW9A==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.1.tgz",
+      "integrity": "sha512-RkdOTu2jK7brlu+ZwjMIZfdV2sSYHK2qR08FUWcIoqJC2eywHbXr0L8T/pONFwkGukQqERDheaGTeedG+rra6Q==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.1.tgz",
+      "integrity": "sha512-3kJ8pgfBt6CIIr1o+HQA7OZ9mp/zDk3ctekGl9qn/pRBgrRgfwiffaUmqioUGN9hv0OHv2gxmvdKOkARCtRb8Q==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.1.tgz",
+      "integrity": "sha512-k3dOKCfIVixWjG7OXTCOmDfJj3vbdhN0QYEqB+OuGArOChek22hn7Uy5A/gTDNAcCy5v2YcXRJ/Qcnm4/ma1xw==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.1.tgz",
+      "integrity": "sha512-PmI1vxQetnM58ZmDFl9/Uk2lpBBby6B6rF4muJc65uZbxCs0EA7hhKCk2PKlmZKuyVSHAyIw3+/SiuMLxKxWog==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.1.tgz",
+      "integrity": "sha512-9UmI0VzGmNJ28ibHW2GpE2nF0PBQqsyiS4kcJ5vK+wuwGnV5RlqdczVocDSUfGX/Na7/XINRVoUgJyFIgipoRg==",
+      "cpu": [
+        "loong64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.1.tgz",
+      "integrity": "sha512-7nR2KY8oEOUTD3pBAxIBBbZr0U7U+R9HDTPNy+5nVVHDXI4ikYniH1oxQz9VoB5PbBU1CZuDGHkLJkd3zLMWsg==",
+      "cpu": [
+        "ppc64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.1.tgz",
+      "integrity": "sha512-nlcl3jgUultKROfZijKjRQLUu9Ma0PeNv/VFHkZiKbXTBQXhpytS8CIj5/NfBeECZtY2FJQubm6ltIxm/ftxpw==",
+      "cpu": [
+        "riscv64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.1.tgz",
+      "integrity": "sha512-HJV65KLS51rW0VY6rvZkiieiBnurSzpzore1bMKAhunQiECPuxsROvyeaot/tcK3A3aGnI+qTHqisrpSgQrpgA==",
+      "cpu": [
+        "riscv64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-s390x-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.1.tgz",
+      "integrity": "sha512-NITBOCv3Qqc6hhwFt7jLV78VEO/il4YcBzoMGGNxznLgRQf43VQDae0aAzKiBeEPIxnDrACiMgbqjuihx08OOw==",
+      "cpu": [
+        "s390x"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-gnu": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.1.tgz",
+      "integrity": "sha512-+E/lYl6qu1zqgPEnTrs4WysQtvc/Sh4fC2nByfFExqgYrqkKWp1tWIbe+ELhixnenSpBbLXNi6vbEEJ8M7fiHw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-musl": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.1.tgz",
+      "integrity": "sha512-a6WIAp89p3kpNoYStITT9RbTbTnqarU7D8N8F2CV+4Cl9fwCOZraLVuVFvlpsW0SbIiYtEnhCZBPLoNdRkjQFw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-arm64-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.1.tgz",
+      "integrity": "sha512-T5Bi/NS3fQiJeYdGvRpTAP5P02kqSOpqiopwhj0uaXB6nzs5JVi2XMJb18JUSKhCOX8+UE1UKQufyD6Or48dJg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-ia32-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.1.tgz",
+      "integrity": "sha512-lxV2Pako3ujjuUe9jiU3/s7KSrDfH6IgTSQOnDWr9aJ92YsFd7EurmClK0ly/t8dzMkDtd04g60WX6yl0sGfdw==",
+      "cpu": [
+        "ia32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-x64-msvc": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.1.tgz",
+      "integrity": "sha512-M/fKi4sasCdM8i0aWJjCSFm2qEnYRR8AMLG2kxp6wD13+tMGA4Z1tVAuHkNRjud5SW2EM3naLuK35w9twvf6aA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@standard-schema/utils": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/@standard-schema/utils/-/utils-0.3.0.tgz",
+      "integrity": "sha512-e7Mew686owMaPJVNNLs55PUvgz371nKgwsc4vxE49zsODpJEnxgxRo2y/OKrqueavXgZNMDVj3DdHFlaSAeU8g==",
+      "license": "MIT"
+    },
+    "node_modules/@tailwindcss/node": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/node/-/node-4.1.11.tgz",
+      "integrity": "sha512-yzhzuGRmv5QyU9qLNg4GTlYI6STedBWRE7NjxP45CsFYYq9taI0zJXZBMqIC/c8fViNLhmrbpSFS57EoxUmD6Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.3.0",
+        "enhanced-resolve": "^5.18.1",
+        "jiti": "^2.4.2",
+        "lightningcss": "1.30.1",
+        "magic-string": "^0.30.17",
+        "source-map-js": "^1.2.1",
+        "tailwindcss": "4.1.11"
+      }
+    },
+    "node_modules/@tailwindcss/oxide": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide/-/oxide-4.1.11.tgz",
+      "integrity": "sha512-Q69XzrtAhuyfHo+5/HMgr1lAiPP/G40OMFAnws7xcFEYqcypZmdW8eGXaOUIeOl1dzPJBPENXgbjsOyhg2nkrg==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "detect-libc": "^2.0.4",
+        "tar": "^7.4.3"
+      },
+      "engines": {
+        "node": ">= 10"
+      },
+      "optionalDependencies": {
+        "@tailwindcss/oxide-android-arm64": "4.1.11",
+        "@tailwindcss/oxide-darwin-arm64": "4.1.11",
+        "@tailwindcss/oxide-darwin-x64": "4.1.11",
+        "@tailwindcss/oxide-freebsd-x64": "4.1.11",
+        "@tailwindcss/oxide-linux-arm-gnueabihf": "4.1.11",
+        "@tailwindcss/oxide-linux-arm64-gnu": "4.1.11",
+        "@tailwindcss/oxide-linux-arm64-musl": "4.1.11",
+        "@tailwindcss/oxide-linux-x64-gnu": "4.1.11",
+        "@tailwindcss/oxide-linux-x64-musl": "4.1.11",
+        "@tailwindcss/oxide-wasm32-wasi": "4.1.11",
+        "@tailwindcss/oxide-win32-arm64-msvc": "4.1.11",
+        "@tailwindcss/oxide-win32-x64-msvc": "4.1.11"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-android-arm64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-android-arm64/-/oxide-android-arm64-4.1.11.tgz",
+      "integrity": "sha512-3IfFuATVRUMZZprEIx9OGDjG3Ou3jG4xQzNTvjDoKmU9JdmoCohQJ83MYd0GPnQIu89YoJqvMM0G3uqLRFtetg==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-darwin-arm64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-arm64/-/oxide-darwin-arm64-4.1.11.tgz",
+      "integrity": "sha512-ESgStEOEsyg8J5YcMb1xl8WFOXfeBmrhAwGsFxxB2CxY9evy63+AtpbDLAyRkJnxLy2WsD1qF13E97uQyP1lfQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-darwin-x64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-darwin-x64/-/oxide-darwin-x64-4.1.11.tgz",
+      "integrity": "sha512-EgnK8kRchgmgzG6jE10UQNaH9Mwi2n+yw1jWmof9Vyg2lpKNX2ioe7CJdf9M5f8V9uaQxInenZkOxnTVL3fhAw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-freebsd-x64": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-freebsd-x64/-/oxide-freebsd-x64-4.1.11.tgz",
+      "integrity": "sha512-xdqKtbpHs7pQhIKmqVpxStnY1skuNh4CtbcyOHeX1YBE0hArj2romsFGb6yUmzkq/6M24nkxDqU8GYrKrz+UcA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm-gnueabihf": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm-gnueabihf/-/oxide-linux-arm-gnueabihf-4.1.11.tgz",
+      "integrity": "sha512-ryHQK2eyDYYMwB5wZL46uoxz2zzDZsFBwfjssgB7pzytAeCCa6glsiJGjhTEddq/4OsIjsLNMAiMlHNYnkEEeg==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm64-gnu": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-gnu/-/oxide-linux-arm64-gnu-4.1.11.tgz",
+      "integrity": "sha512-mYwqheq4BXF83j/w75ewkPJmPZIqqP1nhoghS9D57CLjsh3Nfq0m4ftTotRYtGnZd3eCztgbSPJ9QhfC91gDZQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-arm64-musl": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-arm64-musl/-/oxide-linux-arm64-musl-4.1.11.tgz",
+      "integrity": "sha512-m/NVRFNGlEHJrNVk3O6I9ggVuNjXHIPoD6bqay/pubtYC9QIdAMpS+cswZQPBLvVvEF6GtSNONbDkZrjWZXYNQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-x64-gnu": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-gnu/-/oxide-linux-x64-gnu-4.1.11.tgz",
+      "integrity": "sha512-YW6sblI7xukSD2TdbbaeQVDysIm/UPJtObHJHKxDEcW2exAtY47j52f8jZXkqE1krdnkhCMGqP3dbniu1Te2Fg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-linux-x64-musl": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-linux-x64-musl/-/oxide-linux-x64-musl-4.1.11.tgz",
+      "integrity": "sha512-e3C/RRhGunWYNC3aSF7exsQkdXzQ/M+aYuZHKnw4U7KQwTJotnWsGOIVih0s2qQzmEzOFIJ3+xt7iq67K/p56Q==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-wasm32-wasi": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-wasm32-wasi/-/oxide-wasm32-wasi-4.1.11.tgz",
+      "integrity": "sha512-Xo1+/GU0JEN/C/dvcammKHzeM6NqKovG+6921MR6oadee5XPBaKOumrJCXvopJ/Qb5TH7LX/UAywbqrP4lax0g==",
+      "bundleDependencies": [
+        "@napi-rs/wasm-runtime",
+        "@emnapi/core",
+        "@emnapi/runtime",
+        "@tybys/wasm-util",
+        "@emnapi/wasi-threads",
+        "tslib"
+      ],
+      "cpu": [
+        "wasm32"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@emnapi/core": "^1.4.3",
+        "@emnapi/runtime": "^1.4.3",
+        "@emnapi/wasi-threads": "^1.0.2",
+        "@napi-rs/wasm-runtime": "^0.2.11",
+        "@tybys/wasm-util": "^0.9.0",
+        "tslib": "^2.8.0"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-win32-arm64-msvc": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-arm64-msvc/-/oxide-win32-arm64-msvc-4.1.11.tgz",
+      "integrity": "sha512-UgKYx5PwEKrac3GPNPf6HVMNhUIGuUh4wlDFR2jYYdkX6pL/rn73zTq/4pzUm8fOjAn5L8zDeHp9iXmUGOXZ+w==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/oxide-win32-x64-msvc": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/oxide-win32-x64-msvc/-/oxide-win32-x64-msvc-4.1.11.tgz",
+      "integrity": "sha512-YfHoggn1j0LK7wR82TOucWc5LDCguHnoS879idHekmmiR7g9HUtMw9MI0NHatS28u/Xlkfi9w5RJWgz2Dl+5Qg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 10"
+      }
+    },
+    "node_modules/@tailwindcss/vite": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/@tailwindcss/vite/-/vite-4.1.11.tgz",
+      "integrity": "sha512-RHYhrR3hku0MJFRV+fN2gNbDNEh3dwKvY8XJvTxCSXeMOsCRSr+uKvDWQcbizrHgjML6ZmTE5OwMrl5wKcujCw==",
+      "license": "MIT",
+      "dependencies": {
+        "@tailwindcss/node": "4.1.11",
+        "@tailwindcss/oxide": "4.1.11",
+        "tailwindcss": "4.1.11"
+      },
+      "peerDependencies": {
+        "vite": "^5.2.0 || ^6 || ^7"
+      }
+    },
+    "node_modules/@tanstack/query-core": {
+      "version": "5.83.0",
+      "resolved": "https://registry.npmjs.org/@tanstack/query-core/-/query-core-5.83.0.tgz",
+      "integrity": "sha512-0M8dA+amXUkyz5cVUm/B+zSk3xkQAcuXuz5/Q/LveT4ots2rBpPTZOzd7yJa2Utsf8D2Upl5KyjhHRY+9lB/XA==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      }
+    },
+    "node_modules/@tanstack/react-query": {
+      "version": "5.83.0",
+      "resolved": "https://registry.npmjs.org/@tanstack/react-query/-/react-query-5.83.0.tgz",
+      "integrity": "sha512-/XGYhZ3foc5H0VM2jLSD/NyBRIOK4q9kfeml4+0x2DlL6xVuAcVEW+hTlTapAmejObg0i3eNqhkr2dT+eciwoQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@tanstack/query-core": "5.83.0"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/tannerlinsley"
+      },
+      "peerDependencies": {
+        "react": "^18 || ^19"
+      }
+    },
+    "node_modules/@types/babel__core": {
+      "version": "7.20.5",
+      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
+      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.20.7",
+        "@babel/types": "^7.20.7",
+        "@types/babel__generator": "*",
+        "@types/babel__template": "*",
+        "@types/babel__traverse": "*"
+      }
+    },
+    "node_modules/@types/babel__generator": {
+      "version": "7.27.0",
+      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
+      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__template": {
+      "version": "7.4.4",
+      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
+      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.1.0",
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__traverse": {
+      "version": "7.20.7",
+      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
+      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.20.7"
+      }
+    },
+    "node_modules/@types/estree": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
+      "license": "MIT"
+    },
+    "node_modules/@types/json-schema": {
+      "version": "7.0.15",
+      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
+      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/node": {
+      "version": "24.1.0",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.1.0.tgz",
+      "integrity": "sha512-ut5FthK5moxFKH2T1CUOC6ctR67rQRvvHdFLCD2Ql6KXmMuCrjsSsRI9UsLCm9M18BMwClv4pn327UvB7eeO1w==",
+      "devOptional": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~7.8.0"
+      }
+    },
+    "node_modules/@types/react": {
+      "version": "19.1.8",
+      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.8.tgz",
+      "integrity": "sha512-AwAfQ2Wa5bCx9WP8nZL2uMZWod7J7/JSplxbTmBQ5ms6QpqNYm672H0Vu9ZVKVngQ+ii4R/byguVEUZQyeg44g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "csstype": "^3.0.2"
+      }
+    },
+    "node_modules/@types/react-dom": {
+      "version": "19.1.6",
+      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.6.tgz",
+      "integrity": "sha512-4hOiT/dwO8Ko0gV1m/TJZYk3y0KBnY9vzDh7W+DH17b2HFSOGgdj33dhihPeuy3l0q23+4e+hoXHV6hCC4dCXw==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/react": "^19.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/eslint-plugin": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.37.0.tgz",
+      "integrity": "sha512-jsuVWeIkb6ggzB+wPCsR4e6loj+rM72ohW6IBn2C+5NCvfUVY8s33iFPySSVXqtm5Hu29Ne/9bnA0JmyLmgenA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/regexpp": "^4.10.0",
+        "@typescript-eslint/scope-manager": "8.37.0",
+        "@typescript-eslint/type-utils": "8.37.0",
+        "@typescript-eslint/utils": "8.37.0",
+        "@typescript-eslint/visitor-keys": "8.37.0",
+        "graphemer": "^1.4.0",
+        "ignore": "^7.0.0",
+        "natural-compare": "^1.4.0",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "@typescript-eslint/parser": "^8.37.0",
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
+      "version": "7.0.5",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
+      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/@typescript-eslint/parser": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.37.0.tgz",
+      "integrity": "sha512-kVIaQE9vrN9RLCQMQ3iyRlVJpTiDUY6woHGb30JDkfJErqrQEmtdWH3gV0PBAfGZgQXoqzXOO0T3K6ioApbbAA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/scope-manager": "8.37.0",
+        "@typescript-eslint/types": "8.37.0",
+        "@typescript-eslint/typescript-estree": "8.37.0",
+        "@typescript-eslint/visitor-keys": "8.37.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/project-service": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.37.0.tgz",
+      "integrity": "sha512-BIUXYsbkl5A1aJDdYJCBAo8rCEbAvdquQ8AnLb6z5Lp1u3x5PNgSSx9A/zqYc++Xnr/0DVpls8iQ2cJs/izTXA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/tsconfig-utils": "^8.37.0",
+        "@typescript-eslint/types": "^8.37.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.37.0.tgz",
+      "integrity": "sha512-0vGq0yiU1gbjKob2q691ybTg9JX6ShiVXAAfm2jGf3q0hdP6/BruaFjL/ManAR/lj05AvYCH+5bbVo0VtzmjOA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.37.0",
+        "@typescript-eslint/visitor-keys": "8.37.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/tsconfig-utils": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.37.0.tgz",
+      "integrity": "sha512-1/YHvAVTimMM9mmlPvTec9NP4bobA1RkDbMydxG8omqwJJLEW/Iy2C4adsAESIXU3WGLXFHSZUU+C9EoFWl4Zg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.37.0.tgz",
+      "integrity": "sha512-SPkXWIkVZxhgwSwVq9rqj/4VFo7MnWwVaRNznfQDc/xPYHjXnPfLWn+4L6FF1cAz6e7dsqBeMawgl7QjUMj4Ow==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.37.0",
+        "@typescript-eslint/typescript-estree": "8.37.0",
+        "@typescript-eslint/utils": "8.37.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.37.0.tgz",
+      "integrity": "sha512-ax0nv7PUF9NOVPs+lmQ7yIE7IQmAf8LGcXbMvHX5Gm+YJUYNAl340XkGnrimxZ0elXyoQJuN5sbg6C4evKA4SQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.37.0.tgz",
+      "integrity": "sha512-zuWDMDuzMRbQOM+bHyU4/slw27bAUEcKSKKs3hcv2aNnc/tvE/h7w60dwVw8vnal2Pub6RT1T7BI8tFZ1fE+yg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/project-service": "8.37.0",
+        "@typescript-eslint/tsconfig-utils": "8.37.0",
+        "@typescript-eslint/types": "8.37.0",
+        "@typescript-eslint/visitor-keys": "8.37.0",
+        "debug": "^4.3.4",
+        "fast-glob": "^3.3.2",
+        "is-glob": "^4.0.3",
+        "minimatch": "^9.0.4",
+        "semver": "^7.6.0",
+        "ts-api-utils": "^2.1.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@typescript-eslint/utils": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.37.0.tgz",
+      "integrity": "sha512-TSFvkIW6gGjN2p6zbXo20FzCABbyUAuq6tBvNRGsKdsSQ6a7rnV6ADfZ7f4iI3lIiXc4F4WWvtUfDw9CJ9pO5A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.7.0",
+        "@typescript-eslint/scope-manager": "8.37.0",
+        "@typescript-eslint/types": "8.37.0",
+        "@typescript-eslint/typescript-estree": "8.37.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/@typescript-eslint/visitor-keys": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.37.0.tgz",
+      "integrity": "sha512-YzfhzcTnZVPiLfP/oeKtDp2evwvHLMe0LOy7oe+hb9KKIumLNohYS9Hgp1ifwpu42YWxhZE8yieggz6JpqO/1w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/types": "8.37.0",
+        "eslint-visitor-keys": "^4.2.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@vitejs/plugin-react": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.6.0.tgz",
+      "integrity": "sha512-5Kgff+m8e2PB+9j51eGHEpn5kUzRKH2Ry0qGoe8ItJg7pqnkPrYPkDQZGgGmTa0EGarHrkjLvOdU3b1fzI8otQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.27.4",
+        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
+        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
+        "@rolldown/pluginutils": "1.0.0-beta.19",
+        "@types/babel__core": "^7.20.5",
+        "react-refresh": "^0.17.0"
+      },
+      "engines": {
+        "node": "^14.18.0 || >=16.0.0"
+      },
+      "peerDependencies": {
+        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0-beta.0"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.15.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
+      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-jsx": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
+      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "6.12.6",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
+      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.1",
+        "fast-json-stable-stringify": "^2.0.0",
+        "json-schema-traverse": "^0.4.1",
+        "uri-js": "^4.2.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/argparse": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
+      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
+      "dev": true,
+      "license": "Python-2.0"
+    },
+    "node_modules/asynckit": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
+      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
+      "license": "MIT"
+    },
+    "node_modules/axios": {
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
+      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
+      "license": "MIT",
+      "dependencies": {
+        "follow-redirects": "^1.15.6",
+        "form-data": "^4.0.4",
+        "proxy-from-env": "^1.1.0"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.25.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
+      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001726",
+        "electron-to-chromium": "^1.5.173",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.3"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001727",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
+      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/chownr": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
+      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
+      "license": "BlueOak-1.0.0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/combined-stream": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
+      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
+      "license": "MIT",
+      "dependencies": {
+        "delayed-stream": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cookie": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-1.0.2.tgz",
+      "integrity": "sha512-9Kr/j4O16ISv8zBBhJoi4bXOYNTkFLOqSL3UDB0njXxCXNezjeyVrJyGOWtgfs/q2km1gwBcfH8q1yEGoMYunA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/csstype": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
+      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deep-is": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
+      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/delayed-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
+      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/detect-libc": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.187",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.187.tgz",
+      "integrity": "sha512-cl5Jc9I0KGUoOoSbxvTywTa40uspGJt/BDBoDLoxJRSBpWh4FFXBsjNRHfQrONsV/OoEjDfHUmZQa2d6Ze4YgA==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/enhanced-resolve": {
+      "version": "5.18.2",
+      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.2.tgz",
+      "integrity": "sha512-6Jw4sE1maoRJo3q8MsSIn2onJFbLTOjY9hlx4DZXmOKvLRd1Ok2kXmAGXaafL2+ijsJZ1ClYbl/pmqr9+k4iUQ==",
+      "license": "MIT",
+      "dependencies": {
+        "graceful-fs": "^4.2.4",
+        "tapable": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-set-tostringtag": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
+      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.6",
+        "has-tostringtag": "^1.0.2",
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/esbuild": {
+      "version": "0.25.6",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.6.tgz",
+      "integrity": "sha512-GVuzuUwtdsghE3ocJ9Bs8PNoF13HNQ5TXbEi2AhvVb8xU1Iwt9Fos9FEamfoee+u/TOsn7GUWc04lz46n2bbTg==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "bin": {
+        "esbuild": "bin/esbuild"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "optionalDependencies": {
+        "@esbuild/aix-ppc64": "0.25.6",
+        "@esbuild/android-arm": "0.25.6",
+        "@esbuild/android-arm64": "0.25.6",
+        "@esbuild/android-x64": "0.25.6",
+        "@esbuild/darwin-arm64": "0.25.6",
+        "@esbuild/darwin-x64": "0.25.6",
+        "@esbuild/freebsd-arm64": "0.25.6",
+        "@esbuild/freebsd-x64": "0.25.6",
+        "@esbuild/linux-arm": "0.25.6",
+        "@esbuild/linux-arm64": "0.25.6",
+        "@esbuild/linux-ia32": "0.25.6",
+        "@esbuild/linux-loong64": "0.25.6",
+        "@esbuild/linux-mips64el": "0.25.6",
+        "@esbuild/linux-ppc64": "0.25.6",
+        "@esbuild/linux-riscv64": "0.25.6",
+        "@esbuild/linux-s390x": "0.25.6",
+        "@esbuild/linux-x64": "0.25.6",
+        "@esbuild/netbsd-arm64": "0.25.6",
+        "@esbuild/netbsd-x64": "0.25.6",
+        "@esbuild/openbsd-arm64": "0.25.6",
+        "@esbuild/openbsd-x64": "0.25.6",
+        "@esbuild/openharmony-arm64": "0.25.6",
+        "@esbuild/sunos-x64": "0.25.6",
+        "@esbuild/win32-arm64": "0.25.6",
+        "@esbuild/win32-ia32": "0.25.6",
+        "@esbuild/win32-x64": "0.25.6"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
+      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eslint": {
+      "version": "9.31.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.31.0.tgz",
+      "integrity": "sha512-QldCVh/ztyKJJZLr4jXNUByx3gR+TDYZCRXEktiZoUR3PGy4qCmSbkxcIle8GEwGpb5JBZazlaJ/CxLidXdEbQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.2.0",
+        "@eslint-community/regexpp": "^4.12.1",
+        "@eslint/config-array": "^0.21.0",
+        "@eslint/config-helpers": "^0.3.0",
+        "@eslint/core": "^0.15.0",
+        "@eslint/eslintrc": "^3.3.1",
+        "@eslint/js": "9.31.0",
+        "@eslint/plugin-kit": "^0.3.1",
+        "@humanfs/node": "^0.16.6",
+        "@humanwhocodes/module-importer": "^1.0.1",
+        "@humanwhocodes/retry": "^0.4.2",
+        "@types/estree": "^1.0.6",
+        "@types/json-schema": "^7.0.15",
+        "ajv": "^6.12.4",
+        "chalk": "^4.0.0",
+        "cross-spawn": "^7.0.6",
+        "debug": "^4.3.2",
+        "escape-string-regexp": "^4.0.0",
+        "eslint-scope": "^8.4.0",
+        "eslint-visitor-keys": "^4.2.1",
+        "espree": "^10.4.0",
+        "esquery": "^1.5.0",
+        "esutils": "^2.0.2",
+        "fast-deep-equal": "^3.1.3",
+        "file-entry-cache": "^8.0.0",
+        "find-up": "^5.0.0",
+        "glob-parent": "^6.0.2",
+        "ignore": "^5.2.0",
+        "imurmurhash": "^0.1.4",
+        "is-glob": "^4.0.0",
+        "json-stable-stringify-without-jsonify": "^1.0.1",
+        "lodash.merge": "^4.6.2",
+        "minimatch": "^3.1.2",
+        "natural-compare": "^1.4.0",
+        "optionator": "^0.9.3"
+      },
+      "bin": {
+        "eslint": "bin/eslint.js"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://eslint.org/donate"
+      },
+      "peerDependencies": {
+        "jiti": "*"
+      },
+      "peerDependenciesMeta": {
+        "jiti": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/eslint-plugin-react-hooks": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
+      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
+      }
+    },
+    "node_modules/eslint-plugin-react-refresh": {
+      "version": "0.4.20",
+      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.20.tgz",
+      "integrity": "sha512-XpbHQ2q5gUF8BGOX4dHe+71qoirYMhApEPZ7sfhF/dNnOF1UXnCMGZf79SFTBO7Bz5YEIT4TMieSlJBWhP9WBA==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "eslint": ">=8.40"
+      }
+    },
+    "node_modules/eslint-scope": {
+      "version": "8.4.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
+      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/eslint-visitor-keys": {
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
+      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/espree": {
+      "version": "10.4.0",
+      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
+      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "acorn": "^8.15.0",
+        "acorn-jsx": "^5.3.2",
+        "eslint-visitor-keys": "^4.2.1"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/esquery": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
+      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "estraverse": "^5.1.0"
+      },
+      "engines": {
+        "node": ">=0.10"
+      }
+    },
+    "node_modules/esrecurse": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
+      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-glob": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
+      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.8"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/fast-glob/node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fast-levenshtein": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
+      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/fastq": {
+      "version": "1.19.1",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
+      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "reusify": "^1.0.4"
+      }
+    },
+    "node_modules/file-entry-cache": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
+      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flat-cache": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=16.0.0"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
+      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^6.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/flat-cache": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
+      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "flatted": "^3.2.9",
+        "keyv": "^4.5.4"
+      },
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/flatted": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
+      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/follow-redirects": {
+      "version": "1.15.9",
+      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
+      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/RubenVerborgh"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=4.0"
+      },
+      "peerDependenciesMeta": {
+        "debug": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/form-data": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
+      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
+      "license": "MIT",
+      "dependencies": {
+        "asynckit": "^0.4.0",
+        "combined-stream": "^1.0.8",
+        "es-set-tostringtag": "^2.1.0",
+        "hasown": "^2.0.2",
+        "mime-types": "^2.1.12"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
+      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.3"
+      },
+      "engines": {
+        "node": ">=10.13.0"
+      }
+    },
+    "node_modules/globals": {
+      "version": "16.3.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-16.3.0.tgz",
+      "integrity": "sha512-bqWEnJ1Nt3neqx2q5SFfGS8r/ahumIakg3HcwtNlrVlwXIeNumWn/c7Pn/wKzGhf6SaW6H6uWXLqC30STCMchQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "license": "ISC"
+    },
+    "node_modules/graphemer": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
+      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-tostringtag": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
+      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
+      "license": "MIT",
+      "dependencies": {
+        "has-symbols": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ignore": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
+      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 4"
+      }
+    },
+    "node_modules/import-fresh": {
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
+      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "parent-module": "^1.0.0",
+        "resolve-from": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/jiti": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
+      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
+      "license": "MIT",
+      "bin": {
+        "jiti": "lib/jiti-cli.mjs"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
+      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^2.0.1"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/jsesc": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
+      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "jsesc": "bin/jsesc"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/json-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
+      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
+      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json-stable-stringify-without-jsonify": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
+      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "json5": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/jwt-decode": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/jwt-decode/-/jwt-decode-4.0.0.tgz",
+      "integrity": "sha512-+KJGIyHgkGuIq3IEBNftfhW/LfWhXUIY6OmyVWjliu5KH1y0fw7VQ8YndE2O4qZdMSd9SqbnC8GOcZEy0Om7sA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/keyv": {
+      "version": "4.5.4",
+      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
+      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "json-buffer": "3.0.1"
+      }
+    },
+    "node_modules/levn": {
+      "version": "0.4.1",
+      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
+      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1",
+        "type-check": "~0.4.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/lightningcss": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss/-/lightningcss-1.30.1.tgz",
+      "integrity": "sha512-xi6IyHML+c9+Q3W0S4fCQJOym42pyurFiJUHEcEyHS0CeKzia4yZDEsLlqOFykxOdHpNy0NmvVO31vcSqAxJCg==",
+      "license": "MPL-2.0",
+      "dependencies": {
+        "detect-libc": "^2.0.3"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      },
+      "optionalDependencies": {
+        "lightningcss-darwin-arm64": "1.30.1",
+        "lightningcss-darwin-x64": "1.30.1",
+        "lightningcss-freebsd-x64": "1.30.1",
+        "lightningcss-linux-arm-gnueabihf": "1.30.1",
+        "lightningcss-linux-arm64-gnu": "1.30.1",
+        "lightningcss-linux-arm64-musl": "1.30.1",
+        "lightningcss-linux-x64-gnu": "1.30.1",
+        "lightningcss-linux-x64-musl": "1.30.1",
+        "lightningcss-win32-arm64-msvc": "1.30.1",
+        "lightningcss-win32-x64-msvc": "1.30.1"
+      }
+    },
+    "node_modules/lightningcss-darwin-arm64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-darwin-arm64/-/lightningcss-darwin-arm64-1.30.1.tgz",
+      "integrity": "sha512-c8JK7hyE65X1MHMN+Viq9n11RRC7hgin3HhYKhrMyaXflk5GVplZ60IxyoVtzILeKr+xAJwg6zK6sjTBJ0FKYQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-darwin-x64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-darwin-x64/-/lightningcss-darwin-x64-1.30.1.tgz",
+      "integrity": "sha512-k1EvjakfumAQoTfcXUcHQZhSpLlkAuEkdMBsI/ivWw9hL+7FtilQc0Cy3hrx0AAQrVtQAbMI7YjCgYgvn37PzA==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-freebsd-x64": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-freebsd-x64/-/lightningcss-freebsd-x64-1.30.1.tgz",
+      "integrity": "sha512-kmW6UGCGg2PcyUE59K5r0kWfKPAVy4SltVeut+umLCFoJ53RdCUWxcRDzO1eTaxf/7Q2H7LTquFHPL5R+Gjyig==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm-gnueabihf": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm-gnueabihf/-/lightningcss-linux-arm-gnueabihf-1.30.1.tgz",
+      "integrity": "sha512-MjxUShl1v8pit+6D/zSPq9S9dQ2NPFSQwGvxBCYaBYLPlCWuPh9/t1MRS8iUaR8i+a6w7aps+B4N0S1TYP/R+Q==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm64-gnu": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-gnu/-/lightningcss-linux-arm64-gnu-1.30.1.tgz",
+      "integrity": "sha512-gB72maP8rmrKsnKYy8XUuXi/4OctJiuQjcuqWNlJQ6jZiWqtPvqFziskH3hnajfvKB27ynbVCucKSm2rkQp4Bw==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-arm64-musl": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-arm64-musl/-/lightningcss-linux-arm64-musl-1.30.1.tgz",
+      "integrity": "sha512-jmUQVx4331m6LIX+0wUhBbmMX7TCfjF5FoOH6SD1CttzuYlGNVpA7QnrmLxrsub43ClTINfGSYyHe2HWeLl5CQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-x64-gnu": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-gnu/-/lightningcss-linux-x64-gnu-1.30.1.tgz",
+      "integrity": "sha512-piWx3z4wN8J8z3+O5kO74+yr6ze/dKmPnI7vLqfSqI8bccaTGY5xiSGVIJBDd5K5BHlvVLpUB3S2YCfelyJ1bw==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-linux-x64-musl": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-linux-x64-musl/-/lightningcss-linux-x64-musl-1.30.1.tgz",
+      "integrity": "sha512-rRomAK7eIkL+tHY0YPxbc5Dra2gXlI63HL+v1Pdi1a3sC+tJTcFrHX+E86sulgAXeI7rSzDYhPSeHHjqFhqfeQ==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-win32-arm64-msvc": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-win32-arm64-msvc/-/lightningcss-win32-arm64-msvc-1.30.1.tgz",
+      "integrity": "sha512-mSL4rqPi4iXq5YVqzSsJgMVFENoa4nGTT/GjO2c0Yl9OuQfPsIfncvLrEW6RbbB24WtZ3xP/2CCmI3tNkNV4oA==",
+      "cpu": [
+        "arm64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/lightningcss-win32-x64-msvc": {
+      "version": "1.30.1",
+      "resolved": "https://registry.npmjs.org/lightningcss-win32-x64-msvc/-/lightningcss-win32-x64-msvc-1.30.1.tgz",
+      "integrity": "sha512-PVqXh48wh4T53F/1CCu8PIPCxLzWyCnn/9T5W1Jpmdy5h9Cwd+0YQS6/LwhHXSafuc61/xg9Lv5OrCby6a++jg==",
+      "cpu": [
+        "x64"
+      ],
+      "license": "MPL-2.0",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">= 12.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/parcel"
+      }
+    },
+    "node_modules/locate-path": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
+      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/lodash.merge": {
+      "version": "4.6.2",
+      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
+      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/lru-cache": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
+      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^3.0.2"
+      }
+    },
+    "node_modules/magic-string": {
+      "version": "0.30.17",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.17.tgz",
+      "integrity": "sha512-sNPKHvyjVf7gyjwS4xGTaW/mCnF8wnjtifKBEhxfZ7E/S8tQ0rssrwGNn6q8JH/ohItJfSQp9mBtQYuTlH5QnA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.0"
+      }
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/merge2": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
+      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/minizlib": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
+      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
+      "license": "MIT",
+      "dependencies": {
+        "minipass": "^7.1.2"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/mkdirp": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
+      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
+      "license": "MIT",
+      "bin": {
+        "mkdirp": "dist/cjs/src/bin.js"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/optionator": {
+      "version": "0.9.4",
+      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
+      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "deep-is": "^0.1.3",
+        "fast-levenshtein": "^2.0.6",
+        "levn": "^0.4.1",
+        "prelude-ls": "^1.2.1",
+        "type-check": "^0.4.0",
+        "word-wrap": "^1.2.5"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
+      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/parent-module": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
+      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "callsites": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/prelude-ls": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
+      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/prettier": {
+      "version": "3.6.2",
+      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
+      "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "prettier": "bin/prettier.cjs"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/prettier/prettier?sponsor=1"
+      }
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
+      "license": "MIT"
+    },
+    "node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/queue-microtask": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
+      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/react": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
+      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-dom": {
+      "version": "19.1.0",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
+      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
+      "license": "MIT",
+      "dependencies": {
+        "scheduler": "^0.26.0"
+      },
+      "peerDependencies": {
+        "react": "^19.1.0"
+      }
+    },
+    "node_modules/react-hook-form": {
+      "version": "7.60.0",
+      "resolved": "https://registry.npmjs.org/react-hook-form/-/react-hook-form-7.60.0.tgz",
+      "integrity": "sha512-SBrYOvMbDB7cV8ZfNpaiLcgjH/a1c7aK0lK+aNigpf4xWLO8q+o4tcvVurv3c4EOyzn/3dCsYt4GKD42VvJ/+A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/react-hook-form"
+      },
+      "peerDependencies": {
+        "react": "^16.8.0 || ^17 || ^18 || ^19"
+      }
+    },
+    "node_modules/react-refresh": {
+      "version": "0.17.0",
+      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
+      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/react-router": {
+      "version": "7.7.0",
+      "resolved": "https://registry.npmjs.org/react-router/-/react-router-7.7.0.tgz",
+      "integrity": "sha512-3FUYSwlvB/5wRJVTL/aavqHmfUKe0+Xm9MllkYgGo9eDwNdkvwlJGjpPxono1kCycLt6AnDTgjmXvK3/B4QGuw==",
+      "license": "MIT",
+      "dependencies": {
+        "cookie": "^1.0.1",
+        "set-cookie-parser": "^2.6.0"
+      },
+      "engines": {
+        "node": ">=20.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=18",
+        "react-dom": ">=18"
+      },
+      "peerDependenciesMeta": {
+        "react-dom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/react-router-dom": {
+      "version": "7.7.0",
+      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-7.7.0.tgz",
+      "integrity": "sha512-wwGS19VkNBkneVh9/YD0pK3IsjWxQUVMDD6drlG7eJpo1rXBtctBqDyBm/k+oKHRAm1x9XWT3JFC82QI9YOXXA==",
+      "license": "MIT",
+      "dependencies": {
+        "react-router": "7.7.0"
+      },
+      "engines": {
+        "node": ">=20.0.0"
+      },
+      "peerDependencies": {
+        "react": ">=18",
+        "react-dom": ">=18"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
+      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/reusify": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
+      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "iojs": ">=1.0.0",
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/rollup": {
+      "version": "4.45.1",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.1.tgz",
+      "integrity": "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "1.0.8"
+      },
+      "bin": {
+        "rollup": "dist/bin/rollup"
+      },
+      "engines": {
+        "node": ">=18.0.0",
+        "npm": ">=8.0.0"
+      },
+      "optionalDependencies": {
+        "@rollup/rollup-android-arm-eabi": "4.45.1",
+        "@rollup/rollup-android-arm64": "4.45.1",
+        "@rollup/rollup-darwin-arm64": "4.45.1",
+        "@rollup/rollup-darwin-x64": "4.45.1",
+        "@rollup/rollup-freebsd-arm64": "4.45.1",
+        "@rollup/rollup-freebsd-x64": "4.45.1",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.45.1",
+        "@rollup/rollup-linux-arm-musleabihf": "4.45.1",
+        "@rollup/rollup-linux-arm64-gnu": "4.45.1",
+        "@rollup/rollup-linux-arm64-musl": "4.45.1",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.45.1",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1",
+        "@rollup/rollup-linux-riscv64-gnu": "4.45.1",
+        "@rollup/rollup-linux-riscv64-musl": "4.45.1",
+        "@rollup/rollup-linux-s390x-gnu": "4.45.1",
+        "@rollup/rollup-linux-x64-gnu": "4.45.1",
+        "@rollup/rollup-linux-x64-musl": "4.45.1",
+        "@rollup/rollup-win32-arm64-msvc": "4.45.1",
+        "@rollup/rollup-win32-ia32-msvc": "4.45.1",
+        "@rollup/rollup-win32-x64-msvc": "4.45.1",
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/run-parallel": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
+      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "queue-microtask": "^1.2.2"
+      }
+    },
+    "node_modules/scheduler": {
+      "version": "0.26.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
+      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/set-cookie-parser": {
+      "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/set-cookie-parser/-/set-cookie-parser-2.7.1.tgz",
+      "integrity": "sha512-IOc8uWeOZgnb3ptbCURJWNjWUPcO3ZnTTdzsurqERrP6nPyv+paC55vJM0LpOlT2ne+Ix+9+CRG1MNLlyZ4GjQ==",
+      "license": "MIT"
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/tailwindcss": {
+      "version": "4.1.11",
+      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-4.1.11.tgz",
+      "integrity": "sha512-2E9TBm6MDD/xKYe+dvJZAmg3yxIEDNRc0jwlNyDg/4Fil2QcSLjFKGVff0lAf1jjeaArlG/M75Ey/EYr/OJtBA==",
+      "license": "MIT"
+    },
+    "node_modules/tapable": {
+      "version": "2.2.2",
+      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
+      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/tar": {
+      "version": "7.4.3",
+      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
+      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
+      "license": "ISC",
+      "dependencies": {
+        "@isaacs/fs-minipass": "^4.0.0",
+        "chownr": "^3.0.0",
+        "minipass": "^7.1.2",
+        "minizlib": "^3.0.1",
+        "mkdirp": "^3.0.1",
+        "yallist": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/tar/node_modules/yallist": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
+      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
+      "license": "BlueOak-1.0.0",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/tinyglobby": {
+      "version": "0.2.14",
+      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
+      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
+      "license": "MIT",
+      "dependencies": {
+        "fdir": "^6.4.4",
+        "picomatch": "^4.0.2"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/SuperchupuDev"
+      }
+    },
+    "node_modules/tinyglobby/node_modules/fdir": {
+      "version": "6.4.6",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
+      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/tinyglobby/node_modules/picomatch": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
+      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/ts-api-utils": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
+      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.12"
+      },
+      "peerDependencies": {
+        "typescript": ">=4.8.4"
+      }
+    },
+    "node_modules/type-check": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
+      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "prelude-ls": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.8.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
+      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/typescript-eslint": {
+      "version": "8.37.0",
+      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.37.0.tgz",
+      "integrity": "sha512-TnbEjzkE9EmcO0Q2zM+GE8NQLItNAJpMmED1BdgoBMYNdqMhzlbqfdSwiRlAzEK2pA9UzVW0gzaaIzXWg2BjfA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@typescript-eslint/eslint-plugin": "8.37.0",
+        "@typescript-eslint/parser": "8.37.0",
+        "@typescript-eslint/typescript-estree": "8.37.0",
+        "@typescript-eslint/utils": "8.37.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^8.57.0 || ^9.0.0",
+        "typescript": ">=4.8.4 <5.9.0"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "7.8.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
+      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
+      "devOptional": true,
+      "license": "MIT"
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
+      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "punycode": "^2.1.0"
+      }
+    },
+    "node_modules/vite": {
+      "version": "7.0.5",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-7.0.5.tgz",
+      "integrity": "sha512-1mncVwJxy2C9ThLwz0+2GKZyEXuC3MyWtAAlNftlZZXZDP3AJt5FmwcMit/IGGaNZ8ZOB2BNO/HFUB+CpN0NQw==",
+      "license": "MIT",
+      "dependencies": {
+        "esbuild": "^0.25.0",
+        "fdir": "^6.4.6",
+        "picomatch": "^4.0.2",
+        "postcss": "^8.5.6",
+        "rollup": "^4.40.0",
+        "tinyglobby": "^0.2.14"
+      },
+      "bin": {
+        "vite": "bin/vite.js"
+      },
+      "engines": {
+        "node": "^20.19.0 || >=22.12.0"
+      },
+      "funding": {
+        "url": "https://github.com/vitejs/vite?sponsor=1"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.3"
+      },
+      "peerDependencies": {
+        "@types/node": "^20.19.0 || >=22.12.0",
+        "jiti": ">=1.21.0",
+        "less": "^4.0.0",
+        "lightningcss": "^1.21.0",
+        "sass": "^1.70.0",
+        "sass-embedded": "^1.70.0",
+        "stylus": ">=0.54.8",
+        "sugarss": "^5.0.0",
+        "terser": "^5.16.0",
+        "tsx": "^4.8.1",
+        "yaml": "^2.4.2"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "jiti": {
+          "optional": true
+        },
+        "less": {
+          "optional": true
+        },
+        "lightningcss": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        },
+        "sass-embedded": {
+          "optional": true
+        },
+        "stylus": {
+          "optional": true
+        },
+        "sugarss": {
+          "optional": true
+        },
+        "terser": {
+          "optional": true
+        },
+        "tsx": {
+          "optional": true
+        },
+        "yaml": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/vite/node_modules/fdir": {
+      "version": "6.4.6",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
+      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
+      "license": "MIT",
+      "peerDependencies": {
+        "picomatch": "^3 || ^4"
+      },
+      "peerDependenciesMeta": {
+        "picomatch": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/vite/node_modules/picomatch": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
+      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/word-wrap": {
+      "version": "1.2.5",
+      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
+      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/yallist": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
+      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/zod": {
+      "version": "3.25.76",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
+      "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
+    }
+  }
+}
diff --git a/frontend/panaderia-interfaz/package.json b/frontend/panaderia-interfaz/package.json
new file mode 100644
index 00000000..131e57f0
--- /dev/null
+++ b/frontend/panaderia-interfaz/package.json
@@ -0,0 +1,40 @@
+{
+  "name": "panaderia-interfaz",
+  "private": true,
+  "version": "0.0.0",
+  "type": "module",
+  "scripts": {
+    "dev": "vite",
+    "build": "tsc -b && vite build",
+    "lint": "eslint .",
+    "preview": "vite preview"
+  },
+  "dependencies": {
+    "@hookform/resolvers": "^5.1.1",
+    "@tailwindcss/vite": "^4.1.11",
+    "@tanstack/react-query": "^5.83.0",
+    "axios": "^1.11.0",
+    "jwt-decode": "^4.0.0",
+    "react": "^19.1.0",
+    "react-dom": "^19.1.0",
+    "react-hook-form": "^7.57.0",
+    "react-router-dom": "^7.6.1",
+    "tailwindcss": "^4.1.11",
+    "zod": "^3.25.50"
+  },
+  "devDependencies": {
+    "@eslint/js": "^9.30.1",
+    "@types/node": "^24.1.0",
+    "@types/react": "^19.1.8",
+    "@types/react-dom": "^19.1.6",
+    "@vitejs/plugin-react": "^4.6.0",
+    "eslint": "^9.30.1",
+    "eslint-plugin-react-hooks": "^5.2.0",
+    "eslint-plugin-react-refresh": "^0.4.20",
+    "globals": "^16.3.0",
+    "prettier": "3.6.2",
+    "typescript": "~5.8.3",
+    "typescript-eslint": "^8.35.1",
+    "vite": "^7.0.4"
+  }
+}
diff --git a/frontend/panaderia-interfaz/public/LoginBG.svg b/frontend/panaderia-interfaz/public/LoginBG.svg
new file mode 100644
index 00000000..40ac0664
--- /dev/null
+++ b/frontend/panaderia-interfaz/public/LoginBG.svg
@@ -0,0 +1,35 @@
+<svg width="1440px" height="820px" viewBox="0 0 1440 820" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+    <defs>
+        <linearGradient x1="-8.43013734%" y1="-17.6243013%" x2="50%" y2="50%" id="linearGradient-1">
+            <stop stop-color="#000000" stop-opacity="0.01" offset="0%"/>
+            <stop stop-color="#000000" stop-opacity="0.02" offset="100%"/>
+        </linearGradient>
+        <linearGradient x1="50%" y1="0%" x2="66.8719014%" y2="87.9838784%" id="linearGradient-2">
+            <stop stop-color="#000000" stop-opacity="0.01" offset="0%"/>
+            <stop stop-color="#000000" stop-opacity="0.04" offset="100%"/>
+        </linearGradient>
+        <linearGradient x1="59.4260833%" y1="44.3123794%" x2="75.0463678%" y2="65.2398003%" id="linearGradient-3">
+            <stop stop-color="#000000" stop-opacity="0.02" offset="0%"/>
+            <stop stop-color="#000000" stop-opacity="0" offset="100%"/>
+        </linearGradient>
+        <linearGradient x1="77.6224786%" y1="34.4188974%" x2="61.2142769%" y2="56.4009385%" id="linearGradient-4">
+            <stop stop-color="#000000" stop-opacity="0.05" offset="0%"/>
+            <stop stop-color="#000000" stop-opacity="0.01" offset="100%"/>
+        </linearGradient>
+        <linearGradient x1="-1.34707908%" y1="42.8813389%" x2="87.1825875%" y2="100%" id="linearGradient-5">
+            <stop stop-color="#000000" stop-opacity="0.02" offset="0%"/>
+            <stop stop-color="#000000" stop-opacity="0.03" offset="100%"/>
+        </linearGradient>
+    </defs>
+    <g id="Signin" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
+        <g id="Username-FILLED-Copy">
+            <g id="Group">
+                <polygon id="Path-5" fill="url(#linearGradient-1)" points="1.84741111e-13 474 473 2.13162821e-14 1.84741111e-13 2.13162821e-14"/>
+                <polygon id="Path-4" fill="url(#linearGradient-2)" points="1385 820 1347 515 1440 515 1440 820"/>
+                <polygon id="Path-3" fill="url(#linearGradient-3)" points="1440 25 0 635 0 647 429 820 1440 820"/>
+                <polygon id="Path" fill="url(#linearGradient-4)" points="1440 696 0 310 0 141 185 0 1440 0"/>
+                <polygon id="Path-2" fill="url(#linearGradient-5)" points="796.210203 820 0.210203261 820 0.210203261 0 177.210203 0"/>
+            </g>
+        </g>
+    </g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/public/vite.svg b/frontend/panaderia-interfaz/public/vite.svg
new file mode 100644
index 00000000..e7b8dfb1
--- /dev/null
+++ b/frontend/panaderia-interfaz/public/vite.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/App.tsx b/frontend/panaderia-interfaz/src/App.tsx
new file mode 100644
index 00000000..cb5ad0c6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/App.tsx
@@ -0,0 +1,48 @@
+import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
+import { LoginPage } from "./pages/LoginPage";
+import { RegisterPage } from "./pages/RegisterPage";
+import { LandingPage } from "./pages/LandingPage";
+import MateriaPrimaPage from "./pages/MateriaPrimaPage";
+import { AuthProvider, useAuth, withAuth } from "./context/AuthContext";
+import ProductosIntermediosPage from "./pages/ProductosIntermediosPage";
+import RecetasPage from "./pages/RecetasPage";
+// Create protected versions of your components
+const ProtectedLandingPage = withAuth(LandingPage);
+const ProtectedMateriaPrimaPage = withAuth(MateriaPrimaPage);
+
+function Logout() {
+  // This will be handled by the AuthProvider's logout method
+  const { logout } = useAuth();
+  logout();
+  return <Navigate to="/login" />;
+}
+
+function App() {
+  return (
+    <BrowserRouter>
+      <AuthProvider>
+        <Routes>
+          <Route path="/" element={<Navigate to="/register" />} />
+          <Route path="/dashboard" element={<ProtectedLandingPage />} />
+          <Route path="/login" element={<LoginPage />} />
+          <Route path="/register" element={<RegisterPage />} />
+          <Route path="/logout" element={<Logout />} />
+          <Route
+            path="/dashboard/materia-prima"
+            element={<ProtectedMateriaPrimaPage />}
+          />
+          <Route
+            path="/dashboard/productos-intermedios"
+            element={<ProductosIntermediosPage />}
+          />
+          <Route
+            path="/dashboard/recetas"
+            element={<RecetasPage />}
+          />
+        </Routes>
+      </AuthProvider>
+    </BrowserRouter>
+  );
+}
+
+export default App;
diff --git a/frontend/panaderia-interfaz/src/api/client.ts b/frontend/panaderia-interfaz/src/api/client.ts
new file mode 100644
index 00000000..100eb53c
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/api/client.ts
@@ -0,0 +1,9 @@
+import axios from "axios";
+import { API } from "../data/constants";
+
+const apiClient = axios.create({
+  baseURL: API,
+  withCredentials: true, // This is crucial for sending the HttpOnly cookie
+});
+
+export default apiClient;
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Agregar.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Agregar.svg
new file mode 100644
index 00000000..a025a8db
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Agregar.svg
@@ -0,0 +1,4 @@
+<svg width="35px" height="35px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M12.75 9C12.75 8.58579 12.4142 8.25 12 8.25C11.5858 8.25 11.25 8.58579 11.25 9L11.25 11.25H9C8.58579 11.25 8.25 11.5858 8.25 12C8.25 12.4142 8.58579 12.75 9 12.75H11.25V15C11.25 15.4142 11.5858 15.75 12 15.75C12.4142 15.75 12.75 15.4142 12.75 15L12.75 12.75H15C15.4142 12.75 15.75 12.4142 15.75 12C15.75 11.5858 15.4142 11.25 15 11.25H12.75V9Z" fill="#1C274C"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12 1.25C6.06294 1.25 1.25 6.06294 1.25 12C1.25 17.9371 6.06294 22.75 12 22.75C17.9371 22.75 22.75 17.9371 22.75 12C22.75 6.06294 17.9371 1.25 12 1.25ZM2.75 12C2.75 6.89137 6.89137 2.75 12 2.75C17.1086 2.75 21.25 6.89137 21.25 12C21.25 17.1086 17.1086 21.25 12 21.25C6.89137 21.25 2.75 17.1086 2.75 12Z" fill="#1C274C"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Borrar.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Borrar.svg
new file mode 100644
index 00000000..e7e22cce
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Borrar.svg
@@ -0,0 +1 @@
+<svg width="25px" height="25px" viewBox="0 0 1024 1024" class="icon"  version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M905.92 237.76a32 32 0 0 0-52.48 36.48A416 416 0 1 1 96 512a418.56 418.56 0 0 1 297.28-398.72 32 32 0 1 0-18.24-61.44A480 480 0 1 0 992 512a477.12 477.12 0 0 0-86.08-274.24z" fill="#FFFFFF" /><path d="M630.72 113.28A413.76 413.76 0 0 1 768 185.28a32 32 0 0 0 39.68-50.24 476.8 476.8 0 0 0-160-83.2 32 32 0 0 0-18.24 61.44zM489.28 86.72a36.8 36.8 0 0 0 10.56 6.72 30.08 30.08 0 0 0 24.32 0 37.12 37.12 0 0 0 10.56-6.72A32 32 0 0 0 544 64a33.6 33.6 0 0 0-9.28-22.72A32 32 0 0 0 505.6 32a20.8 20.8 0 0 0-5.76 1.92 23.68 23.68 0 0 0-5.76 2.88l-4.8 3.84a32 32 0 0 0-6.72 10.56A32 32 0 0 0 480 64a32 32 0 0 0 2.56 12.16 37.12 37.12 0 0 0 6.72 10.56zM726.72 297.28a32 32 0 0 0-45.12 0l-169.6 169.6-169.28-169.6A32 32 0 0 0 297.6 342.4l169.28 169.6-169.6 169.28a32 32 0 1 0 45.12 45.12l169.6-169.28 169.28 169.28a32 32 0 0 0 45.12-45.12L557.12 512l169.28-169.28a32 32 0 0 0 0.32-45.44z" fill="#FFFFFF" /></svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Cerrar.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Cerrar.svg
new file mode 100644
index 00000000..55e6e28e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Cerrar.svg
@@ -0,0 +1,10 @@
+<svg width="25px" height="25px" viewBox="0 0 512 512" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
+    <title>cancel</title>
+    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
+        <g id="work-case" fill="#000000" transform="translate(91.520000, 91.520000)">
+            <polygon id="Close" points="328.96 30.2933333 298.666667 1.42108547e-14 164.48 134.4 30.2933333 1.42108547e-14 1.42108547e-14 30.2933333 134.4 164.48 1.42108547e-14 298.666667 30.2933333 328.96 164.48 194.56 298.666667 328.96 328.96 298.666667 194.56 164.48">
+
+</polygon>
+        </g>
+    </g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Check.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Check.svg
new file mode 100644
index 00000000..c19cecc9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Check.svg
@@ -0,0 +1,4 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<circle cx="12" cy="12" r="10" stroke="#FFFFFF" stroke-width="1.5"/>
+<path d="M8.5 12.5L10.5 14.5L15.5 9.5" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Clientes.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Clientes.svg
new file mode 100644
index 00000000..2d6e5902
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Clientes.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M13 20V18C13 15.2386 10.7614 13 8 13C5.23858 13 3 15.2386 3 18V20H13ZM13 20H21V19C21 16.0545 18.7614 14 16 14C14.5867 14 13.3103 14.6255 12.4009 15.6311M11 7C11 8.65685 9.65685 10 8 10C6.34315 10 5 8.65685 5 7C5 5.34315 6.34315 4 8 4C9.65685 4 11 5.34315 11 7ZM18 9C18 10.1046 17.1046 11 16 11C14.8954 11 14 10.1046 14 9C14 7.89543 14.8954 7 16 7C17.1046 7 18 7.89543 18 9Z" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Compras.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Compras.svg
new file mode 100644
index 00000000..96e226b9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Compras.svg
@@ -0,0 +1,5 @@
+<svg width="25px" height="25px" viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M18.5996 21.57C19.7042 21.57 20.5996 20.6746 20.5996 19.57C20.5996 18.4654 19.7042 17.57 18.5996 17.57C17.495 17.57 16.5996 18.4654 16.5996 19.57C16.5996 20.6746 17.495 21.57 18.5996 21.57Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+<path d="M8.59961 21.57C9.70418 21.57 10.5996 20.6746 10.5996 19.57C10.5996 18.4654 9.70418 17.57 8.59961 17.57C7.49504 17.57 6.59961 18.4654 6.59961 19.57C6.59961 20.6746 7.49504 21.57 8.59961 21.57Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+<path d="M2 3.55997C2 3.55997 6.64 3.49997 6 7.55997L5.31006 11.62C5.20774 12.1068 5.21778 12.6105 5.33954 13.0929C5.46129 13.5752 5.69152 14.0234 6.01263 14.4034C6.33375 14.7833 6.73733 15.0849 7.19263 15.2854C7.64793 15.4858 8.14294 15.5797 8.64001 15.56H16.64C17.7479 15.5271 18.8119 15.1196 19.6583 14.404C20.5046 13.6884 21.0834 12.7069 21.3 11.62L21.9901 7.50998C22.0993 7.0177 22.0939 6.50689 21.9744 6.017C21.8548 5.52712 21.6242 5.07126 21.3005 4.68467C20.9767 4.29807 20.5684 3.99107 20.1071 3.78739C19.6458 3.58371 19.1438 3.48881 18.64 3.50998H9.94" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Config.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Config.svg
new file mode 100644
index 00000000..06d3cc2d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Config.svg
@@ -0,0 +1,13 @@
+<svg width="30px" height="30px" viewBox="0 0 8.4666669 8.4666669" id="svg8" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cc="http://creativecommons.org/ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:svg="http://www.w3.org/2000/svg">
+
+<defs id="defs2"/>
+
+<g id="layer1" transform="translate(0,-288.53332)">
+
+<path d="m 3.7041666,288.7979 a 0.26460976,0.26460976 0 0 0 -0.2511475,0.18087 l -0.2687174,0.80615 c -0.1084927,0.0382 -0.2146168,0.082 -0.3183269,0.13178 l -0.7601602,-0.37982 a 0.26460976,0.26460976 0 0 0 -0.3054077,0.0496 l -0.7482748,0.74827 a 0.26460976,0.26460976 0 0 0 -0.049609,0.30541 l 0.379305,0.75861 c -0.049895,0.10423 -0.094048,0.21083 -0.1322917,0.31988 l -0.80511879,0.26871 a 0.26460976,0.26460976 0 0 0 -0.18086751,0.25115 v 1.05833 a 0.26460976,0.26460976 0 0 0 0.18086751,0.25115 l 0.80770259,0.26924 c 0.038069,0.10784 0.081782,0.21314 0.1312582,0.31625 l -0.3808553,0.76172 a 0.26460976,0.26460976 0 0 0 0.049609,0.3054 l 0.7482748,0.74879 a 0.26460976,0.26460976 0 0 0 0.3054077,0.0496 l 0.7601602,-0.38033 c 0.1036035,0.0495 0.209454,0.0932 0.3178101,0.13125 l 0.2692342,0.80719 a 0.26460976,0.26460976 0 0 0 0.2511475,0.18087 h 1.0583333 a 0.26460976,0.26460976 0 0 0 0.2511476,-0.18087 l 0.2692341,-0.80874 c 0.1075521,-0.0379 0.2128936,-0.0815 0.3157429,-0.13074 l 0.7622276,0.38137 a 0.26460976,0.26460976 0 0 0 0.3054074,-0.0496 l 0.748275,-0.74879 a 0.26460976,0.26460976 0 0 0 0.049609,-0.3054 l -0.3798218,-0.75965 c 0.049789,-0.10387 0.093561,-0.21018 0.1317749,-0.31884 L 8.0222491,293.548 a 0.26460976,0.26460976 0 0 0 0.1808676,-0.25115 v -1.05833 a 0.26460976,0.26460976 0 0 0 -0.1808676,-0.25115 l -0.806669,-0.26871 c -0.038193,-0.10832 -0.082077,-0.21427 -0.1317747,-0.31781 l 0.3803385,-0.76068 a 0.26460976,0.26460976 0 0 0 -0.049609,-0.30541 l -0.748275,-0.74827 a 0.26460976,0.26460976 0 0 0 -0.3054074,-0.0496 l -0.7580934,0.37878 c -0.1045763,-0.05 -0.2115013,-0.094 -0.3209105,-0.13229 l -0.2682007,-0.8046 a 0.26460976,0.26460976 0 0 0 -0.251148,-0.18088 z m 0.190686,0.52917 h 0.6769613 l 0.245463,0.73691 a 0.26460976,0.26460976 0 0 0 0.1757,0.17001 c 0.1722022,0.0512 0.3388331,0.11967 0.4971272,0.20464 a 0.26460976,0.26460976 0 0 0 0.243396,0.004 l 0.6934978,-0.34675 0.4785236,0.47852 -0.3482991,0.6966 a 0.26460976,0.26460976 0 0 0 0.00362,0.24391 c 0.084769,0.15725 0.1537229,0.32244 0.2051555,0.49351 a 0.26460976,0.26460976 0 0 0 0.1694987,0.17519 l 0.738456,0.24598 v 0.67696 l -0.7379393,0.24598 a 0.26460976,0.26460976 0 0 0 -0.1694987,0.17518 c -0.051373,0.1714 -0.1203285,0.337 -0.2051555,0.49454 a 0.26460976,0.26460976 0 0 0 -0.00362,0.24392 l 0.3477824,0.69556 -0.4785236,0.47904 -0.6981486,-0.34933 a 0.26460976,0.26460976 0 0 0 -0.2439128,0.004 c -0.1566825,0.0843 -0.3210488,0.15287 -0.4914429,0.20412 a 0.26460976,0.26460976 0 0 0 -0.175183,0.1695 l -0.2464967,0.74052 H 3.8948526 l -0.2464967,-0.73949 a 0.26460976,0.26460976 0 0 0 -0.175183,-0.17001 c -0.1710385,-0.0511 -0.3367447,-0.11916 -0.4940265,-0.20361 a 0.26460976,0.26460976 0 0 0 -0.243396,-0.004 l -0.6960816,0.3483 -0.4785238,-0.47904 0.3488159,-0.69763 a 0.26460976,0.26460976 0 0 0 -0.00362,-0.24391 c -0.08452,-0.15682 -0.1532676,-0.32191 -0.2046387,-0.49248 a 0.26460976,0.26460976 0 0 0 -0.1694987,-0.17467 l -0.73948973,-0.24649 v -0.67696 l 0.73742263,-0.24598 a 0.26460976,0.26460976 0 0 0 0.1700155,-0.17519 c 0.051313,-0.17172 0.1197532,-0.33773 0.2046387,-0.49557 a 0.26460976,0.26460976 0 0 0 0.00362,-0.24392 l -0.3472656,-0.69453 0.4785238,-0.47852 0.6960816,0.34778 a 0.26460976,0.26460976 0 0 0 0.2439127,-0.004 c 0.1573948,-0.0848 0.3227911,-0.15375 0.4940266,-0.20515 a 0.26460976,0.26460976 0 0 0 0.1751832,-0.1695 z" id="path940" style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;writing-mode:lr-tb;direction:ltr;text-orientation:mixed;dominant-baseline:auto;baseline-shift:baseline;text-anchor:start;white-space:normal;shape-padding:0;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.52916664;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
+
+<path d="m 4.2324219,290.91406 c -1.0197435,0 -1.8515625,0.83377 -1.8515625,1.85352 0,1.01974 0.831819,1.85156 1.8515625,1.85156 1.0197434,0 1.8535156,-0.83182 1.8535156,-1.85156 0,-1.01975 -0.8337722,-1.85352 -1.8535156,-1.85352 z m 0,0.5293 c 0.7337606,0 1.3242187,0.59046 1.3242187,1.32422 0,0.73376 -0.5904581,1.32226 -1.3242187,1.32226 -0.7337606,0 -1.3222657,-0.5885 -1.3222657,-1.32226 0,-0.73376 0.5885051,-1.32422 1.3222657,-1.32422 z" id="path961" style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;writing-mode:lr-tb;direction:ltr;text-orientation:mixed;dominant-baseline:auto;baseline-shift:baseline;text-anchor:start;white-space:normal;shape-padding:0;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.52916664;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;paint-order:stroke fill markers;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"/>
+
+</g>
+
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Editar.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Editar.svg
new file mode 100644
index 00000000..6be02351
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Editar.svg
@@ -0,0 +1,4 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M21.2799 6.40005L11.7399 15.94C10.7899 16.89 7.96987 17.33 7.33987 16.7C6.70987 16.07 7.13987 13.25 8.08987 12.3L17.6399 2.75002C17.8754 2.49308 18.1605 2.28654 18.4781 2.14284C18.7956 1.99914 19.139 1.92124 19.4875 1.9139C19.8359 1.90657 20.1823 1.96991 20.5056 2.10012C20.8289 2.23033 21.1225 2.42473 21.3686 2.67153C21.6147 2.91833 21.8083 3.21243 21.9376 3.53609C22.0669 3.85976 22.1294 4.20626 22.1211 4.55471C22.1128 4.90316 22.0339 5.24635 21.8894 5.5635C21.7448 5.88065 21.5375 6.16524 21.2799 6.40005V6.40005Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+<path d="M11 4H6C4.93913 4 3.92178 4.42142 3.17163 5.17157C2.42149 5.92172 2 6.93913 2 8V18C2 19.0609 2.42149 20.0783 3.17163 20.8284C3.92178 21.5786 4.93913 22 6 22H17C19.21 22 20 20.2 20 18V13" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/FilledLeftArrow.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/FilledLeftArrow.svg
new file mode 100644
index 00000000..58795e3f
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/FilledLeftArrow.svg
@@ -0,0 +1 @@
+<svg fill="#708090" width="20px" height="20px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="m4.431 12.822 13 9A1 1 0 0 0 19 21V3a1 1 0 0 0-1.569-.823l-13 9a1.003 1.003 0 0 0 0 1.645z"/></svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Filtro.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Filtro.svg
new file mode 100644
index 00000000..d911191e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Filtro.svg
@@ -0,0 +1,3 @@
+<svg width="35px" height="35px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M21 6H19M21 12H16M21 18H16M7 20V13.5612C7 13.3532 7 13.2492 6.97958 13.1497C6.96147 13.0615 6.93151 12.9761 6.89052 12.8958C6.84431 12.8054 6.77934 12.7242 6.64939 12.5617L3.35061 8.43826C3.22066 8.27583 3.15569 8.19461 3.10948 8.10417C3.06849 8.02393 3.03853 7.93852 3.02042 7.85026C3 7.75078 3 7.64677 3 7.43875V5.6C3 5.03995 3 4.75992 3.10899 4.54601C3.20487 4.35785 3.35785 4.20487 3.54601 4.10899C3.75992 4 4.03995 4 4.6 4H13.4C13.9601 4 14.2401 4 14.454 4.10899C14.6422 4.20487 14.7951 4.35785 14.891 4.54601C15 4.75992 15 5.03995 15 5.6V7.43875C15 7.64677 15 7.75078 14.9796 7.85026C14.9615 7.93852 14.9315 8.02393 14.8905 8.10417C14.8443 8.19461 14.7793 8.27583 14.6494 8.43826L11.3506 12.5617C11.2207 12.7242 11.1557 12.8054 11.1095 12.8958C11.0685 12.9761 11.0385 13.0615 11.0204 13.1497C11 13.2492 11 13.3532 11 13.5612V17L7 20Z" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Import.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Import.svg
new file mode 100644
index 00000000..fb50985d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Import.svg
@@ -0,0 +1,4 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M12 4L12 14M12 14L15 11M12 14L9 11" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+<path d="M12 20C7.58172 20 4 16.4183 4 12M20 12C20 14.5264 18.8289 16.7792 17 18.2454" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Intermedios.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Intermedios.svg
new file mode 100644
index 00000000..944ce454
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Intermedios.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12 4.75C10.9396 4.75 10.0907 5.07796 8.06584 5.88789L5.25737 7.01128C4.24694 7.41545 3.54677 7.69659 3.09295 7.93451C3.0486 7.95776 3.00863 7.97959 2.97267 8C3.00863 8.02041 3.0486 8.04224 3.09295 8.06549C3.54677 8.30341 4.24694 8.58455 5.25737 8.98872L8.06584 10.1121C10.0907 10.922 10.9396 11.25 12 11.25C13.0604 11.25 13.9093 10.922 15.9342 10.1121L18.7426 8.98872C19.7531 8.58455 20.4532 8.30341 20.9071 8.06549C20.9514 8.04224 20.9914 8.02041 21.0273 8C20.9914 7.97959 20.9514 7.95776 20.9071 7.93451C20.4532 7.69659 19.7531 7.41545 18.7426 7.01128L15.9342 5.88789C13.9093 5.07796 13.0604 4.75 12 4.75ZM7.62442 4.4489C9.50121 3.69796 10.6208 3.25 12 3.25C13.3792 3.25 14.4988 3.69796 16.3756 4.4489C16.4138 4.4642 16.4524 4.47962 16.4912 4.49517L19.3451 5.6367C20.2996 6.01851 21.0728 6.32776 21.6035 6.60601C21.8721 6.74683 22.1323 6.90648 22.333 7.09894C22.5392 7.29668 22.75 7.59658 22.75 8C22.75 8.40342 22.5392 8.70332 22.333 8.90106C22.1323 9.09352 21.8721 9.25317 21.6035 9.39399C21.2519 9.57835 20.7938 9.77632 20.247 10C20.7938 10.2237 21.2519 10.4216 21.6035 10.606C21.8721 10.7468 22.1323 10.9065 22.333 11.0989C22.5392 11.2967 22.75 11.5966 22.75 12C22.75 12.4034 22.5392 12.7033 22.333 12.9011C22.1323 13.0935 21.8721 13.2532 21.6035 13.394C21.2519 13.5784 20.7938 13.7763 20.247 14C20.7938 14.2237 21.2519 14.4216 21.6035 14.606C21.8721 14.7468 22.1323 14.9065 22.333 15.0989C22.5392 15.2967 22.75 15.5966 22.75 16C22.75 16.4034 22.5392 16.7033 22.333 16.9011C22.1323 17.0935 21.8721 17.2532 21.6035 17.394C21.0728 17.6722 20.2997 17.9815 19.3451 18.3633L16.4912 19.5048C16.4524 19.5204 16.4138 19.5358 16.3756 19.5511C14.4988 20.302 13.3792 20.75 12 20.75C10.6208 20.75 9.50121 20.302 7.62443 19.5511C7.58619 19.5358 7.54763 19.5204 7.50875 19.5048L4.6549 18.3633C3.70034 17.9815 2.9272 17.6722 2.39647 17.394C2.12786 17.2532 1.86765 17.0935 1.66701 16.9011C1.46085 16.7033 1.25 16.4034 1.25 16C1.25 15.5966 1.46085 15.2967 1.66701 15.0989C1.86765 14.9065 2.12786 14.7468 2.39647 14.606C2.74813 14.4216 3.20621 14.2237 3.75299 14C3.20621 13.7763 2.74813 13.5784 2.39647 13.394C2.12786 13.2532 1.86765 13.0935 1.66701 12.9011C1.46085 12.7033 1.25 12.4034 1.25 12C1.25 11.5966 1.46085 11.2967 1.66701 11.0989C1.86765 10.9065 2.12786 10.7468 2.39647 10.606C2.74813 10.4216 3.20621 10.2237 3.75299 10C3.20621 9.77632 2.74813 9.57835 2.39647 9.39399C2.12786 9.25317 1.86765 9.09352 1.66701 8.90106C1.46085 8.70332 1.25 8.40342 1.25 8C1.25 7.59658 1.46085 7.29668 1.66701 7.09894C1.86765 6.90648 2.12786 6.74683 2.39647 6.60601C2.92721 6.32776 3.70037 6.01851 4.65496 5.63669L7.50875 4.49517C7.54763 4.47962 7.58618 4.4642 7.62442 4.4489ZM5.76613 10.8078L5.25737 11.0113C4.24694 11.4154 3.54677 11.6966 3.09295 11.9345C3.0486 11.9578 3.00863 11.9796 2.97268 12C3.00863 12.0204 3.0486 12.0422 3.09295 12.0655C3.54677 12.3034 4.24694 12.5845 5.25737 12.9887L8.06584 14.1121C10.0907 14.922 10.9396 15.25 12 15.25C13.0604 15.25 13.9093 14.922 15.9342 14.1121L18.7426 12.9887C19.7531 12.5845 20.4532 12.3034 20.9071 12.0655C20.9514 12.0422 20.9914 12.0204 21.0273 12C20.9914 11.9796 20.9514 11.9578 20.9071 11.9345C20.4532 11.6966 19.7531 11.4154 18.7426 11.0113L18.2339 10.8078L16.4912 11.5048C16.4524 11.5204 16.4138 11.5358 16.3756 11.5511C14.4988 12.302 13.3792 12.75 12 12.75C10.6208 12.75 9.50121 12.302 7.62443 11.5511C7.58619 11.5358 7.54763 11.5204 7.50875 11.5048L5.76613 10.8078ZM5.76613 14.8078L5.25737 15.0113C4.24694 15.4154 3.54678 15.6966 3.09295 15.9345C3.0486 15.9578 3.00863 15.9796 2.97268 16C3.00863 16.0204 3.0486 16.0422 3.09295 16.0655C3.54677 16.3034 4.24694 16.5845 5.25737 16.9887L8.06584 18.1121C10.0907 18.922 10.9396 19.25 12 19.25C13.0604 19.25 13.9093 18.922 15.9342 18.1121L18.7426 16.9887C19.7531 16.5845 20.4532 16.3034 20.9071 16.0655C20.9514 16.0422 20.9914 16.0204 21.0273 16C20.9914 15.9796 20.9514 15.9578 20.9071 15.9345C20.4532 15.6966 19.7531 15.4154 18.7426 15.0113L18.2339 14.8078L16.4912 15.5048C16.4524 15.5204 16.4138 15.5358 16.3756 15.5511C14.4988 16.302 13.3792 16.75 12 16.75C10.6208 16.75 9.50121 16.302 7.62443 15.5511C7.58619 15.5358 7.54763 15.5204 7.50875 15.5048L5.76613 14.8078Z" fill="#FFFFFF"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Left.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Left.svg
new file mode 100644
index 00000000..ef5db696
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Left.svg
@@ -0,0 +1 @@
+<svg width="25px" height="25px" viewBox="0 0 1024 1024" class="icon"  version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M768 903.232l-50.432 56.768L256 512l461.568-448 50.432 56.768L364.928 512z" fill="#FFFFFF" /></svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/MateriaPrima.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/MateriaPrima.svg
new file mode 100644
index 00000000..ae9d705e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/MateriaPrima.svg
@@ -0,0 +1,38 @@
+<svg fill="#FFFFFF" height="25px" width="25px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	viewBox="0 0 512.002 512.002" xml:space="preserve">
+<g>
+	<g>
+		<path d="M368.528,196.923c4.662,0,8.44-3.779,8.44-8.44s-3.778-8.44-8.44-8.44c-6.275,0-12.425,0.537-18.414,1.554
+			c8.86-10.186,15.934-22.088,20.608-35.313c1.553-4.394-0.751-9.216-5.145-10.769c-4.393-1.553-9.216,0.751-10.769,5.145
+			c-12.091,34.212-43.059,58.049-78.696,61.466c4.477-47.047,44.216-83.973,92.416-83.973c4.662,0,8.44-3.779,8.44-8.44
+			s-3.778-8.44-8.44-8.44c-48.376,0-89.535,31.474-104.088,75.018v-21.226c29.172-31.108,37.744-76.243,21.74-116.018
+			c-1.74-4.326-6.656-6.417-10.98-4.68c-4.324,1.74-6.419,6.656-4.679,10.979c12.807,31.831,7.022,67.719-14.521,93.787
+			c-30.107-36.433-28.116-90.643,5.969-124.728c3.296-3.296,3.296-8.64,0-11.935c-3.297-3.296-8.64-3.295-11.936,0
+			c-41.928,41.927-42.732,109.608-2.472,152.56v21.262c-14.553-43.544-55.712-75.018-104.088-75.018c-4.661,0-8.44,3.779-8.44,8.44
+			c0,27.476,10.153,52.624,26.903,71.892c-6.004-1.022-12.172-1.562-18.464-1.562c-4.661,0-8.44,3.779-8.44,8.44
+			c0,27.476,10.153,52.624,26.903,71.892c-6.004-1.022-12.172-1.562-18.464-1.562c-4.661,0-8.44,3.779-8.44,8.44
+			c0,27.476,10.153,52.624,26.903,71.892c-6.004-1.022-12.172-1.562-18.464-1.562c-4.661,0-8.44,3.779-8.44,8.44
+			c0,60.497,49.217,109.714,109.715,109.714c0.988,0,1.932-0.179,2.813-0.491v48.315c0,4.661,3.779,8.44,8.44,8.44
+			c4.662,0,8.44-3.779,8.44-8.44v-48.315c0.881,0.312,1.825,0.491,2.813,0.491c46.426,0,88.007-29.394,103.469-73.144
+			c1.553-4.394-0.751-9.216-5.145-10.769c-4.393-1.555-9.216,0.751-10.769,5.145c-12.091,34.212-43.059,58.049-78.696,61.466
+			c4.477-47.047,44.216-83.973,92.416-83.973c4.662,0,8.44-3.779,8.44-8.44s-3.778-8.44-8.44-8.44
+			c-6.275,0-12.425,0.537-18.414,1.554c8.86-10.186,15.934-22.088,20.608-35.313c1.553-4.394-0.751-9.216-5.145-10.769
+			c-4.393-1.553-9.216,0.751-10.769,5.145c-12.091,34.212-43.059,58.049-78.696,61.466c4.477-47.047,44.216-83.973,92.416-83.973
+			c4.662,0,8.44-3.779,8.44-8.44s-3.778-8.44-8.44-8.44c-6.275,0-12.425,0.537-18.414,1.554
+			c8.86-10.186,15.934-22.088,20.608-35.313c1.553-4.394-0.751-9.216-5.145-10.769c-4.393-1.554-9.216,0.751-10.769,5.145
+			c-12.091,34.212-43.059,58.049-78.696,61.466C280.59,233.849,320.328,196.923,368.528,196.923z M152.331,118.573
+			c44.136,4.196,79.361,39.422,83.557,83.557C191.753,197.934,156.527,162.709,152.331,118.573z M152.331,197.343
+			c44.136,4.196,79.361,39.422,83.557,83.557C191.753,276.704,156.527,241.478,152.331,197.343z M152.331,276.112
+			c44.136,4.196,79.361,39.422,83.557,83.557C191.753,355.473,156.527,320.248,152.331,276.112z M152.331,354.881
+			c44.136,4.196,79.361,39.422,83.557,83.557C191.753,434.243,156.527,399.017,152.331,354.881z M247.561,412.601
+			c-4.619-13.822-11.917-26.427-21.277-37.195c6.004,1.022,12.172,1.562,18.464,1.562c0.988,0,1.932-0.179,2.813-0.491V412.601z
+			M247.561,333.831c-4.619-13.821-11.916-26.426-21.277-37.195c6.004,1.022,12.172,1.562,18.464,1.562
+			c0.988,0,1.932-0.179,2.813-0.491V333.831z M247.561,255.061c-4.619-13.821-11.916-26.426-21.277-37.195
+			c6.004,1.022,12.172,1.562,18.464,1.562c0.988,0,1.932-0.178,2.813-0.491V255.061z M285.741,375.378
+			c-9.372,10.775-16.678,23.389-21.3,37.222v-36.124c0.881,0.312,1.825,0.491,2.813,0.491
+			C273.524,376.967,279.7,376.414,285.741,375.378z M285.741,296.609c-9.372,10.775-16.678,23.389-21.3,37.222v-36.124
+			c0.881,0.312,1.825,0.491,2.813,0.491C273.524,298.198,279.7,297.644,285.741,296.609z M264.44,255.061v-36.124
+			c0.881,0.312,1.825,0.491,2.813,0.491c6.27,0,12.447-0.554,18.487-1.589C276.368,228.614,269.063,241.23,264.44,255.061z"/>
+	</g>
+</g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Menu.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Menu.svg
new file mode 100644
index 00000000..72eb0b86
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Menu.svg
@@ -0,0 +1,5 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M20.75 7C20.75 7.41421 20.4142 7.75 20 7.75L4 7.75C3.58579 7.75 3.25 7.41421 3.25 7C3.25 6.58579 3.58579 6.25 4 6.25L20 6.25C20.4142 6.25 20.75 6.58579 20.75 7Z" fill="#FFFFFF"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M20.75 12C20.75 12.4142 20.4142 12.75 20 12.75L4 12.75C3.58579 12.75 3.25 12.4142 3.25 12C3.25 11.5858 3.58579 11.25 4 11.25L20 11.25C20.4142 11.25 20.75 11.5858 20.75 12Z" fill="#FFFFFF"/>
+<path fill-rule="evenodd" clip-rule="evenodd" d="M20.75 17C20.75 17.4142 20.4142 17.75 20 17.75L4 17.75C3.58579 17.75 3.25 17.4142 3.25 17C3.25 16.5858 3.58579 16.25 4 16.25L20 16.25C20.4142 16.25 20.75 16.5858 20.75 17Z" fill="#FFFFFF"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Notification.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Notification.svg
new file mode 100644
index 00000000..05633c69
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Notification.svg
@@ -0,0 +1,3 @@
+<svg width="30px" height="30px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M9.33497 4.72727V5.25342C6.64516 6.35644 4.76592 9.97935 4.83412 13.1192L4.83409 14.8631C3.45713 16.6333 3.53815 19.2727 6.9735 19.2727H9.33497C9.33497 19.996 9.61684 20.6897 10.1186 21.2012C10.6203 21.7127 11.3008 22 12.0104 22C12.72 22 13.4005 21.7127 13.9022 21.2012C14.404 20.6897 14.6858 19.996 14.6858 19.2727H17.0538C20.4826 19.2727 20.5323 16.6278 19.1555 14.8576L19.1938 13.1216C19.2631 9.97811 17.3803 6.35194 14.6858 5.25049V4.72727C14.6858 4.00396 14.404 3.31026 13.9022 2.7988C13.4005 2.28734 12.72 2 12.0104 2C11.3008 2 10.6203 2.28734 10.1186 2.7988C9.61684 3.31026 9.33497 4.00395 9.33497 4.72727ZM12.9022 4.72727C12.9022 4.74573 12.9017 4.76414 12.9006 4.78246C12.6101 4.74603 12.3142 4.72727 12.014 4.72727C11.7113 4.72727 11.413 4.74634 11.1203 4.78335C11.1192 4.76474 11.1186 4.74603 11.1186 4.72727C11.1186 4.48617 11.2126 4.25494 11.3798 4.08445C11.547 3.91396 11.7739 3.81818 12.0104 3.81818C12.2469 3.81818 12.4738 3.91396 12.641 4.08445C12.8083 4.25494 12.9022 4.48617 12.9022 4.72727ZM11.1186 19.2727C11.1186 19.5138 11.2126 19.7451 11.3798 19.9156C11.547 20.086 11.7739 20.1818 12.0104 20.1818C12.2469 20.1818 12.4738 20.086 12.641 19.9156C12.8083 19.7451 12.9022 19.5138 12.9022 19.2727H11.1186ZM17.0538 17.4545C17.8157 17.4545 18.2267 16.5435 17.7309 15.9538C17.49 15.6673 17.3616 15.3028 17.3699 14.9286L17.4106 13.0808C17.4787 9.99416 15.0427 6.54545 12.014 6.54545C8.98598 6.54545 6.55028 9.99301 6.61731 13.0789L6.65748 14.9289C6.66561 15.303 6.53726 15.6674 6.29639 15.9538C5.80054 16.5435 6.21158 17.4545 6.9735 17.4545H17.0538Z" fill="#000000"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Pedidos.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Pedidos.svg
new file mode 100644
index 00000000..3097e4ad
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Pedidos.svg
@@ -0,0 +1,6 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<rect x="5" y="4" width="14" height="17" rx="2" stroke="#FFFFFF"/>
+<path d="M9 9H15" stroke="#FFFFFF" stroke-linecap="round"/>
+<path d="M9 13H15" stroke="#FFFFFF" stroke-linecap="round"/>
+<path d="M9 17H13" stroke="#FFFFFF" stroke-linecap="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Plussign.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Plussign.svg
new file mode 100644
index 00000000..9546c380
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Plussign.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M4 12H20M12 4V20" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Production.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Production.svg
new file mode 100644
index 00000000..6eb22609
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Production.svg
@@ -0,0 +1,47 @@
+<svg fill="#FFFFFF" height="25px" width="25px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	viewBox="0 0 512 512" xml:space="preserve">
+<g>
+	<g>
+		<g>
+			<path d="M445.259,271.17c1.325-2.994,2.067-6.301,2.067-9.781v-86.232c0-7.613-3.529-14.414-9.033-18.863h0.949
+				c4.466,0,8.084-3.618,8.084-8.084c0-4.466-3.618-8.084-8.084-8.084h-56.589v-35.032c0-4.466-3.619-8.084-8.084-8.084H253.305
+				V83.537c0-4.466-3.62-8.084-8.084-8.084H72.758c-4.465,0-8.084,3.619-8.084,8.084v188.111C27.671,280.226,0,313.437,0,353.01
+				c0,46.062,37.475,83.537,83.537,83.537h344.926c46.062,0,83.537-37.475,83.537-83.537
+				C512,312.699,483.299,278.967,445.259,271.17z M423.074,167.074c4.458,0,8.084,3.626,8.084,8.084v86.232
+				c0,4.458-3.626,8.084-8.084,8.084h-53.895c-4.458,0-8.084-3.626-8.084-8.084v-86.232c0-4.458,3.626-8.084,8.084-8.084H423.074z
+				M253.305,113.179h113.179v26.947H353.01c-4.466,0-8.084,3.618-8.084,8.084c0,4.466,3.618,8.084,8.084,8.084h0.949
+				c-5.504,4.45-9.033,11.251-9.033,18.863v86.232c0,2.834,0.494,5.553,1.391,8.084h-23.979c2.971-4.045,5.857-9.208,8.523-15.789
+				c5.961-14.711,8.676-31.462,8.676-40.8c0-22.289-18.132-40.421-40.421-40.421c-4.367,0-8.651,0.727-12.719,2.076
+				c2.68-10.476,12.199-18.244,23.498-18.244c4.466,0,8.084-3.618,8.084-8.084c0-4.466-3.619-8.084-8.084-8.084
+				c-20.378,0-37.273,15.159-40.02,34.792c-4.405-1.61-9.095-2.455-13.875-2.455c-0.907,0-1.803,0.041-2.695,0.1V113.179z
+				M256,188.632c5.974,0,11.715,2.195,16.165,6.178c3.07,2.748,7.716,2.748,10.785,0c4.451-3.984,10.191-6.178,16.165-6.178
+				c13.372,0,24.253,10.88,24.253,24.253c0,18.264-10.981,54.051-24.253,54.051c-5.974,0-11.715-2.195-16.165-6.178
+				c-1.535-1.373-3.464-2.061-5.393-2.061c-1.928,0-3.858,0.688-5.393,2.061c-4.451,3.984-10.191,6.178-16.165,6.178
+				c-13.272,0-24.253-35.786-24.253-54.051C231.747,199.512,242.627,188.632,256,188.632z M210.189,91.621h26.947v85.529
+				c-12.809,6.789-21.558,20.256-21.558,35.734c0,9.338,2.715,26.088,8.676,40.8c2.667,6.581,5.553,11.744,8.523,15.789h-22.588
+				V91.621z M80.842,91.621h113.179v177.853H83.537h-2.695V91.621z M428.463,420.379H83.537c-37.146,0-67.368-30.221-67.368-67.368
+				c0-37.147,30.222-67.368,67.368-67.368h344.926c37.148,0,67.368,30.221,67.368,67.368
+				C495.832,390.158,465.611,420.379,428.463,420.379z"/>
+			<path d="M83.537,323.368c-16.345,0-29.642,13.298-29.642,29.642c0,16.344,13.297,29.642,29.642,29.642
+				s29.642-13.298,29.642-29.642C113.179,336.666,99.882,323.368,83.537,323.368z M83.537,366.484
+				c-7.43,0-13.474-6.044-13.474-13.474s6.044-13.474,13.474-13.474s13.474,6.044,13.474,13.474S90.967,366.484,83.537,366.484z"/>
+			<path d="M428.463,323.368c-16.344,0-29.642,13.298-29.642,29.642c0,16.344,13.298,29.642,29.642,29.642
+				s29.642-13.298,29.642-29.642C458.105,336.666,444.807,323.368,428.463,323.368z M428.463,366.484
+				c-7.43,0-13.474-6.044-13.474-13.474s6.044-13.474,13.474-13.474s13.474,6.044,13.474,13.474S435.893,366.484,428.463,366.484z"
+				/>
+			<path d="M256,323.368c-16.345,0-29.642,13.298-29.642,29.642c0,16.344,13.297,29.642,29.642,29.642
+				c16.344,0,29.642-13.298,29.642-29.642C285.642,336.666,272.344,323.368,256,323.368z M256,366.484
+				c-7.43,0-13.474-6.044-13.474-13.474s6.044-13.474,13.474-13.474c7.43,0,13.474,6.044,13.474,13.474S263.43,366.484,256,366.484z
+				"/>
+			<path d="M342.232,323.368c-16.344,0-29.642,13.298-29.642,29.642c0,16.344,13.298,29.642,29.642,29.642
+				s29.642-13.298,29.642-29.642C371.874,336.666,358.576,323.368,342.232,323.368z M342.232,366.484
+				c-7.43,0-13.474-6.044-13.474-13.474s6.044-13.474,13.474-13.474s13.474,6.044,13.474,13.474S349.661,366.484,342.232,366.484z"
+				/>
+			<path d="M169.768,323.368c-16.345,0-29.642,13.298-29.642,29.642c0,16.344,13.297,29.642,29.642,29.642
+				s29.642-13.298,29.642-29.642C199.411,336.666,186.114,323.368,169.768,323.368z M169.768,366.484
+				c-7.43,0-13.474-6.044-13.474-13.474s6.044-13.474,13.474-13.474s13.474,6.044,13.474,13.474S177.198,366.484,169.768,366.484z"
+				/>
+		</g>
+	</g>
+</g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Productos.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Productos.svg
new file mode 100644
index 00000000..a63514fc
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Productos.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M12 3.66333L20.25 7.7398V17.01L12 21.0865L3.75 17.01V7.7398L12 3.66333ZM5.25 9.41292V16.078L11.25 19.0427V12.3776L5.25 9.41292ZM12.75 12.3776V19.0427L18.75 16.078V9.41292L16.5 10.5247V13.4999L15 14.2499V11.2659L12.75 12.3776ZM17.807 8.20577L15.8527 9.17139C15.8099 9.13606 15.7624 9.10498 15.7106 9.07908L10.1015 6.27454L12 5.33645L17.807 8.20577ZM8.41452 7.1081L14.1871 9.9944L12 11.0751L6.19304 8.20577L8.41452 7.1081Z" fill="#FFFFFF"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/PuntoVenta.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/PuntoVenta.svg
new file mode 100644
index 00000000..ca59eb28
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/PuntoVenta.svg
@@ -0,0 +1,58 @@
+<svg fill="#FFFFFF" height="25px" width="25px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	viewBox="0 0 512 512" xml:space="preserve">
+<g>
+	<g>
+		<path d="M478.609,144.696H367.304v-33.391c0-18.412-14.979-33.391-33.391-33.391H267.13V16.696C267.13,7.475,259.655,0,250.435,0
+			H116.87c-9.22,0-16.696,7.475-16.696,16.696v61.217H33.391C14.979,77.913,0,92.892,0,111.304v367.304
+			C0,497.021,14.979,512,33.391,512h300.522c18.412,0,33.391-14.979,33.391-33.391v-33.391h111.304
+			c18.412,0,33.391-14.979,33.391-33.391c0-4.746,0-228.324,0-233.739C512,159.675,497.021,144.696,478.609,144.696z
+			M133.565,33.391h100.174v111.304H133.565V33.391z M267.13,178.087v33.391H100.174v-33.391
+			C104.646,178.087,262.726,178.087,267.13,178.087z M333.913,478.609H33.391V111.304h66.783v33.391H83.478
+			c-9.22,0-16.696,7.475-16.696,16.696v66.783c0,9.22,7.475,16.696,16.696,16.696h200.348c9.22,0,16.696-7.475,16.696-16.696
+			v-66.783c0-9.22-7.475-16.696-16.696-16.696H267.13v-33.391h66.783V478.609z M478.609,411.826H367.304V311.652h111.304V411.826z
+			M478.609,278.261H367.304V244.87h111.304V278.261z M478.609,211.478H367.304v-33.391h111.304V211.478z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M116.87,278.261H83.478c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S126.09,278.261,116.87,278.261z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M116.87,345.043H83.478c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S126.09,345.043,116.87,345.043z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M116.87,411.826H83.478c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S126.09,411.826,116.87,411.826z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M217.043,278.261h-33.391c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S226.264,278.261,217.043,278.261z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M217.043,345.043h-33.391c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S226.264,345.043,217.043,345.043z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M217.043,411.826h-33.391c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.391
+			c9.22,0,16.696-7.475,16.696-16.696S226.264,411.826,217.043,411.826z"/>
+	</g>
+</g>
+<g>
+	<g>
+		<path d="M283.826,278.261c-9.22,0-16.696,7.475-16.696,16.696v133.565c0,9.22,7.475,16.696,16.696,16.696
+			c9.22,0,16.696-7.475,16.696-16.696V294.957C300.522,285.736,293.047,278.261,283.826,278.261z"/>
+	</g>
+</g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Recetas.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Recetas.svg
new file mode 100644
index 00000000..22c39609
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Recetas.svg
@@ -0,0 +1,4 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+    <path d="M21 11h-3V4a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v14c0 1.654 1.346 3 3 3h14c1.654 0 3-1.346 3-3v-6a1 1 0 0 0-1-1zM5 19a1 1 0 0 1-1-1V5h12v13c0 .351.061.688.171 1H5zm15-1a1 1 0 0 1-2 0v-5h2v5z" fill="#FFFFFF"/>
+    <path d="M6 7h8v2H6zm0 4h8v2H6zm5 4h3v2h-3z" fill="#FFFFFF"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reportes.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reportes.svg
new file mode 100644
index 00000000..d0e56734
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reportes.svg
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#FFFFFF" height="25px" width="25px" version="1.1" id="Layer_1" viewBox="0 0 512 512" xml:space="preserve">
+<g>
+	<g>
+		<path d="M490.667,469.333H55.851l64.405-128.789c2.56,0.32,5.099,0.789,7.744,0.789c7.829,0,15.232-1.621,22.165-4.181    l24.64,24.853c-2.539,6.891-4.139,14.229-4.139,21.995c0,35.285,28.715,64,64,64s64-28.715,64-64    c0-16.448-6.421-31.317-16.64-42.667l45.077-87.061c4.587,1.067,9.323,1.728,14.229,1.728c6.059,0,11.819-1.109,17.387-2.709    l33.131,36.651C387.008,298.944,384,309.077,384,320c0,35.285,28.715,64,64,64c35.285,0,64-28.715,64-64s-28.715-64-64-64    c-8.789,0-17.173,1.792-24.789,5.013l-29.419-32.533c7.232-10.368,11.541-22.912,11.541-36.48c0-35.285-28.715-64-64-64    c-35.285,0-64,28.715-64,64c0,14.805,5.248,28.267,13.717,39.125l-46.549,89.877c-3.221-0.512-6.464-1.003-9.835-1.003    c-11.883,0-22.869,3.456-32.405,9.131l-19.328-19.499c5.632-9.515,9.067-20.48,9.067-32.299c0-35.285-28.715-64-64-64    s-64,28.715-64,64c0,17.216,6.912,32.789,18.005,44.309l-39.339,78.656V21.333C42.667,9.557,33.131,0,21.333,0    C9.536,0,0,9.557,0,21.333v469.333c0,1.045,0.448,1.963,0.597,2.965c0.235,1.557,0.363,3.072,0.917,4.523    c0.491,1.28,1.259,2.347,1.984,3.499c0.704,1.173,1.323,2.368,2.283,3.392c1.024,1.131,2.304,1.92,3.563,2.795    c0.875,0.597,1.493,1.429,2.453,1.92c0.256,0.128,0.555,0.171,0.832,0.299c0.384,0.171,0.789,0.277,1.195,0.427    c2.453,0.917,4.971,1.515,7.488,1.515h0.021h469.333c11.797,0,21.333-9.557,21.333-21.333S502.464,469.333,490.667,469.333z"/>
+	</g>
+</g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reventa.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reventa.svg
new file mode 100644
index 00000000..6806c116
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Reventa.svg
@@ -0,0 +1,24 @@
+<svg fill="#FFFFFF" height="25px" width="25px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
+	viewBox="0 0 512 512" xml:space="preserve">
+<g>
+	<g>
+		<g>
+			<path d="M401.937,89.845c0-11.933-9.71-21.643-21.643-21.643c-11.933,0-21.643,9.71-21.643,21.643s9.71,21.643,21.643,21.643
+				C392.227,111.488,401.937,101.778,401.937,89.845z M377.202,89.845c0-1.705,1.388-3.092,3.092-3.092
+				c1.704,0,3.092,1.386,3.092,3.092s-1.388,3.092-3.092,3.092C378.59,92.937,377.202,91.551,377.202,89.845z"/>
+			<path d="M509.283,135.756l-40.099-40.1c-3.621-3.621-9.494-3.621-13.117,0c-3.622,3.624-3.622,9.496,0,13.118l37.383,37.383
+				V482.84H267.141v-93.58l169.182-169.182c1.74-1.74,2.717-4.099,2.717-6.56V40.376c0-5.124-4.153-9.275-9.276-9.275h-25.137
+				l-17.774-17.774c-3.622-3.621-9.496-3.621-13.117,0l-17.774,17.774h-99.342c-2.46,0-4.82,0.977-6.558,2.716L97.473,186.408
+				c-3.622,3.624-3.622,9.496,0,13.118c3.622,3.621,9.496,3.621,13.117,0L260.464,49.651h160.024v160.024L251.376,378.789
+				c-0.046,0.045-68.959,68.959-68.959,68.959L22.393,287.722l58.928-58.926c3.622-3.624,3.622-9.496,0-13.118
+				c-3.622-3.621-9.496-3.621-13.117,0L2.717,281.162c-3.622,3.624-3.622,9.496,0,13.118l173.142,173.142
+				c1.811,1.811,4.185,2.716,6.558,2.716s4.748-0.905,6.558-2.716l59.613-59.613v84.304c0,5.124,4.153,9.276,9.276,9.276h244.86
+				c5.123,0,9.275-4.152,9.275-9.276V142.316C512,139.855,511.023,137.496,509.283,135.756z"/>
+			<path d="M176.737,380.853c1.739,1.739,4.099,2.716,6.558,2.716c2.46,0,4.82-0.977,6.558-2.716l122.43-122.43
+				c1.74-1.74,2.717-4.099,2.717-6.56c0-2.461-0.977-4.818-2.717-6.56l-87.449-87.449c-3.622-3.621-9.496-3.621-13.117,0
+				L89.288,280.283c-1.74,1.74-2.717,4.1-2.717,6.56s0.977,4.818,2.717,6.56L176.737,380.853z M218.276,177.531l74.332,74.332
+				L183.295,361.176l-74.332-74.332L218.276,177.531z"/>
+		</g>
+	</g>
+</g>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Right.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Right.svg
new file mode 100644
index 00000000..0a232ad7
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Right.svg
@@ -0,0 +1 @@
+<svg width="25px" height="25px" viewBox="0 0 1024 1024" class="icon"  version="1.1" xmlns="http://www.w3.org/2000/svg"><path d="M256 120.768L306.432 64 768 512l-461.568 448L256 903.232 659.072 512z" fill="#FFFFFF" /></svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/RightArrow.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/RightArrow.svg
new file mode 100644
index 00000000..19397a01
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/RightArrow.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M10 16L14 12L10 8" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Search.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Search.svg
new file mode 100644
index 00000000..17dfea78
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Search.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path d="M15.7955 15.8111L21 21M18 10.5C18 14.6421 14.6421 18 10.5 18C6.35786 18 3 14.6421 3 10.5C3 6.35786 6.35786 3 10.5 3C14.6421 3 18 6.35786 18 10.5Z" stroke="#FFFFFF" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Usuario.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Usuario.svg
new file mode 100644
index 00000000..98747b02
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Usuario.svg
@@ -0,0 +1,5 @@
+<svg width="30px" height="30px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<circle cx="12" cy="9" r="3" stroke="#000000" stroke-width="1.5"/>
+<path d="M17.9691 20C17.81 17.1085 16.9247 15 11.9999 15C7.07521 15 6.18991 17.1085 6.03076 20" stroke="#000000" stroke-width="1.5" stroke-linecap="round"/>
+<path d="M7 3.33782C8.47087 2.48697 10.1786 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 10.1786 2.48697 8.47087 3.33782 7" stroke="#000000" stroke-width="1.5" stroke-linecap="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/Venta.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Venta.svg
new file mode 100644
index 00000000..6d3f66d0
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/Venta.svg
@@ -0,0 +1,3 @@
+<svg width="25px" height="25px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
+<path fill-rule="evenodd" clip-rule="evenodd" d="M14.3251 3.75017C14.2209 3.75002 14.1126 3.75 14.0001 3.75L10.0001 3.75C9.88748 3.75 9.77921 3.75002 9.67501 3.75017C9.37671 5.21938 8.21944 6.37665 6.75022 6.67496C6.75008 6.77915 6.75006 6.88742 6.75006 7C6.75006 7.11259 6.75008 7.22086 6.75022 7.32505C8.21944 7.62335 9.37671 8.78062 9.67501 10.2498C9.77921 10.25 9.88748 10.25 10.0001 10.25H14.0001C14.1126 10.25 14.2209 10.25 14.3251 10.2498C14.6234 8.78062 15.7807 7.62336 17.2499 7.32505C17.25 7.22086 17.2501 7.11259 17.2501 7C17.2501 6.88742 17.25 6.77915 17.2499 6.67496C15.7807 6.37665 14.6234 5.21938 14.3251 3.75017ZM14.9296 2.25327C14.655 2.24998 14.3625 2.24999 14.0521 2.25L9.94806 2.25C9.63767 2.24999 9.34509 2.24998 9.07054 2.25327C9.04734 2.25111 9.02383 2.25 9.00006 2.25C8.96867 2.25 8.93772 2.25193 8.90734 2.25568C8.45456 2.26372 8.05363 2.28312 7.70558 2.32991C7.07779 2.41432 6.51099 2.59999 6.05552 3.05546C5.60005 3.51093 5.41438 4.07773 5.32997 4.70552C5.28318 5.05357 5.26377 5.45451 5.25573 5.90728C5.25199 5.93767 5.25006 5.96861 5.25006 6C5.25006 6.02377 5.25117 6.04728 5.25333 6.07048C5.25004 6.34503 5.25005 6.63761 5.25006 6.948V7.052C5.25005 7.36239 5.25004 7.65497 5.25333 7.92952C5.25117 7.95273 5.25006 7.97624 5.25006 8C5.25006 8.0314 5.25199 8.06234 5.25573 8.09272C5.26377 8.5455 5.28318 8.94643 5.32997 9.29448C5.41438 9.92228 5.60005 10.4891 6.05552 10.9445C6.51099 11.4 7.07779 11.5857 7.70558 11.6701C8.05363 11.7169 8.45456 11.7363 8.90734 11.7443C8.93772 11.7481 8.96867 11.75 9.00006 11.75C9.02383 11.75 9.04733 11.7489 9.07054 11.7467C9.34509 11.75 9.63767 11.75 9.94807 11.75H14.0521C14.3625 11.75 14.655 11.75 14.9296 11.7467C14.9528 11.7489 14.9763 11.75 15.0001 11.75C15.0315 11.75 15.0624 11.7481 15.0928 11.7443C15.5456 11.7363 15.9465 11.7169 16.2945 11.6701C16.9223 11.5857 17.4891 11.4 17.9446 10.9445C18.4001 10.4891 18.5857 9.92228 18.6701 9.29448C18.7169 8.94643 18.7363 8.5455 18.7444 8.09272C18.7481 8.06234 18.7501 8.0314 18.7501 8C18.7501 7.97624 18.749 7.95273 18.7468 7.92953C18.7501 7.65497 18.7501 7.36239 18.7501 7.052V6.94801C18.7501 6.63761 18.7501 6.34503 18.7468 6.07048C18.749 6.04728 18.7501 6.02377 18.7501 6C18.7501 5.96861 18.7481 5.93767 18.7444 5.90729C18.7363 5.45451 18.7169 5.05357 18.6701 4.70552C18.5857 4.07773 18.4001 3.51093 17.9446 3.05546C17.4891 2.59999 16.9223 2.41432 16.2945 2.32991C15.9465 2.28312 15.5456 2.26372 15.0928 2.25568C15.0624 2.25193 15.0315 2.25 15.0001 2.25C14.9763 2.25 14.9528 2.25111 14.9296 2.25327ZM15.8941 3.79396C16.122 4.39792 16.6021 4.8781 17.2061 5.10591C17.1996 5.03597 17.1921 4.96924 17.1835 4.90539C17.1215 4.44393 17.0143 4.24644 16.8839 4.11612C16.7536 3.9858 16.5561 3.87858 16.0947 3.81654C16.0308 3.80795 15.9641 3.80048 15.8941 3.79396ZM17.2061 8.89409C16.6021 9.12191 16.122 9.60208 15.8941 10.206C15.9641 10.1995 16.0308 10.1921 16.0947 10.1835C16.5561 10.1214 16.7536 10.0142 16.8839 9.88388C17.0143 9.75357 17.1215 9.55607 17.1835 9.09461C17.1921 9.03076 17.1996 8.96404 17.2061 8.89409ZM8.10597 10.206C7.87816 9.60208 7.39798 9.12191 6.79402 8.89409C6.80053 8.96404 6.80801 9.03076 6.8166 9.09461C6.87864 9.55607 6.98586 9.75357 7.11618 9.88389C7.24649 10.0142 7.44399 10.1214 7.90545 10.1835C7.9693 10.1921 8.03602 10.1995 8.10597 10.206ZM6.79402 5.10591C7.39798 4.8781 7.87816 4.39792 8.10597 3.79396C8.03602 3.80048 7.9693 3.80795 7.90545 3.81654C7.44399 3.87858 7.24649 3.9858 7.11618 4.11612C6.98586 4.24644 6.87864 4.44393 6.8166 4.90539C6.80801 4.96924 6.80053 5.03597 6.79402 5.10591ZM12.0001 6.75C11.862 6.75 11.7501 6.86193 11.7501 7C11.7501 7.13807 11.862 7.25 12.0001 7.25C12.1381 7.25 12.2501 7.13807 12.2501 7C12.2501 6.86193 12.1381 6.75 12.0001 6.75ZM10.2501 7C10.2501 6.0335 11.0336 5.25 12.0001 5.25C12.9666 5.25 13.7501 6.0335 13.7501 7C13.7501 7.9665 12.9666 8.75 12.0001 8.75C11.0336 8.75 10.2501 7.9665 10.2501 7ZM8.68397 14.4482C10.5498 14.0867 12.5471 14.1678 14.1633 15.1318C14.3903 15.2672 14.6031 15.4359 14.7888 15.6444C15.1646 16.0666 15.3588 16.5913 15.3679 17.1174C15.5592 16.994 15.7508 16.857 15.9454 16.71L17.7526 15.3448C18.6572 14.6615 19.9718 14.6614 20.8765 15.3445C21.7125 15.9757 22.0457 17.1085 21.4473 18.0677C21.022 18.7495 20.3815 19.6925 19.7296 20.2962C19.0707 20.9065 18.1329 21.4196 17.4236 21.762C16.5621 22.1778 15.6316 22.4077 14.7269 22.5541C12.8777 22.8535 10.9535 22.8077 9.12505 22.431C8.19064 22.2384 7.21961 22.1384 6.25999 22.1384H4.00006C3.58585 22.1384 3.25006 21.8026 3.25006 21.3884C3.25006 20.9742 3.58585 20.6384 4.00006 20.6384H6.25999C7.3221 20.6384 8.39454 20.749 9.42772 20.9618C11.0798 21.3022 12.8202 21.3432 14.4872 21.0734C15.3161 20.9392 16.0901 20.74 16.7715 20.4111C17.4549 20.0812 18.2233 19.6468 18.7104 19.1957C19.2029 18.7395 19.7541 17.9479 20.1747 17.2738C20.3016 17.0703 20.284 16.7767 19.9727 16.5416C19.6029 16.2624 19.0264 16.2625 18.6567 16.5417L16.8496 17.9069C16.1281 18.4518 15.2402 19.0349 14.1388 19.2106C14.0276 19.2283 13.9119 19.2445 13.7918 19.2588C13.7345 19.2692 13.6749 19.276 13.6133 19.2783C13.051 19.3342 12.3998 19.3472 11.6813 19.2793C11.2689 19.2404 10.9662 18.8745 11.0051 18.4621C11.0441 18.0497 11.41 17.747 11.8223 17.786C12.4498 17.8452 13.0127 17.8321 13.4903 17.7831C13.5 17.7821 13.5096 17.7811 13.5192 17.7801C13.5392 17.7685 13.5696 17.7474 13.6096 17.7125C13.9291 17.4336 13.9576 16.9667 13.6684 16.6418C13.5951 16.5595 13.5049 16.4856 13.3949 16.42C12.2138 15.7155 10.6363 15.5978 8.96927 15.9208C7.31174 16.2419 5.66497 16.9817 4.43392 17.8547C4.09604 18.0943 3.6279 18.0146 3.38828 17.6768C3.14867 17.3389 3.22833 16.8708 3.5662 16.6311C4.96457 15.6395 6.80866 14.8115 8.68397 14.4482Z" fill="#FFFFFF"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/X.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/X.svg
new file mode 100644
index 00000000..ae4a1468
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/X.svg
@@ -0,0 +1,3 @@
+<svg fill="#000000" width="20px" height="20px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg">
+<path d="M19.587 16.001l6.096 6.096c0.396 0.396 0.396 1.039 0 1.435l-2.151 2.151c-0.396 0.396-1.038 0.396-1.435 0l-6.097-6.096-6.097 6.096c-0.396 0.396-1.038 0.396-1.434 0l-2.152-2.151c-0.396-0.396-0.396-1.038 0-1.435l6.097-6.096-6.097-6.097c-0.396-0.396-0.396-1.039 0-1.435l2.153-2.151c0.396-0.396 1.038-0.396 1.434 0l6.096 6.097 6.097-6.097c0.396-0.396 1.038-0.396 1.435 0l2.151 2.152c0.396 0.396 0.396 1.038 0 1.435l-6.096 6.096z"></path>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/XRed.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/XRed.svg
new file mode 100644
index 00000000..812dac94
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/XRed.svg
@@ -0,0 +1,3 @@
+<svg fill="#FF1744" width="20px" height="20px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg">
+<path d="M19.587 16.001l6.096 6.096c0.396 0.396 0.396 1.039 0 1.435l-2.151 2.151c-0.396 0.396-1.038 0.396-1.435 0l-6.097-6.096-6.097 6.096c-0.396 0.396-1.038 0.396-1.434 0l-2.152-2.151c-0.396-0.396-0.396-1.038 0-1.435l6.097-6.096-6.097-6.097c-0.396-0.396-0.396-1.039 0-1.435l2.153-2.151c0.396-0.396 1.038-0.396 1.434 0l6.096 6.097 6.097-6.097c0.396-0.396 1.038-0.396 1.435 0l2.151 2.152c0.396 0.396 0.396 1.038 0 1.435l-6.096 6.096z"></path>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/dashboard.svg b/frontend/panaderia-interfaz/src/assets/DashboardAssets/dashboard.svg
new file mode 100644
index 00000000..53ca2207
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/dashboard.svg
@@ -0,0 +1,6 @@
+<svg width="25px" height="25px" viewBox="0 -0.5 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
+    <path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M9.918 10.0005H7.082C6.66587 9.99708 6.26541 10.1591 5.96873 10.4509C5.67204 10.7427 5.50343 11.1404 5.5 11.5565V17.4455C5.5077 18.3117 6.21584 19.0078 7.082 19.0005H9.918C10.3341 19.004 10.7346 18.842 11.0313 18.5502C11.328 18.2584 11.4966 17.8607 11.5 17.4445V11.5565C11.4966 11.1404 11.328 10.7427 11.0313 10.4509C10.7346 10.1591 10.3341 9.99708 9.918 10.0005Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+    <path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M9.918 4.0006H7.082C6.23326 3.97706 5.52559 4.64492 5.5 5.4936V6.5076C5.52559 7.35629 6.23326 8.02415 7.082 8.0006H9.918C10.7667 8.02415 11.4744 7.35629 11.5 6.5076V5.4936C11.4744 4.64492 10.7667 3.97706 9.918 4.0006Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+    <path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M15.082 13.0007H17.917C18.3333 13.0044 18.7340 12.8425 19.0309 12.5507C19.3278 12.2588 19.4966 11.8610 19.5 11.4447V5.55666C19.4966 5.14054 19.3280 4.74282 19.0313 4.45101C18.7346 4.15920 18.3341 3.99720 17.9180 4.00066H15.0820C14.6659 3.99720 14.2654 4.15920 13.9687 4.45101C13.6720 4.74282 13.5034 5.14054 13.5 5.55666V11.4447C13.5034 11.8608 13.6720 12.2585 13.9687 12.5503C14.2654 12.8421 14.6659 13.0041 15.0820 13.0007Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+    <path xmlns="http://www.w3.org/2000/svg" fill-rule="evenodd" clip-rule="evenodd" d="M15.082 19.0006H17.917C18.7661 19.0247 19.4744 18.3567 19.5 17.5076V16.4936C19.4744 15.6449 18.7667 14.9771 17.9180 15.0006H15.0820C14.2333 14.9771 13.5256 15.6449 13.5 16.4936V17.5066C13.5250 18.3557 14.2329 19.0241 15.0820 19.0006Z" stroke="#FFFFFF" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/DashboardAssets/index.ts b/frontend/panaderia-interfaz/src/assets/DashboardAssets/index.ts
new file mode 100644
index 00000000..924bf6b8
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/DashboardAssets/index.ts
@@ -0,0 +1,33 @@
+// Dashboard Assets - Barrel Export File
+export { default as AgregarIcon } from "./Agregar.svg";
+export { default as BorrarIcon } from "./Borrar.svg";
+export { default as CerrarIcon } from "./Cerrar.svg";
+export { default as CheckIcon } from "./Check.svg";
+export { default as ClientesIcon } from "./Clientes.svg";
+export { default as ComprasIcon } from "./Compras.svg";
+export { default as ConfigIcon } from "./Config.svg";
+export { default as DashboardIcon } from "./dashboard.svg";
+export { default as EditarIcon } from "./Editar.svg";
+export { default as FilledLeftArrowIcon } from "./FilledLeftArrow.svg";
+export { default as FiltroIcon } from "./Filtro.svg";
+export { default as ImportIcon } from "./Import.svg";
+export { default as IntermediosIcon } from "./Intermedios.svg";
+export { default as LeftIcon } from "./Left.svg";
+export { default as MateriaPrimaIcon } from "./MateriaPrima.svg";
+export { default as MenuIcon } from "./Menu.svg";
+export { default as NotificationIcon } from "./Notification.svg";
+export { default as PedidosIcon } from "./Pedidos.svg";
+export { default as PlussignIcon } from "./Plussign.svg";
+export { default as ProductionIcon } from "./Production.svg";
+export { default as ProductosIcon } from "./Productos.svg";
+export { default as PuntoVentaIcon } from "./PuntoVenta.svg";
+export { default as RecetasIcon } from "./Recetas.svg";
+export { default as ReportesIcon } from "./Reportes.svg";
+export { default as ReventaIcon } from "./Reventa.svg";
+export { default as RightIcon } from "./Right.svg";
+export { default as RightArrowIcon } from "./RightArrow.svg";
+export { default as SearchIcon } from "./Search.svg";
+export { default as UsuarioIcon } from "./Usuario.svg";
+export { default as VentaIcon } from "./Venta.svg";
+export { default as XIcon } from "./X.svg";
+export { default as XRedIcon } from "./XRed.svg";
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/emailicon.png b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/emailicon.png
new file mode 100644
index 00000000..08bed662
Binary files /dev/null and b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/emailicon.png differ
diff --git a/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/index.ts b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/index.ts
new file mode 100644
index 00000000..c544e323
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/index.ts
@@ -0,0 +1,4 @@
+// Login/Register Assets - Barrel Export File
+export { default as UserIcon } from "./usericon.png";
+export { default as EmailIcon } from "./emailicon.png";
+export { default as PasswordIcon } from "./passwordicon.png";
diff --git a/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/passwordicon.png b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/passwordicon.png
new file mode 100644
index 00000000..f8ff8e7e
Binary files /dev/null and b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/passwordicon.png differ
diff --git a/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/usericon.png b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/usericon.png
new file mode 100644
index 00000000..3ccff674
Binary files /dev/null and b/frontend/panaderia-interfaz/src/assets/LoginRegisterAssets/usericon.png differ
diff --git a/frontend/panaderia-interfaz/src/assets/doublespinner.svg b/frontend/panaderia-interfaz/src/assets/doublespinner.svg
new file mode 100644
index 00000000..56b8bbc7
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/doublespinner.svg
@@ -0,0 +1,5 @@
+<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 300 150'>
+    <path fill='none' stroke='#48CAE4' stroke-width='15' stroke-linecap='round' stroke-dasharray='300 385' stroke-dashoffset='0' d='M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z'>
+        <animate attributeName='stroke-dashoffset' calcMode='spline' dur='2' values='685;-685' keySplines='0 0 1 1' repeatCount='indefinite'></animate>
+    </path>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/index.ts b/frontend/panaderia-interfaz/src/assets/index.ts
new file mode 100644
index 00000000..0b72197f
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/index.ts
@@ -0,0 +1,4 @@
+// Main Assets - Barrel Export File
+export { default as TubeSpinner } from "./tubespinner.svg";
+export { default as TubeSpinnerWhite } from "./tubespinnerWhite.svg";
+export { default as DoubleSpinner } from "./doublespinner.svg";
diff --git a/frontend/panaderia-interfaz/src/assets/tubespinner.svg b/frontend/panaderia-interfaz/src/assets/tubespinner.svg
new file mode 100644
index 00000000..886de2e9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/tubespinner.svg
@@ -0,0 +1,9 @@
+﻿<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'>
+    <radialGradient id='a10' cx='.66' fx='.66' cy='.3125' fy='.3125' gradientTransform='scale(1.5)'>
+    <stop offset='0' stop-color='#0077B6'></stop><stop offset='.3' stop-color='#0077B6' stop-opacity='.9'></stop>
+    <stop offset='.6' stop-color='#0077B6' stop-opacity='.6'></stop><stop offset='.8' stop-color='#0077B6' stop-opacity='.3'></stop>
+    <stop offset='1' stop-color='#0077B6' stop-opacity='0'></stop></radialGradient>
+    <circle transform-origin='center' fill='none' stroke='url(#a10)' stroke-width='15' stroke-linecap='round' stroke-dasharray='200 1000' stroke-dashoffset='0' cx='100' cy='100' r='70'>
+    <animateTransform type='rotate' attributeName='transform' calcMode='spline' dur='2' values='360;0' keyTimes='0;1' keySplines='0 0 1 1' repeatCount='indefinite'></animateTransform></circle>
+    <circle transform-origin='center' fill='none' opacity='.2' stroke='#0077B6' stroke-width='15' stroke-linecap='round' cx='100' cy='100' r='70'></circle>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/assets/tubespinnerWhite.svg b/frontend/panaderia-interfaz/src/assets/tubespinnerWhite.svg
new file mode 100644
index 00000000..903182a9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/assets/tubespinnerWhite.svg
@@ -0,0 +1,9 @@
+﻿<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'>
+    <radialGradient id='a10' cx='.66' fx='.66' cy='.3125' fy='.3125' gradientTransform='scale(1.5)'>
+    <stop offset='0' stop-color='#FFFFFF'></stop><stop offset='.3' stop-color='#FFFFFF' stop-opacity='.9'></stop>
+    <stop offset='.6' stop-color='#FFFFFF' stop-opacity='.6'></stop><stop offset='.8' stop-color='#FFFFFF' stop-opacity='.3'></stop>
+    <stop offset='1' stop-color='#FFFFFF' stop-opacity='0'></stop></radialGradient>
+    <circle transform-origin='center' fill='none' stroke='url(#a10)' stroke-width='15' stroke-linecap='round' stroke-dasharray='200 1000' stroke-dashoffset='0' cx='100' cy='100' r='70'>
+    <animateTransform type='rotate' attributeName='transform' calcMode='spline' dur='2' values='360;0' keyTimes='0;1' keySplines='0 0 1 1' repeatCount='indefinite'></animateTransform></circle>
+    <circle transform-origin='center' fill='none' opacity='.2' stroke='#FFFFFF' stroke-width='15' stroke-linecap='round' cx='100' cy='100' r='70'></circle>
+</svg>
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/components/AuthProvider.jsx b/frontend/panaderia-interfaz/src/components/AuthProvider.jsx
new file mode 100644
index 00000000..bff238b8
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/AuthProvider.jsx
@@ -0,0 +1,134 @@
+import { createContext, useContext } from "react";
+import { useState, useEffect, useLayoutEffect } from "react";
+import { Navigate } from "react-router-dom";
+import { jwtDecode } from "jwt-decode";
+import { apiClient } from "../apiClient";
+
+const AuthContext = createContext(undefined);
+
+export const useAuth = () => {
+  const context = useContext(AuthContext);
+  if (context === undefined) {
+    throw new Error("useAuth must be used within an AuthProvider");
+  }
+  return context;
+};
+
+export const AuthProvider = ({ children }) => {
+  const [accessToken, setAccessToken] = useState(null);
+  const [isLoading, setIsLoading] = useState(true);
+
+  useEffect(() => {
+    const fetchAccessToken = async () => {
+      try {
+        const response = await apiClient.post("/api/token/");
+        setAccessToken(response.data.access);
+      } catch {
+        setAccessToken(null);
+      } finally {
+        setIsLoading(false);
+      }
+    };
+    fetchAccessToken();
+  }, []);
+
+  // Interceptor para la solicitud
+  useLayoutEffect(() => {
+    const authInterceptor = apiClient.interceptors.request.use((config) => {
+      config.headers.Authorization =
+        !config._retry && accessToken
+          ? `Bearer ${accessToken}`
+          : config.headers.Authorization;
+      return config;
+    });
+
+    return () => {
+      apiClient.interceptors.request.eject(authInterceptor);
+    };
+  }, [accessToken]);
+
+  useLayoutEffect(() => {
+    const refreshInterceptor = apiClient.interceptors.response.use(
+      (response) => {
+        return response;
+      },
+      async (error) => {
+        const originalRequest = error.config;
+
+        if (error.response?.status === 401 && !originalRequest._retry) {
+          try {
+            const response = await apiClient.post("/api/token/refresh/");
+            setAccessToken(response.data.access);
+            originalRequest.headers.Authorization = `Bearer ${response.data.access}`;
+            originalRequest._retry = true;
+            return apiClient(originalRequest);
+          } catch {
+            setAccessToken(null);
+          }
+        }
+        return Promise.reject(error);
+      },
+    );
+
+    return () => {
+      apiClient.interceptors.response.eject(refreshInterceptor);
+    };
+  }, []);
+
+  const login = (token) => {
+    setAccessToken(token);
+  };
+
+  const logout = () => {
+    setAccessToken(null);
+  };
+
+  const isAuthenticated = () => {
+    if (!accessToken) return false;
+
+    try {
+      const decoded = jwtDecode(accessToken);
+      return decoded.exp > Date.now() / 1000;
+    } catch {
+      return false;
+    }
+  };
+
+  const value = {
+    accessToken,
+    isLoading,
+    login,
+    logout,
+    isAuthenticated,
+  };
+
+  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
+};
+
+// Higher-Order Component for protecting routes
+export const withAuth = (WrappedComponent) => {
+  return (props) => {
+    const { accessToken, isLoading } = useAuth();
+
+    if (isLoading) {
+      return <div>Loading...</div>; // Or your loading component
+    }
+
+    if (!accessToken) {
+      return <Navigate to="/login" replace />;
+    }
+
+    return <WrappedComponent {...props} />;
+  };
+};
+
+// Custom hook for components that need auth checks
+export const useRequireAuth = () => {
+  const { accessToken, isAuthenticated } = useAuth();
+
+  if (!accessToken || !isAuthenticated()) {
+    throw new Error("Authentication required");
+  }
+
+  return accessToken;
+};
diff --git a/frontend/panaderia-interfaz/src/components/Button.tsx b/frontend/panaderia-interfaz/src/components/Button.tsx
new file mode 100644
index 00000000..204f685a
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Button.tsx
@@ -0,0 +1,28 @@
+export default function Button({
+  children,
+  type,
+  onClick,
+}: {
+  children: React.ReactNode;
+  type: "submit" | "cancel" | "delete" | "edit" | "close" | "add";
+  onClick: () => void;
+  disabled?: boolean;
+}) {
+  return (
+    <button
+      onClick={onClick}
+      type="submit"
+      className={`
+        ${type === "submit" ? "bg-blue-500 text-white hover:bg-blue-600 border-none rounded-md px-4 py-2" : ""} 
+        ${type === "cancel" ? "text-black hover:bg-gray-100 border border-gray-300 rounded-md px-4 py-2" : ""}
+        ${type === "delete" ? "bg-red-500 text-white hover:bg-red-600 border-none rounded-md px-4 py-2" : ""}
+        ${type === "edit" ? "bg-blue-500 text-white hover:bg-blue-600 border-none rounded-md px-4 py-2" : ""}
+        ${type == "add" ? "bg-green-600 text-white hover:bg-green-700 border-none rounded-md px-4 py-2" : ""} 
+        ${type === "close" ? "border rounded-full p-2 border-gray-300" : ""}
+
+        font-semibold cursor-pointer w-fit`}
+    >
+      {children}
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/DetailFieldValue.tsx b/frontend/panaderia-interfaz/src/components/DetailFieldValue.tsx
new file mode 100644
index 00000000..431a9147
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/DetailFieldValue.tsx
@@ -0,0 +1,15 @@
+import { type ReactNode } from "react";
+
+export const DetailFieldValue = ({
+  extraClass,
+  children,
+}: {
+  extraClass?: string;
+  children: ReactNode;
+}) => {
+  return (
+    <div className={`text-sm text-black font-[Roboto] font-bold ${extraClass}`}>
+      {children}
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/components/DetailsField.tsx b/frontend/panaderia-interfaz/src/components/DetailsField.tsx
new file mode 100644
index 00000000..f5781fae
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/DetailsField.tsx
@@ -0,0 +1,15 @@
+import { type ReactNode } from "react";
+
+export const DetailsField = ({
+  extraClass,
+  children,
+}: {
+  extraClass?: string;
+  children: ReactNode;
+}) => {
+  return (
+    <div className={`text-sm text-gray-500 font-[Roboto] ${extraClass}`}>
+      {children}
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/components/ImportCSV.tsx b/frontend/panaderia-interfaz/src/components/ImportCSV.tsx
new file mode 100644
index 00000000..b77f6cab
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/ImportCSV.tsx
@@ -0,0 +1,10 @@
+import { ImportIcon } from "@/assets/DashboardAssets";
+
+export default function ImportCSV() {
+  return (
+    <button className="flex items-center gap-2 bg-blue-500 font-semibold font-[Roboto] shadow-md text-white p-2 rounded-md hover:bg-blue-600 cursor-pointer">
+      <img src={ImportIcon} alt="Import" />
+      Importar CSV
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderBar.tsx b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderBar.tsx
new file mode 100644
index 00000000..122393a6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderBar.tsx
@@ -0,0 +1,19 @@
+import HeaderButton from "./HeaderButton";
+import HeaderPlusButton from "./HeaderPlusButton";
+import HeaderUserButton from "./HeaderUserButton";
+import { NotificationIcon, ConfigIcon } from "@/assets/DashboardAssets";
+
+export default function HeaderBar() {
+  return (
+    <div className="fixed flex font-[Roboto] items-center top-0 py-3 shadow-md bg-white z-10 left-(--sidebar-width) w-[calc(100%-var(--sidebar-width))] max-h-(--header-height)">
+      <div className="flex-1 flex items-center justify-center">
+        <HeaderPlusButton />
+      </div>
+      <div className="flex items-center justify-end gap-2 pr-8 min-w-[220px]">
+        <HeaderUserButton />
+        <HeaderButton icon={NotificationIcon} />
+        <HeaderButton icon={ConfigIcon} />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderButton.tsx b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderButton.tsx
new file mode 100644
index 00000000..cc35721b
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderButton.tsx
@@ -0,0 +1,7 @@
+export default function HeaderButton({ icon }: { icon: string }) {
+  return (
+    <div className="flex items-center justify-center cursor-pointer hover:bg-gray-200 rounded-full p-2 transition-colors duration-200 w-10 h-10">
+      <img src={icon} alt={icon} />
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderPlusButton.tsx b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderPlusButton.tsx
new file mode 100644
index 00000000..d9d8d270
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderPlusButton.tsx
@@ -0,0 +1,12 @@
+import Agregar from "@/assets/DashboardAssets/Agregar.svg";
+
+export default function HeaderPlusButton() {
+  return (
+    <div className="flex items-center gap-1 cursor-pointer hover:bg-gray-200 rounded-full p-2 transition-colors duration-200">
+      <div className="text-md font-semibold">Agregar item</div>
+      <div className="flex items-center cursor-pointer">
+        <img src={Agregar} alt="Agregar" />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderUserButton.tsx b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderUserButton.tsx
new file mode 100644
index 00000000..fb1b1d5d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/HeaderBar/HeaderUserButton.tsx
@@ -0,0 +1,17 @@
+import { useAuth } from "@/context/AuthContext";
+import { UsuarioIcon } from "@/assets/DashboardAssets";
+
+export default function HeaderUserButton() {
+  const { user } = useAuth();
+
+  return (
+    <div className="flex items-center gap-2 cursor-pointer hover:bg-gray-200 rounded-full p-2 transition-colors duration-200">
+      <div className="text-md font-semibold">
+        {user?.full_name || "Usuario"}
+      </div>
+      <div className="flex items-center cursor-pointer">
+        <img src={UsuarioIcon} alt="Usuario" />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidbarTitle.tsx b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidbarTitle.tsx
new file mode 100644
index 00000000..b22d0c70
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidbarTitle.tsx
@@ -0,0 +1,9 @@
+export default function SidbarTitle() {
+  return (
+    <div className="text-5xl text-white px-4 py-8">
+      <div className="font-[Sevillana] font-bold cursor-pointer hover:text-gray-300">
+        Ordenado
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/Sidebar/Sidebar.tsx b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/Sidebar.tsx
new file mode 100644
index 00000000..d9cdf116
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/Sidebar.tsx
@@ -0,0 +1,133 @@
+import SidbarTitle from "./SidbarTitle";
+import SidebarCard from "./SidebarCard";
+import { useRef } from "react";
+import SidebarDropdownCard from "./SidebarDropdownCard";
+import { useAppContext } from "@/context/AppContext";
+import {
+  DashboardIcon,
+  MateriaPrimaIcon,
+  ProductosIcon,
+  IntermediosIcon,
+  ReventaIcon,
+  VentaIcon,
+  ClientesIcon,
+  PedidosIcon,
+  PuntoVentaIcon,
+  RecetasIcon,
+  ProductionIcon,
+  ComprasIcon,
+  ReportesIcon,
+} from "@/assets/DashboardAssets";
+
+export default function Sidebar() {
+  const ref = useRef<HTMLDivElement | null>(null);
+  const { setSelectedModule } = useAppContext();
+  function handleClick(e: React.MouseEvent<HTMLDivElement>) {
+    if (ref.current) {
+      ref.current.classList.toggle("bg-white/20");
+    }
+    ref.current = e.currentTarget;
+    ref.current.classList.toggle("bg-white/20");
+    setSelectedModule(e.currentTarget.id);
+  }
+
+  return (
+    <>
+      <div
+        className={`flex flex-col h-screen bg-blue-900 w-(--sidebar-width) fixed top-0 left-0`}
+      >
+        <SidbarTitle />
+        <div className="flex flex-col justify-between h-full p-2 overflow-y-auto">
+          <div className="flex flex-col gap-2">
+            <SidebarCard
+              icon={DashboardIcon}
+              onclick={handleClick}
+              link="/dashboard"
+              id="dashboard"
+            >
+              Dashboard
+            </SidebarCard>
+            <SidebarCard
+              icon={MateriaPrimaIcon}
+              onclick={handleClick}
+              link="/dashboard/materia-prima"
+              id="materia-prima"
+            >
+              Materia Prima
+            </SidebarCard>
+
+            <SidebarDropdownCard
+              icon={ProductosIcon}
+              elements={[
+                {
+                  url: IntermediosIcon,
+                  title: "Intermedios",
+                  id: "intermedios",
+                  link: "/dashboard/productos-intermedios",
+                },
+                {
+                  url: ReventaIcon,
+                  title: "Reventa",
+                  id: "reventa",
+                },
+              ]}
+              onclick={handleClick}
+            >
+              Productos
+            </SidebarDropdownCard>
+
+            <SidebarDropdownCard
+              icon={VentaIcon}
+              elements={[
+                {
+                  url: ClientesIcon,
+                  title: "Clientes",
+                  id: "clientes",
+                },
+                {
+                  url: PedidosIcon,
+                  title: "Pedidos",
+                  id: "pedidos",
+                },
+                {
+                  url: PuntoVentaIcon,
+                  title: "Punto de Venta",
+                  id: "punto-venta",
+                },
+              ]}
+              onclick={handleClick}
+            >
+              Ventas
+            </SidebarDropdownCard>
+
+            <SidebarCard 
+            icon={RecetasIcon} 
+            onclick={handleClick} 
+            id="recetas"
+            link="/dashboard/recetas"
+            >
+              Recetas
+            </SidebarCard>
+            <SidebarCard
+              icon={ProductionIcon}
+              onclick={handleClick}
+              id="produccion"
+            >
+              Producción
+            </SidebarCard>
+            <SidebarCard icon={ComprasIcon} onclick={handleClick} id="compras">
+              Compras
+            </SidebarCard>
+            <SidebarCard
+              icon={ReportesIcon}
+              onclick={handleClick}
+              id="reportes"
+            >
+              Reportes
+            </SidebarCard>
+          </div>
+        </div>
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarCard.tsx b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarCard.tsx
new file mode 100644
index 00000000..163fb964
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarCard.tsx
@@ -0,0 +1,32 @@
+import { useNavigate } from "react-router-dom";
+import type { SidebarCardProps } from "@/features/MateriaPrima/types/types";
+import { useAppContext } from "@/context/AppContext";
+export default function SidebarCard({
+  children,
+  icon,
+  onclick,
+  link,
+  id,
+}: SidebarCardProps) {
+  const navigate = useNavigate();
+  const { selectedModule } = useAppContext();
+  function handleClick(e: React.MouseEvent<HTMLDivElement>) {
+    if (link) {
+      navigate(link);
+    }
+    onclick(e);
+  }
+
+  return (
+    <div
+      className={`flex items-center gap-2.5 p-2 hover:bg-white/20 transition-colors duration-200 ease-in-out rounded-md cursor-pointer ${
+        id === selectedModule ? "bg-white/20" : ""
+      }`}
+      onClick={handleClick}
+      id={id}
+    >
+      <img src={icon} alt={icon} />
+      <div className="font-[Roboto] text-md text-white ">{children}</div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarDropdownCard.tsx b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarDropdownCard.tsx
new file mode 100644
index 00000000..7c961154
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Layout/Sidebar/SidebarDropdownCard.tsx
@@ -0,0 +1,62 @@
+import { useState } from "react";
+import SidebarCard from "./SidebarCard";
+import { useAppContext } from "@/context/AppContext";
+import { RightArrowIcon } from "@/assets/DashboardAssets";
+
+export default function SidebarDropdownCard({
+  children,
+  icon,
+  onclick,
+  elements,
+}: {
+  children: React.ReactNode;
+  icon: string;
+  onclick: (e: React.MouseEvent<HTMLDivElement>) => void;
+  elements: { url: string; title: string; id: string; link?: string }[];
+}) {
+  const [isOpen, setIsOpen] = useState(false);
+  const { setSelectedModule } = useAppContext();
+  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {
+    setIsOpen((prev) => !prev);
+    setSelectedModule(e.currentTarget.id);
+    onclick(e);
+  };
+
+  return (
+    <>
+      <div
+        className="flex items-center justify-between gap-2.5 p-2 hover:bg-white/20 transition-colors duration-200 ease-in-out rounded-md cursor-pointer"
+        onClick={handleClick}
+      >
+        <div className="flex items-center gap-2.5">
+          <img src={icon} alt={icon} />
+          <div className="font-[Roboto] text-md text-white">{children}</div>
+        </div>
+        <img
+          className={`transition-transform duration-200 ease-in-out ${isOpen ? "rotate-90" : ""}`}
+          src={RightArrowIcon}
+          alt="RightArrow"
+        />
+      </div>
+      <div
+        className={`overflow-hidden transition-[max-height, opacity] duration-300 ease-in-out ${isOpen ? "max-h-[200px] opacity-100" : "max-h-0 opacity-0"}`}
+      >
+        <div className="flex flex-col gap-2 pl-4.5">
+          {elements.map((el, index) => {
+            return (
+              <SidebarCard
+                key={index}
+                icon={el.url}
+                onclick={() => handleClick}
+                id={el.id}
+                link={el.link}
+              >
+                {el.title}
+              </SidebarCard>
+            );
+          })}
+        </div>
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/NewButton.tsx b/frontend/panaderia-interfaz/src/components/NewButton.tsx
new file mode 100644
index 00000000..4794d0cc
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/NewButton.tsx
@@ -0,0 +1,13 @@
+import { PlussignIcon } from "@/assets/DashboardAssets";
+
+export default function NewButton({ onClick }: { onClick: () => void }) {
+  return (
+    <button
+      className="flex items-center shadow-md gap-2 bg-blue-500 font-semibold font-[Roboto] text-white p-2 rounded-md hover:bg-blue-600 cursor-pointer"
+      onClick={onClick}
+    >
+      <img src={PlussignIcon} alt="Nuevo" />
+      Nuevo
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/Title.tsx b/frontend/panaderia-interfaz/src/components/Title.tsx
new file mode 100644
index 00000000..ef545d11
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/Title.tsx
@@ -0,0 +1,13 @@
+export default function Title({
+  extraClass,
+  children,
+}: {
+  extraClass?: string;
+  children: React.ReactNode;
+}) {
+  return (
+    <h2 className={`text-2xl font-semibold font-[Roboto] ${extraClass}`}>
+      {children}
+    </h2>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/components/TitleDetails.tsx b/frontend/panaderia-interfaz/src/components/TitleDetails.tsx
new file mode 100644
index 00000000..7422cd94
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/components/TitleDetails.tsx
@@ -0,0 +1,7 @@
+export const TitleDetails = ({children}: {children: React.ReactNode}) => {
+  return (
+    <h2 className="text-xl font-semibold font-[Roboto] text-blue-600 border-b border-gray-300 pb-2">
+      {children}
+    </h2>
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/context/AppContext.tsx b/frontend/panaderia-interfaz/src/context/AppContext.tsx
new file mode 100644
index 00000000..d7c3bc35
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/context/AppContext.tsx
@@ -0,0 +1,48 @@
+import { createContext, useContext, useState } from "react";
+import { type childrenProp } from "../features/MateriaPrima/types/types";
+
+type AppContextType = {
+  // Global UI state
+  isSidebarOpen: boolean;
+  setIsSidebarOpen: (value: boolean) => void;
+  // Global loading state
+  isGlobalLoading: boolean;
+  setIsGlobalLoading: (value: boolean) => void;
+  // Global error state
+  globalError: string | null;
+  setGlobalError: (value: string | null) => void;
+  // Selected module
+  selectedModule: string | null;
+  setSelectedModule: (value: string | null) => void;
+};
+
+const AppContextProvider = createContext<AppContextType | null>(null);
+
+export function AppProvider({ children }: childrenProp) {
+  const [isSidebarOpen, setIsSidebarOpen] = useState(true);
+  const [isGlobalLoading, setIsGlobalLoading] = useState(false);
+  const [globalError, setGlobalError] = useState<string | null>(null);
+  const [selectedModule, setSelectedModule] = useState<string | null>(null);
+  return (
+    <AppContextProvider.Provider
+      value={{
+        isSidebarOpen,
+        setIsSidebarOpen,
+        isGlobalLoading,
+        setIsGlobalLoading,
+        globalError,
+        setGlobalError,
+        selectedModule,
+        setSelectedModule,
+      }}
+    >
+      {children}
+    </AppContextProvider.Provider>
+  );
+}
+
+export function useAppContext() {
+  const context = useContext(AppContextProvider);
+  if (!context) throw new Error("Component must be within AppProvider");
+  return context;
+}
diff --git a/frontend/panaderia-interfaz/src/context/AuthContext.tsx b/frontend/panaderia-interfaz/src/context/AuthContext.tsx
new file mode 100644
index 00000000..eca3814e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/context/AuthContext.tsx
@@ -0,0 +1,238 @@
+import React, {
+  createContext,
+  useContext,
+  useState,
+  useEffect,
+  useLayoutEffect,
+  useCallback,
+} from "react";
+import { useNavigate, Navigate } from "react-router-dom";
+import { jwtDecode } from "jwt-decode";
+import apiClient from "../api/client";
+import type { AxiosError, InternalAxiosRequestConfig } from "axios";
+import { DoubleSpinner } from "@/assets";
+
+// Extend the axios config type to include our custom _retry property
+interface CustomAxiosRequestConfig extends InternalAxiosRequestConfig {
+  _retry?: boolean;
+}
+
+interface User {
+  id: number;
+  username: string;
+  email: string;
+  full_name: string;
+  rol: string;
+}
+
+interface AuthContextType {
+  user: User | null;
+  accessToken: string | null;
+  isLoading: boolean;
+  isAuthenticated: boolean;
+  login: (credentials: { username: string; password: string }) => Promise<void>;
+  logout: () => Promise<void>; // Updated to async
+  refreshToken: () => Promise<string | null>; // Updated return type
+}
+
+const AuthContext = createContext<AuthContextType | undefined>(undefined);
+
+export const useAuth = () => {
+  const context = useContext(AuthContext);
+  if (context === undefined) {
+    throw new Error("useAuth must be used within an AuthProvider");
+  }
+  return context;
+};
+
+export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({
+  children,
+}) => {
+  const [user, setUser] = useState<User | null>(null);
+  const [accessToken, setAccessToken] = useState<string | null>(null);
+  const [isLoading, setIsLoading] = useState(true);
+  const navigate = useNavigate();
+
+  // Check if user is authenticated
+  const isAuthenticated = useCallback(() => {
+    if (!accessToken) return false;
+
+    try {
+      const decoded = jwtDecode(accessToken);
+      return decoded.exp! > Date.now() / 1000;
+    } catch {
+      return false;
+    }
+  }, [accessToken]);
+
+  const clearAuth = useCallback(() => {
+    setAccessToken(null);
+    setUser(null);
+  }, []);
+
+  // Helper function for logout cleanup
+  const clearAuthState = useCallback(async () => {
+    // Try to clear server-side cookie, but don't block on failure
+    apiClient
+      .post("/api/logout/")
+      .catch((error) => console.error("Logout request failed:", error));
+
+    // Always clear local state
+    clearAuth();
+    navigate("/login");
+  }, [navigate, clearAuth]);
+
+  // Update refresh function with debugging
+  const refreshToken = useCallback(async (): Promise<string | null> => {
+    try {
+      const response = await apiClient.post("/api/token/refresh/");
+      const newAccessToken = response.data.access;
+      console.log("New access token:", newAccessToken);
+
+      setAccessToken(newAccessToken);
+      return newAccessToken; // Return the new token
+    } catch (error) {
+      console.error(
+        "Token refresh failed:",
+        (error as AxiosError).response?.data,
+      );
+      clearAuth();
+      return null;
+    }
+  }, [clearAuth]);
+
+  // Login function
+  const login = useCallback(
+    async (credentials: { username: string; password: string }) => {
+      try {
+        setIsLoading(true);
+        const response = await apiClient.post("/api/token/", credentials);
+
+        const { access, userData } = response.data; // Note: userData, not user
+
+        setAccessToken(access);
+        setUser(userData);
+
+        navigate("/dashboard");
+      } catch (error) {
+        const axiosError = error as AxiosError<{ detail?: string }>;
+        console.error("Error response:", axiosError.response?.data);
+        throw new Error(axiosError.response?.data?.detail || "Login failed");
+      } finally {
+        setIsLoading(false);
+      }
+    },
+    [navigate],
+  );
+
+  // Logout function
+  const logout = useCallback(async () => {
+    await clearAuthState();
+  }, [clearAuthState]);
+
+  // Initialize auth state on app start
+  useEffect(() => {
+    const initializeAuth = async () => {
+      try {
+        await refreshToken();
+      } catch {
+        setAccessToken(null);
+        setUser(null);
+      } finally {
+        setIsLoading(false);
+      }
+    };
+
+    initializeAuth();
+  }, [refreshToken]);
+
+  // Setup axios interceptors
+  useLayoutEffect(() => {
+    // Request interceptor to add auth header
+    const requestInterceptor = apiClient.interceptors.request.use(
+      (config: CustomAxiosRequestConfig) => {
+        if (accessToken && !config._retry) {
+          config.headers.Authorization = `Bearer ${accessToken}`;
+        }
+        return config;
+      },
+      (error) => Promise.reject(error),
+    );
+
+    // Response interceptor to handle token refresh
+    const responseInterceptor = apiClient.interceptors.response.use(
+      (response) => response,
+      async (error) => {
+        const originalRequest = error.config as CustomAxiosRequestConfig;
+
+        if (
+          error.response?.status === 401 &&
+          !originalRequest._retry &&
+          accessToken
+        ) {
+          originalRequest._retry = true;
+
+          const newToken = await refreshToken(); // Get the new token directly
+          if (newToken) {
+            originalRequest.headers.Authorization = `Bearer ${newToken}`;
+            return apiClient(originalRequest);
+          }
+        }
+
+        return Promise.reject(error);
+      },
+    );
+
+    // Cleanup interceptors
+    return () => {
+      apiClient.interceptors.request.eject(requestInterceptor);
+      apiClient.interceptors.response.eject(responseInterceptor);
+    };
+  }, [accessToken, refreshToken]);
+
+  const value: AuthContextType = {
+    user,
+    accessToken,
+    isLoading,
+    isAuthenticated: isAuthenticated(),
+    login,
+    logout,
+    refreshToken,
+  };
+
+  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
+};
+
+// HOC for protecting routes
+export const withAuth = <P extends object>(
+  WrappedComponent: React.ComponentType<P>,
+): React.FC<P> => {
+  return (props: P) => {
+    const { isAuthenticated, isLoading } = useAuth();
+
+    if (isLoading) {
+      return (
+        <div className="flex items-center justify-center h-screen">
+          <img src={DoubleSpinner} alt="Loading" className="size-40" />
+        </div>
+      );
+    }
+
+    if (!isAuthenticated) {
+      return <Navigate to="/login" replace />;
+    }
+
+    return <WrappedComponent {...props} />;
+  };
+};
+
+// Hook for components that require authentication
+export const useRequireAuth = () => {
+  const { isAuthenticated, user } = useAuth();
+
+  if (!isAuthenticated) {
+    throw new Error("Authentication required");
+  }
+
+  return user;
+};
diff --git a/frontend/panaderia-interfaz/src/context/MateriaPrimaContext.tsx b/frontend/panaderia-interfaz/src/context/MateriaPrimaContext.tsx
new file mode 100644
index 00000000..0ca20429
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/context/MateriaPrimaContext.tsx
@@ -0,0 +1,172 @@
+import { createContext, useContext, useState, useRef } from "react";
+import {
+  type childrenProp,
+  type LoteMateriaPrimaFormResponse,
+  type MateriaPrimaListServer,
+  type MateriaPrimaList,
+  type CategoriaMateriaPrima,
+  type UnidadMedida,
+} from "../features/MateriaPrima/types/types";
+
+type MateriaPrimaContextType = {
+  showMateriaprimaForm: boolean;
+  setShowMateriaprimaForm: (value: boolean) => void;
+  showMateriaprimaDetalles: boolean;
+  setShowMateriaprimaDetalles: (value: boolean) => void;
+  materiaprimaDetalles: MateriaPrimaListServer | null;
+  setMateriaprimaDetalles: (value: MateriaPrimaListServer | null) => void;
+  materiaprimaId: number | null;
+  setMateriaprimaId: (value: number | null) => void;
+  registroDelete: boolean | null;
+  setRegistroDelete: (value: boolean | null) => void;
+  updateRegistro: boolean | null;
+  setUpdateRegistro: (value: boolean | null) => void;
+  lotesForm: LoteMateriaPrimaFormResponse[];
+  setLotesForm: (value: LoteMateriaPrimaFormResponse[]) => void;
+  showLotesForm: boolean;
+  setShowLotesForm: (value: boolean) => void;
+  lotesMateriaPrimaDetalles: LoteMateriaPrimaFormResponse | null;
+  setLotesMateriaPrimaDetalles: (
+    value: LoteMateriaPrimaFormResponse | null,
+  ) => void;
+  showLotesMateriaPrimaDetalles: boolean;
+  setShowLotesMateriaPrimaDetalles: (value: boolean) => void;
+  listaMateriaPrimaCached: MateriaPrimaList[];
+  setListaMateriaPrimaCached: (value: MateriaPrimaList[]) => void;
+  listaMateriaPrimaFilteredInputSearch: MateriaPrimaList[];
+  setListaMateriaPrimaFilteredInputSearch: (value: MateriaPrimaList[]) => void;
+  listaMateriaPrimaFiltered: MateriaPrimaList[];
+  setListaMateriaPrimaFiltered: (value: MateriaPrimaList[]) => void;
+  filteredApplied: boolean;
+  setFilteredApplied: (value: boolean) => void;
+  searchInputRef: React.RefObject<HTMLInputElement | null>;
+  MPFilteredInputSearchApplied: boolean;
+  setMPFilteredInputSearchApplied: (value: boolean) => void;
+  inputfilterDoubleApplied: boolean | null;
+  setInputfilterDoubleApplied: (value: boolean | null) => void;
+  isLoadingDetalles: boolean;
+  setIsLoadingDetalles: (value: boolean) => void;
+  isLoadingList: boolean;
+  setIsLoadingList: (value: boolean) => void;
+  shouldRefreshList: boolean;
+  setShouldRefreshList: (value: boolean) => void;
+  categoriasMateriaPrima: CategoriaMateriaPrima[];
+  setCategoriasMateriaPrima: (value: CategoriaMateriaPrima[]) => void;
+  unidadesMedida: UnidadMedida[];
+  setUnidadesMedida: (value: UnidadMedida[]) => void;
+};
+
+const MateriaPrimaContextProvider =
+  createContext<MateriaPrimaContextType | null>(null);
+
+export function MateriaPrimaProvider({ children }: childrenProp) {
+  const [categoriasMateriaPrima, setCategoriasMateriaPrima] = useState<
+    CategoriaMateriaPrima[]
+  >([]);
+  const [unidadesMedida, setUnidadesMedida] = useState<UnidadMedida[]>([]);
+
+  const [showMateriaprimaForm, setShowMateriaprimaForm] = useState(false);
+  const [showMateriaprimaDetalles, setShowMateriaprimaDetalles] =
+    useState(false);
+  const [showLotesForm, setShowLotesForm] = useState(false);
+  const [showLotesMateriaPrimaDetalles, setShowLotesMateriaPrimaDetalles] =
+    useState(false);
+
+  const [listaMateriaPrimaCached, setListaMateriaPrimaCached] = useState<
+    MateriaPrimaList[]
+  >([]);
+  const [listaMateriaPrimaFiltered, setListaMateriaPrimaFiltered] = useState<
+    MateriaPrimaList[]
+  >([]);
+  const [filteredApplied, setFilteredApplied] = useState<boolean>(false);
+
+  const [
+    listaMateriaPrimaFilteredInputSearch,
+    setListaMateriaPrimaFilteredInputSearch,
+  ] = useState<MateriaPrimaList[]>([]);
+  const [MPFilteredInputSearchApplied, setMPFilteredInputSearchApplied] =
+    useState<boolean>(false);
+
+  const [inputfilterDoubleApplied, setInputfilterDoubleApplied] = useState<
+    boolean | null
+  >(null);
+
+  const [materiaprimaDetalles, setMateriaprimaDetalles] =
+    useState<MateriaPrimaListServer | null>(null);
+  const [materiaprimaId, setMateriaprimaId] = useState<number | null>(null);
+
+  const [registroDelete, setRegistroDelete] = useState<boolean | null>(null);
+  const [updateRegistro, setUpdateRegistro] = useState<boolean | null>(null);
+
+  const [lotesForm, setLotesForm] = useState<LoteMateriaPrimaFormResponse[]>(
+    [],
+  );
+  const [lotesMateriaPrimaDetalles, setLotesMateriaPrimaDetalles] =
+    useState<LoteMateriaPrimaFormResponse | null>(null);
+
+  const searchInputRef = useRef<HTMLInputElement | null>(null);
+
+  const [isLoadingDetalles, setIsLoadingDetalles] = useState<boolean>(false);
+  const [isLoadingList, setIsLoadingList] = useState<boolean>(false);
+
+  const [shouldRefreshList, setShouldRefreshList] = useState<boolean>(false);
+
+  return (
+    <MateriaPrimaContextProvider.Provider
+      value={{
+        showMateriaprimaForm,
+        setShowMateriaprimaForm,
+        showMateriaprimaDetalles,
+        setShowMateriaprimaDetalles,
+        materiaprimaDetalles,
+        setMateriaprimaDetalles,
+        materiaprimaId,
+        setMateriaprimaId,
+        registroDelete,
+        setRegistroDelete,
+        updateRegistro,
+        setUpdateRegistro,
+        showLotesForm,
+        setShowLotesForm,
+        lotesForm,
+        setLotesForm,
+        lotesMateriaPrimaDetalles,
+        setLotesMateriaPrimaDetalles,
+        showLotesMateriaPrimaDetalles,
+        setShowLotesMateriaPrimaDetalles,
+        listaMateriaPrimaCached,
+        setListaMateriaPrimaCached,
+        listaMateriaPrimaFilteredInputSearch,
+        setListaMateriaPrimaFilteredInputSearch,
+        listaMateriaPrimaFiltered,
+        setListaMateriaPrimaFiltered,
+        filteredApplied,
+        setFilteredApplied,
+        searchInputRef,
+        MPFilteredInputSearchApplied,
+        setMPFilteredInputSearchApplied,
+        inputfilterDoubleApplied,
+        setInputfilterDoubleApplied,
+        isLoadingDetalles,
+        setIsLoadingDetalles,
+        isLoadingList,
+        setIsLoadingList,
+        shouldRefreshList,
+        setShouldRefreshList,
+        categoriasMateriaPrima,
+        setCategoriasMateriaPrima,
+        unidadesMedida,
+        setUnidadesMedida,
+      }}
+    >
+      {children}
+    </MateriaPrimaContextProvider.Provider>
+  );
+}
+
+export function useMateriaPrimaContext() {
+  const context = useContext(MateriaPrimaContextProvider);
+  if (!context)
+    throw new Error("Component must be within MateriaPrimaProvider");
+  return context;
+}
diff --git a/frontend/panaderia-interfaz/src/context/ProductosIntermediosContext.tsx b/frontend/panaderia-interfaz/src/context/ProductosIntermediosContext.tsx
new file mode 100644
index 00000000..80037338
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/context/ProductosIntermediosContext.tsx
@@ -0,0 +1,44 @@
+import { createContext, useContext, useState } from "react";
+import type { childrenProp } from "@/features/ProductosIntermedios/types/types";
+
+type ProductosIntermediosContextType = {
+    showProductosIntermediosForm: boolean;
+    setShowProductosIntermediosForm: (value: boolean) => void;
+    showProductosIntermediosDetalles: boolean;
+    setShowProductosIntermediosDetalles: (value: boolean) => void;
+    updateRegistro: boolean;
+    setUpdateRegistro: (value: boolean) => void;
+    registroDelete: boolean;
+    setRegistroDelete: (value: boolean) => void;
+    productoIntermedioId: number | null;
+    setProductoIntermedioId: (value: number | null) => void;
+};
+
+const ProductosIntermediosContext = createContext<ProductosIntermediosContextType | null>(null);
+
+export const ProductosIntermediosProvider = ({ children }: childrenProp) => {
+
+    const [showProductosIntermediosForm, setShowProductosIntermediosForm] = useState(false);
+    const [showProductosIntermediosDetalles, setShowProductosIntermediosDetalles] = useState(false);
+    const [updateRegistro, setUpdateRegistro] = useState(false);
+    const [registroDelete, setRegistroDelete] = useState(false);
+    const [productoIntermedioId, setProductoIntermedioId] = useState<number | null>(null);
+  return <ProductosIntermediosContext.Provider value={{
+    showProductosIntermediosForm,
+    setShowProductosIntermediosForm,
+    showProductosIntermediosDetalles,
+    setShowProductosIntermediosDetalles,
+    updateRegistro,
+    setUpdateRegistro,
+    registroDelete,
+    setRegistroDelete,
+    productoIntermedioId,
+    setProductoIntermedioId,
+  }}>{children}</ProductosIntermediosContext.Provider>;
+};
+
+export const useProductosIntermediosContext = () => {
+    const context = useContext(ProductosIntermediosContext);
+    if (!context) throw new Error ('Component must be within ProductosIntermediosProvider');
+    return context;
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/context/RecetasContext.tsx b/frontend/panaderia-interfaz/src/context/RecetasContext.tsx
new file mode 100644
index 00000000..c8994950
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/context/RecetasContext.tsx
@@ -0,0 +1,65 @@
+import type { recetasSearchList } from "@/features/Recetas/types/types";
+import { createContext, useContext, useState, useRef } from "react";
+import type { componenteListadosReceta } from "@/features/Recetas/types/types";
+
+type RecetasContextType = {
+  showRecetasDetalles: boolean;
+  setShowRecetasDetalles: (show: boolean) => void;
+  recetaId: string | null;
+  setRecetaId: (id: string | null) => void;
+  showRecetasForm: boolean;
+  setShowRecetasForm: (show: boolean) => void;
+  updateRegistro: boolean;
+  setUpdateRegistro: (update: boolean) => void;
+  registroDelete: boolean | null;
+  setRegistroDelete: (registroDelete: boolean | null) => void;
+  searchListRecetasRef: React.RefObject<HTMLInputElement | null>;
+  searchListActiveRecetas: boolean;
+  setSearchListActiveRecetas: (active: boolean) => void;
+  searchListItems: recetasSearchList[];
+  setSearchListItems: (items: recetasSearchList[]) => void;
+  timer: NodeJS.Timeout | null;
+  setTimer: (timer: NodeJS.Timeout | null) => void;
+  componentesListadosReceta: componenteListadosReceta[];
+  setComponentesListadosReceta: (componentes: componenteListadosReceta[]) => void;
+};
+
+const RecetasContext = createContext<RecetasContextType | null>(null);
+
+export const useRecetasContext = () => {
+  const context = useContext(RecetasContext);
+  if (!context) {
+    throw new Error("useRecetasContext must be used within a RecetasProvider");
+  }
+  return context;
+};
+
+export const RecetasProvider = ({ children }: { children: React.ReactNode }) => {
+  const [showRecetasDetalles, setShowRecetasDetalles] = useState(false);
+  const [showRecetasForm, setShowRecetasForm] = useState(false);
+  const [recetaId, setRecetaId] = useState<string | null>(null);
+  const [updateRegistro, setUpdateRegistro] = useState(false);
+  const [registroDelete, setRegistroDelete] = useState<boolean | null>(null);
+
+  const searchListRecetasRef = useRef<HTMLInputElement | null>(null);
+  const [searchListActiveRecetas, setSearchListActiveRecetas] = useState(false);
+
+  const [searchListItems, setSearchListItems] = useState<recetasSearchList[]>([]);
+  
+  const [componentesListadosReceta, setComponentesListadosReceta] = useState<componenteListadosReceta[]>([]);
+  const [timer, setTimer] = useState<NodeJS.Timeout | null>(null);
+
+
+  return <RecetasContext.Provider value={{ 
+    showRecetasDetalles, setShowRecetasDetalles, 
+    recetaId, setRecetaId,
+    showRecetasForm, setShowRecetasForm,
+    updateRegistro, setUpdateRegistro,
+    registroDelete, setRegistroDelete,
+    searchListRecetasRef,
+    searchListActiveRecetas, setSearchListActiveRecetas,
+    searchListItems, setSearchListItems,
+    timer, setTimer,
+    componentesListadosReceta, setComponentesListadosReceta,
+  }}>{children}</RecetasContext.Provider>;
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/data/constants.ts b/frontend/panaderia-interfaz/src/data/constants.ts
new file mode 100644
index 00000000..b0701fe6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/data/constants.ts
@@ -0,0 +1,4 @@
+export const ACCESS_TOKEN = "access";
+export const REFRESH_TOKEN = "refresh";
+
+export const API: string = import.meta.env.VITE_API_URL as string;
diff --git a/frontend/panaderia-interfaz/src/data/translations.ts b/frontend/panaderia-interfaz/src/data/translations.ts
new file mode 100644
index 00000000..5c1b79e5
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/data/translations.ts
@@ -0,0 +1,34 @@
+export const errorTranslations: { [key: string]: string } = {
+  // User authentication related
+  "user with this username already exists.":
+    "Ya existe un usuario con este nombre de usuario.",
+  "This field may not be blank.": "Este campo no puede estar en blanco.",
+  "Enter a valid email address.":
+    "Introduce una dirección de correo electrónico válida.",
+  "user with this email already exists.":
+    "Ya existe un usuario con este correo electrónico.",
+  "The two password fields didn't match.": "Las contraseñas no coinciden.",
+  "Password must be at least 8 characters long.":
+    "La contraseña debe tener al menos 8 caracteres.",
+  "This password is too common.": "Esta contraseña es demasiado común.",
+  "Users with this Rol are not allowed.":
+    "No se permiten usuarios con este Rol.",
+  "Ensure this field has no more than 150 characters.":
+    "Asegúrese de que este campo no tenga más de 150 caracteres.",
+  "Username must contain only letters, numbers, and @/./+/-/_ characters.":
+    "El nombre de usuario solo puede contener letras, números y los caracteres @/./+/-/_.",
+  "This field is required.": "Este campo es requerido.",
+  "Enter a valid value.": "Introduce un valor válido.",
+  // Materia Prima related
+  "materias primas with this nombre already exists.":
+    "Ya existe una materia prima con este nombre.",
+  "materias primas with this SKU already exists.":
+    "Ya existe una materia prima con este SKU.",
+  "A valid number is required.": "Se requiere un número válido.",
+  "Invalid pk value.": "Valor de ID inválido.",
+  'Invalid pk "0" - object does not exist.': "Selecciona una categoría.",
+};
+
+export const translateApiError = (englishError: string): string => {
+  return errorTranslations[englishError] || englishError;
+};
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/api/api.ts b/frontend/panaderia-interfaz/src/features/Authentication/api/api.ts
new file mode 100644
index 00000000..0098fae1
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/api/api.ts
@@ -0,0 +1,57 @@
+import type { TLoginUserSchema, TRegisterUserSchema } from "../schemas/schemas";
+import { API } from "../../../data/constants";
+
+export const handleLogin = async (data: TLoginUserSchema) => {
+  const validationResponse = await fetch(
+    `${API}/api/users/validate-credentials/`,
+    {
+      method: "POST",
+      headers: {
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify(data),
+    },
+  );
+
+  if (!validationResponse.ok) {
+    const errorData = await validationResponse.json();
+    throw new Error(errorData.detail);
+  }
+
+  const tokenResponse = await fetch(`${API}/api/token/`, {
+    method: "POST",
+    headers: {
+      "Content-Type": "application/json",
+    },
+    body: JSON.stringify(data),
+  });
+
+  if (!tokenResponse.ok) {
+    const errorData = await tokenResponse.json();
+    throw new Error(errorData.detail);
+  }
+  const validationData = await validationResponse.json();
+  const tokenData = await tokenResponse.json();
+  return { ...tokenData, ...validationData };
+};
+
+// REGISTER API CALL
+export const handleRegister = async (data: TRegisterUserSchema) => {
+  // eslint-disable-next-line @typescript-eslint/no-unused-vars
+  const { repeatpassword, ...registerData } = data;
+  const response = await fetch(`${API}/api/users/`, {
+    method: "POST",
+    headers: {
+      "Content-Type": "application/json",
+    },
+    body: JSON.stringify(registerData),
+  });
+
+  if (!response.ok) {
+    const errorData = await response.json();
+    throw errorData;
+  }
+
+  const dataResponse = await response.json();
+  return dataResponse;
+};
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginButton.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginButton.tsx
new file mode 100644
index 00000000..c8d1d712
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginButton.tsx
@@ -0,0 +1,26 @@
+import { TubeSpinnerWhite } from "@/assets";
+
+export function LoginButton({
+  type,
+  isPending,
+}: {
+  type: "submit";
+  isPending: boolean;
+}) {
+  return (
+    <>
+      <button
+        type={type}
+        className="flex items-center justify-center gap-2 bg-blue-500 w-full text-white font-semibold p-2 rounded-xs cursor-pointer"
+        disabled={isPending}
+      >
+        Iniciar sesión
+        {isPending ? (
+          <img src={TubeSpinnerWhite} alt="spinner" className="size-7" />
+        ) : (
+          ""
+        )}
+      </button>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginCard.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginCard.tsx
new file mode 100644
index 00000000..d9222e36
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginCard.tsx
@@ -0,0 +1,21 @@
+import { Title } from "./Title";
+import { LoginInputFields } from "./LoginInputFields";
+import { Link } from "react-router-dom";
+
+export function LoginCard() {
+  return (
+    <>
+      <div className="bg-white flex flex-col justify-center gap-8 shadow-[0px_2px_30px_#ccc6c6] p-10 h-[460px] w-[350px] relative rounded-lg">
+        <Title />
+        <LoginInputFields />
+        <div className="h-1 bg-blue-500 w-full absolute bottom-0 left-0"></div>
+        <div className="text-sm font-semibold font-[Roboto] text-center ">
+          No tienes una cuenta?{" "}
+          <Link to="/register" className="cursor-pointer text-blue-500">
+            Registrate aquí
+          </Link>
+        </div>
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInput.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInput.tsx
new file mode 100644
index 00000000..739bb25e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInput.tsx
@@ -0,0 +1,21 @@
+import type { LoginUserType } from "@/features/Authentication/types/types";
+
+export function LoginInput({
+  placeholder,
+  type,
+  name,
+  register,
+}: LoginUserType) {
+  return (
+    <>
+      <input
+        {...register(name)}
+        className="
+            w-full text-xs p-3 pl-8 border font-semibold font-[Roboto] border-gray-300 bg-gray-100 rounded-xs outline-0
+            focus:outline-blue-500 focus:outline-2"
+        type={type}
+        placeholder={placeholder}
+      />
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputField.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputField.tsx
new file mode 100644
index 00000000..561d1ef0
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputField.tsx
@@ -0,0 +1,43 @@
+import { LoginInput } from "./LoginInput";
+import type { Path } from "react-hook-form";
+import type { TLoginUserSchema } from "@/features/Authentication/schemas/schemas";
+import type { UseFormRegister } from "react-hook-form";
+import type { FieldErrors } from "react-hook-form";
+
+export function LoginInputField({
+  title,
+  name,
+  placeholder,
+  type,
+  register,
+  errors,
+  icon,
+}: {
+  title: string;
+  name: Path<TLoginUserSchema>;
+  placeholder: string;
+  type: string;
+  register: UseFormRegister<TLoginUserSchema>;
+  errors: FieldErrors<TLoginUserSchema>;
+  icon: string;
+}) {
+  return (
+    <div className="flex flex-col gap-1.5">
+      <div className="text-sm font-semibold font-[Roboto]">{title}</div>
+      <div className="relative">
+        <img
+          src={icon}
+          alt={icon}
+          className="absolute left-2.5 bottom-3.5 size-[16px]"
+        />
+        <LoginInput
+          placeholder={placeholder}
+          type={type}
+          register={register}
+          name={name}
+        />
+      </div>
+      <p className="text-red-500 text-xs">{errors[name]?.message}</p>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputFields.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputFields.tsx
new file mode 100644
index 00000000..bc8fa109
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/LoginInputFields.tsx
@@ -0,0 +1,56 @@
+import { LoginButton } from "./LoginButton";
+import { useForm } from "react-hook-form";
+import type { TLoginUserSchema } from "@/features/Authentication/schemas/schemas";
+import { zodResolver } from "@hookform/resolvers/zod";
+import { loginUserSchema } from "@/features/Authentication/schemas/schemas";
+import { LoginInputField } from "./LoginInputField";
+import { useLoginMutation } from "../../hooks/mutations/AuthMutations";
+import { UserIcon, PasswordIcon } from "@/assets/LoginRegisterAssets";
+
+export function LoginInputFields() {
+  const {
+    handleSubmit,
+    formState: { errors },
+    register,
+    setError,
+  } = useForm<TLoginUserSchema>({ resolver: zodResolver(loginUserSchema) });
+
+  const { mutate: login, isPending } = useLoginMutation(setError);
+
+  const onSubmit = async (data: TLoginUserSchema) => {
+    const isValid = Object.keys(errors).length === 0;
+    if (isValid) {
+      login(data);
+    }
+  };
+
+  return (
+    <form action="" onSubmit={handleSubmit(onSubmit)}>
+      <div className="flex flex-col gap-6">
+        {/* Nombre de usuario */}
+        <LoginInputField
+          title="Nombre de usuario"
+          name="username"
+          placeholder="Escribe tu nombre de usuario"
+          type="text"
+          register={register}
+          errors={errors}
+          icon={UserIcon}
+        />
+
+        {/* Contraseña */}
+        <LoginInputField
+          title="Contraseña"
+          name="password"
+          placeholder="Escribe tu contraseña"
+          type="password"
+          register={register}
+          errors={errors}
+          icon={PasswordIcon}
+        />
+
+        <LoginButton type="submit" isPending={isPending} />
+      </div>
+    </form>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/login/Title.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/login/Title.tsx
new file mode 100644
index 00000000..64e53be2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/login/Title.tsx
@@ -0,0 +1,10 @@
+export function Title() {
+  return (
+    <>
+      <div>
+        <h1 className="text-2xl font-semibold font-[Roboto]">Iniciar sesión</h1>
+        <p className="text-xs font-[Roboto]">para acceder a tu cuenta</p>
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterButton.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterButton.tsx
new file mode 100644
index 00000000..60453137
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterButton.tsx
@@ -0,0 +1,26 @@
+import { TubeSpinnerWhite } from "@/assets";
+
+export function RegisterButton({
+  type,
+  isPending,
+}: {
+  type: "submit";
+  isPending: boolean;
+}) {
+  return (
+    <button
+      type={type}
+      className="bg-blue-500 w-full text-white font-semibold p-2 text-xs rounded-xs cursor-pointer"
+      disabled={isPending}
+    >
+      {isPending ? (
+        <div className="flex gap-2 items-center justify-center">
+          <span className="ml-2">Creando cuenta</span>
+          <img src={TubeSpinnerWhite} alt="Loading" className="size-7" />
+        </div>
+      ) : (
+        "Crear Cuenta"
+      )}
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterCard.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterCard.tsx
new file mode 100644
index 00000000..52794e72
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterCard.tsx
@@ -0,0 +1,19 @@
+import { RegisterHeader } from "./ResgisterHeader";
+import { RegisterInputFields } from "./RegisterInputFields";
+import { Link } from "react-router-dom";
+
+export function RegisterCard() {
+  return (
+    <div className="bg-white flex flex-col justify-around shadow-[0px_2px_30px_#ccc6c6] px-10 py-4 h-[610px] w-[390px] relative rounded-md">
+      <RegisterHeader />
+      <RegisterInputFields />
+      <div className="text-xs font-semibold font-[Roboto] text-center">
+        Ya tienes una cuenta?{" "}
+        <Link to="/login" className="cursor-pointer text-blue-500">
+          Inicia sesión aquí
+        </Link>
+      </div>
+      <div className="absolute bottom-0 left-0 w-full h-1 bg-blue-500"></div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInput.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInput.tsx
new file mode 100644
index 00000000..b0a7b8c7
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInput.tsx
@@ -0,0 +1,24 @@
+import type { UseFormRegister, Path } from "react-hook-form";
+import type { TRegisterUserSchema } from "@/features/Authentication/schemas/schemas";
+
+export function RegisterInput({
+  placeholder,
+  type,
+  name,
+  register,
+}: {
+  placeholder: string;
+  type: string;
+  name: Path<TRegisterUserSchema>;
+  register: UseFormRegister<TRegisterUserSchema>;
+}) {
+  return (
+    <input
+      {...register(name)}
+      className="w-full text-[0.7rem] px-1 py-1.5 pl-8 border font-semibold font-[Roboto] border-gray-300 bg-gray-100 rounded-xs outline-0
+        focus:outline-blue-500 focus:outline-2"
+      type={type}
+      placeholder={placeholder}
+    />
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputContainer.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputContainer.tsx
new file mode 100644
index 00000000..240562e6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputContainer.tsx
@@ -0,0 +1,44 @@
+import type { Path } from "react-hook-form";
+import type { TRegisterUserSchema } from "@/features/Authentication/schemas/schemas";
+import type { UseFormRegister } from "react-hook-form";
+import type { FieldErrors } from "react-hook-form";
+
+import { RegisterInput } from "./RegisterInput";
+
+export default function RegisterInputContainer({
+  title,
+  name,
+  placeholder,
+  type,
+  register,
+  errors,
+  icon,
+}: {
+  title: string;
+  name: Path<TRegisterUserSchema>;
+  placeholder: string;
+  type: string;
+  register: UseFormRegister<TRegisterUserSchema>;
+  errors: FieldErrors<TRegisterUserSchema>;
+  icon: string;
+}) {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="text-[0.7rem] font-semibold font-[Roboto]">{title}</div>
+      <div className="relative">
+        <img
+          src={icon}
+          alt={icon}
+          className="absolute left-2.5 bottom-2 size-[16px]"
+        />
+        <RegisterInput
+          placeholder={placeholder}
+          type={type}
+          name={name}
+          register={register}
+        />
+      </div>
+      <p className="text-red-500 text-[0.6rem]">{errors[name]?.message}</p>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputFields.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputFields.tsx
new file mode 100644
index 00000000..382b835d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputFields.tsx
@@ -0,0 +1,103 @@
+import { useForm } from "react-hook-form";
+import type { TRegisterUserSchema } from "@/features/Authentication/schemas/schemas";
+import { zodResolver } from "@hookform/resolvers/zod";
+import { registerUserSchema } from "@/features/Authentication/schemas/schemas";
+import { RegisterButton } from "./RegisterButton";
+import RegisterInputContainer from "./RegisterInputContainer";
+import RegisterSelectContainer from "./RegisterSelectContainer";
+import { useRegisterMutation } from "../../hooks/mutations/AuthMutations";
+import {
+  UserIcon,
+  PasswordIcon,
+  EmailIcon,
+} from "@/assets/LoginRegisterAssets";
+
+export function RegisterInputFields() {
+  const {
+    handleSubmit,
+    formState: { errors },
+    register,
+    setError,
+  } = useForm<TRegisterUserSchema>({
+    resolver: zodResolver(registerUserSchema),
+  });
+
+  const { mutate: registerUser, isPending } = useRegisterMutation(setError);
+
+  const onSubmit = async (data: TRegisterUserSchema) => {
+    registerUser(data);
+  };
+
+  return (
+    <>
+      <form action="" onSubmit={handleSubmit(onSubmit)}>
+        <div className="flex flex-col gap-2.5">
+          {/* Nombre de usuario */}
+          <RegisterInputContainer
+            title="Nombre de usuario"
+            name="username"
+            placeholder="Escribe tu nombre de usuario"
+            type="text"
+            register={register}
+            errors={errors}
+            icon={UserIcon}
+          />
+
+          {/* Nombre Completo */}
+          <RegisterInputContainer
+            title="Nombre completo"
+            name="full_name"
+            placeholder="Escribe tu nombre de usuario"
+            type="text"
+            register={register}
+            errors={errors}
+            icon={UserIcon}
+          />
+
+          {/* Contraseña */}
+          <RegisterInputContainer
+            title="Contraseña"
+            name="password"
+            placeholder="Escribe tu contraseña"
+            type="password"
+            register={register}
+            errors={errors}
+            icon={PasswordIcon}
+          />
+
+          {/* Repetir contraseña */}
+          <RegisterInputContainer
+            title="Repetir contraseña"
+            name="repeatpassword"
+            placeholder="Repite tu contraseña"
+            type="password"
+            register={register}
+            errors={errors}
+            icon={PasswordIcon}
+          />
+
+          {/* Repetir Email */}
+          <RegisterInputContainer
+            title="Correo electrónico (opcional)"
+            name="email"
+            placeholder="Escribe tu email"
+            type="email"
+            register={register}
+            errors={errors}
+            icon={EmailIcon}
+          />
+
+          {/* Repetir Selecionar Rol */}
+          <RegisterSelectContainer
+            title="Rol"
+            name="rol"
+            register={register}
+            errors={errors}
+          />
+
+          <RegisterButton type="submit" isPending={isPending} />
+        </div>
+      </form>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputForm.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputForm.tsx
new file mode 100644
index 00000000..7b6f3446
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterInputForm.tsx
@@ -0,0 +1,27 @@
+import type { UseFormRegister, Path } from "react-hook-form";
+import type { TRegisterUserSchema } from "@/features/Authentication/schemas/schemas";
+
+export default function RegisterInputForm({
+  name,
+  placeholder,
+  type,
+  register,
+}: {
+  name: Path<TRegisterUserSchema>;
+  placeholder: string;
+  type: string;
+  register: UseFormRegister<TRegisterUserSchema>;
+}) {
+  return (
+    <div className="flex flex-col gap-2.5">
+      <div className="text-[0.7rem] font-semibold font-[Roboto]">{name}</div>
+      <input
+        {...register(name)}
+        className="w-full text-[0.7rem] p-2 pl-8 border font-semibold font-[Roboto] border-gray-300 bg-gray-100 rounded-xs outline-0
+            focus:outline-blue-500 focus:outline-2"
+        type={type}
+        placeholder={placeholder}
+      />
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterSelectContainer.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterSelectContainer.tsx
new file mode 100644
index 00000000..2877f988
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/RegisterSelectContainer.tsx
@@ -0,0 +1,34 @@
+import type { TRegisterUserSchema } from "@/features/Authentication/schemas/schemas";
+import type { FieldErrors, Path, UseFormRegister } from "react-hook-form";
+
+export default function RegisterSelectContainer({
+  title,
+  name,
+  register,
+  errors,
+}: {
+  title: string;
+  name: Path<TRegisterUserSchema>;
+  register: UseFormRegister<TRegisterUserSchema>;
+  errors: FieldErrors<TRegisterUserSchema>;
+}) {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="text-[0.7rem] font-semibold font-[Roboto]">{title}</div>
+      <select
+        {...register(name)}
+        className="w-full cursor-pointer text-[0.7rem] p-1.5 border font-semibold font-[Roboto] border-gray-300 bg-gray-100 rounded-xs outline-0
+            focus:outline-blue-500 focus:outline-2"
+      >
+        <option value=""></option>
+        <option value="Gerente">Gerente</option>
+        <option value="Vendedor">Vendedor</option>
+      </select>
+      <p className="text-red-500 text-[0.6rem]">
+        {errors[name]?.type === "required_error"
+          ? "El rol es requerido"
+          : errors[name]?.message}
+      </p>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/components/register/ResgisterHeader.tsx b/frontend/panaderia-interfaz/src/features/Authentication/components/register/ResgisterHeader.tsx
new file mode 100644
index 00000000..c55e1efd
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/components/register/ResgisterHeader.tsx
@@ -0,0 +1,10 @@
+export function RegisterHeader() {
+  return (
+    <div>
+      <h1 className="text-[1.2rem] tracking-wider font-semibold font-[Roboto]">
+        Crea tu cuenta
+      </h1>
+      <p className="text-[0.9rem] font-[Roboto]">para acceder al sistema</p>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/hooks/mutations/AuthMutations.ts b/frontend/panaderia-interfaz/src/features/Authentication/hooks/mutations/AuthMutations.ts
new file mode 100644
index 00000000..e5082b32
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/hooks/mutations/AuthMutations.ts
@@ -0,0 +1,48 @@
+import { useMutation } from "@tanstack/react-query";
+import { useAuth } from "../../../../context/AuthContext";
+import { handleRegister } from "../../api/api";
+import type {
+  TLoginUserSchema,
+  TRegisterUserSchema,
+} from "../../schemas/schemas";
+import { useNavigate } from "react-router-dom";
+import type { UseFormSetError } from "react-hook-form";
+import { translateApiError } from "@/data/translations";
+
+export const useLoginMutation = (
+  setError: UseFormSetError<TLoginUserSchema>,
+) => {
+  const { login } = useAuth();
+
+  return useMutation({
+    mutationFn: (data: TLoginUserSchema) => login(data),
+    onError: (error: Error) => {
+      setError("password", { message: error.message });
+    },
+  });
+};
+
+export const useRegisterMutation = (
+  setError: UseFormSetError<TRegisterUserSchema>,
+) => {
+  const navigate = useNavigate();
+
+  return useMutation({
+    mutationFn: (data: TRegisterUserSchema) => handleRegister(data),
+    onSuccess: () => {
+      navigate("/login");
+    },
+    onError: (errorData: Record<string, string[]>) => {
+      for (const fieldName in errorData) {
+        if (Object.prototype.hasOwnProperty.call(errorData, fieldName)) {
+          const errorMessages = errorData[fieldName];
+
+          if (Array.isArray(errorMessages) && errorMessages.length > 0) {
+            const message = translateApiError(errorMessages[0]);
+            setError(fieldName as keyof TRegisterUserSchema, { message });
+          }
+        }
+      }
+    },
+  });
+};
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/hooks/queries/authQueryOptions.ts b/frontend/panaderia-interfaz/src/features/Authentication/hooks/queries/authQueryOptions.ts
new file mode 100644
index 00000000..f4ec514f
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/hooks/queries/authQueryOptions.ts
@@ -0,0 +1,6 @@
+export const createUserDataQueryOptions = () => {
+  return {
+    queryKey: ["userData"],
+    staleTime: Infinity,
+  };
+};
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/hooks/queries/queries.ts b/frontend/panaderia-interfaz/src/features/Authentication/hooks/queries/queries.ts
new file mode 100644
index 00000000..e69de29b
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/schemas/schemas.ts b/frontend/panaderia-interfaz/src/features/Authentication/schemas/schemas.ts
new file mode 100644
index 00000000..7da6c645
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/schemas/schemas.ts
@@ -0,0 +1,27 @@
+import { z } from "zod";
+
+export const registerUserSchema = z
+  .object({
+    username: z.string().min(3, "El nombre debe tener al menos 3 caracteres"),
+    full_name: z
+      .string()
+      .min(3, "El nombre completo debe tener al menos 3 caracteres"),
+    email: z.string().email("El email no es válido"),
+    password: z
+      .string()
+      .min(4, "La contraseña debe tener al menos 5 caracteres"),
+    repeatpassword: z.string().min(4, "La contraseña no coincide"),
+    rol: z.enum(["Gerente", "Vendedor"], { message: "El rol no es válido" }),
+  })
+  .refine((data) => data.password === data.repeatpassword, {
+    message: "Las contraseñas no coinciden",
+    path: ["repeatpassword"],
+  });
+
+export const loginUserSchema = z.object({
+  username: z.string().min(3, "El nombe de usuario debe ser valido"),
+  password: z.string().min(4, "La contraseña debe ser valida"),
+});
+
+export type TRegisterUserSchema = z.infer<typeof registerUserSchema>;
+export type TLoginUserSchema = z.infer<typeof loginUserSchema>;
diff --git a/frontend/panaderia-interfaz/src/features/Authentication/types/types.ts b/frontend/panaderia-interfaz/src/features/Authentication/types/types.ts
new file mode 100644
index 00000000..9b6683b8
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Authentication/types/types.ts
@@ -0,0 +1,26 @@
+import type { Path, UseFormRegister } from "react-hook-form";
+import type { TLoginUserSchema } from "../schemas/schemas";
+
+export type RegisterUser = {
+  username: string;
+  email: string;
+  full_name: string;
+  password: string;
+  repassword: string;
+  rol: string;
+};
+
+export type TUser = {
+  id: number;
+  username: string;
+  email: string;
+  full_name: string;
+  rol: string;
+};
+
+export type LoginUserType = {
+  placeholder: string;
+  type: string;
+  name: Path<TLoginUserSchema>;
+  register: UseFormRegister<TLoginUserSchema>;
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/api/api.ts b/frontend/panaderia-interfaz/src/features/MateriaPrima/api/api.ts
new file mode 100644
index 00000000..946158a9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/api/api.ts
@@ -0,0 +1,224 @@
+import apiClient from "../../../api/client";
+import type { AxiosError } from "axios";
+import {
+  type UnidadMedida,
+  type CategoriaMateriaPrima,
+  type LoteMateriaPrimaFormSumit,
+  type MateriaPrimaListServer,
+  type LoteMateriaPrimaFormResponse,
+  type MateriaPrimaList,
+  type Proveedor,
+} from "../types/types";
+
+import type { TMateriaPrimaSchema } from "../schemas/schemas";
+
+// UNIDADES DE MEDIDA API CALL
+export const fetchUnidadesMedida = async (): Promise<UnidadMedida[]> => {
+  try {
+    const response = await apiClient.get("/api/unidades-medida/");
+    return response.data;
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch unidades medida",
+    );
+  }
+};
+
+// CATEGORIAS DE MATERIA PRIMA API CALL
+export const fetchCategoriasMateriaPrima = async (): Promise<
+  CategoriaMateriaPrima[]
+> => {
+  try {
+    const response = await apiClient.get("/api/categorias-materiaprima/");
+    return response.data;
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch categorias",
+    );
+  }
+};
+
+// API CALL FOR MATERIA PRIMA to create/update materia prima
+export const handleCreateUpdateMateriaPrima = async (
+  data: TMateriaPrimaSchema,
+  id?: number,
+) => {
+  const isUpdate = id !== undefined;
+  const url = isUpdate ? `/api/materiaprima/${id}/` : "/api/materiaprima/";
+  const method = isUpdate ? "put" : "post";
+
+  try {
+    const response = await apiClient[method](url, data);
+    return response.data;
+  } catch (error) {
+    const axiosError = error as AxiosError<Record<string, string[]>>;
+    if (axiosError.response) {
+      return {
+        errorData: axiosError.response.data,
+        status: axiosError.response.status,
+        failed: true,
+      };
+    }
+    throw error;
+  }
+};
+
+// API CALL FOR MATERIA PRIMA LIST
+export const handleMateriaPrimaList = async (): Promise<MateriaPrimaList[]> => {
+  try {
+    const response = await apiClient.get("/api/materiaprima/");
+    const dataResponse = response.data;
+
+    const mappedData: MateriaPrimaList[] = dataResponse.map(
+      (item: MateriaPrimaListServer) => ({
+        id: item.id,
+        name: item.nombre,
+        unit: item.unidad_medida_base_detail.nombre_completo,
+        category: item.categoria_detail.nombre_categoria,
+        quantity: item.stock_actual,
+        reorderPoint: item.punto_reorden,
+        creationDate: item.fecha_creacion_registro,
+      }),
+    );
+
+    return mappedData;
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch materia prima list",
+    );
+  }
+};
+
+// API CALL FOR MATERIA PRIMA LIST PK
+export const handleMateriaPrimaListPK = async (
+  pk: number,
+): Promise<MateriaPrimaListServer> => {
+  try {
+    const response = await apiClient.get(`/api/materiaprima/${pk}/`);
+    return response.data;
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch materia prima",
+    );
+  }
+};
+
+// API CALL FOR DELETE MATERIA PRIMA
+export const handleDeleteMateriaPrima = async (pk: number) => {
+  try {
+    const response = await apiClient.delete(`/api/materiaprima/${pk}/`);
+
+    if (response.status === 204) {
+      return { success: true };
+    }
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to delete materia prima",
+    );
+  }
+};
+
+// API CALL FOR LOTES MATERIA PRIMA LIST
+export const handleLotesMateriaPrimaLotes = async (
+  pk: number,
+): Promise<{ lotes: LoteMateriaPrimaFormResponse[]; success: boolean }> => {
+  try {
+    const response = await apiClient.get(
+      `/api/lotesmateriaprima/?materia_prima=${pk}`,
+    );
+    const dataResponse = response.data;
+
+    if (dataResponse.length > 0) {
+      return { lotes: dataResponse, success: true };
+    }
+    return { lotes: [], success: false };
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch lotes",
+    );
+  }
+};
+
+// API CALL FOR CREATE LOTE MATERIA PRIMA
+export const handleCreateUpdateLoteMateriaPrima = async (
+  data: LoteMateriaPrimaFormSumit,
+  id?: number,
+): Promise<{ lotes: LoteMateriaPrimaFormResponse; success: boolean }> => {
+  const isUpdate = id !== undefined;
+  const url = isUpdate
+    ? `/api/lotesmateriaprima/${id}/`
+    : "/api/lotesmateriaprima/";
+  const method = isUpdate ? "put" : "post";
+
+  // Format dates to YYYY-MM-DD
+  const formattedData = {
+    ...data,
+    fecha_recepcion: data.fecha_recepcion.toISOString().split("T")[0],
+    fecha_caducidad: data.fecha_caducidad.toISOString().split("T")[0],
+  };
+
+  try {
+    const response = await apiClient[method](url, formattedData);
+    return { lotes: response.data, success: true };
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to create/update lote",
+    );
+  }
+};
+
+// API CALL FOR PROVEEDORES
+export const handleProveedores = async (): Promise<Proveedor[]> => {
+  try {
+    const response = await apiClient.get("/api/proveedores/");
+    return response.data;
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to fetch proveedores",
+    );
+  }
+};
+
+// API CALL FOR DELETE LOTE MATERIA PRIMA
+export const handleDeleteLoteMateriaPrima = async (pk: number | undefined) => {
+  if (!pk) {
+    return { success: false };
+  }
+
+  try {
+    await apiClient.delete(`/api/lotesmateriaprima/${pk}/`);
+    return { success: true };
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to delete lote",
+    );
+  }
+};
+
+// API CALL FOR ACTIVATE LOTE MATERIA PRIMA
+export const handleActivateLoteMateriaPrima = async (
+  pk: number | undefined,
+) => {
+  if (!pk) {
+    return { success: false };
+  }
+
+  try {
+    await apiClient.put(`/api/lotesmateriaprima/${pk}/activate/`);
+    return { success: true };
+  } catch (error) {
+    const axiosError = error as AxiosError<{ detail?: string }>;
+    throw new Error(
+      axiosError.response?.data?.detail || "Failed to activate lote",
+    );
+  }
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DeleteComponent.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DeleteComponent.tsx
new file mode 100644
index 00000000..54aa3c20
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DeleteComponent.tsx
@@ -0,0 +1,55 @@
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import { BorrarIcon } from "@/assets/DashboardAssets";
+import { TubeSpinner } from "@/assets";
+
+import Title from "@/components/Title";
+import Button from "../../../components/Button";
+
+export const DeleteComponent = ({
+  deleteFunction,
+  isLoading,
+}: {
+  deleteFunction: () => Promise<void>;
+  isLoading: boolean;
+}) => {
+  const { setRegistroDelete } = useMateriaPrimaContext();
+
+  const handleDelete = async () => {
+    await deleteFunction();
+    setRegistroDelete(null);
+  };
+
+  return (
+    <div className="fixed top-0 left-0 w-full h-full flex justify-center items-center bg-[rgba(0,0,0,0.5)] z-50">
+      <div className="flex flex-col gap-5 w-[500px] bg-white rounded-lg shadow-md  p-5">
+        <div className="flex flex-col gap-5 justify-between items-center">
+          <Title>Seguro que desea eliminar este registro?</Title>
+          <div className="flex justify-between gap-2">
+            <Button
+              type="cancel"
+              onClick={() => {
+                setRegistroDelete(null);
+              }}
+            >
+              <div className="flex items-center gap-2">Cancelar</div>
+            </Button>
+            <Button type="delete" onClick={handleDelete}>
+              <div className="flex items-center gap-2">
+                Eliminar
+                <img src={BorrarIcon} alt="Eliminar" />
+              </div>
+            </Button>
+          </div>
+          {isLoading ? (
+            <div className="flex justify-center items-center h-10 w-full gap-2">
+              <img src={TubeSpinner} alt="Cargando..." className="size-10" />
+              <span className="text-sm">Eliminando...</span>
+            </div>
+          ) : (
+            ""
+          )}
+        </div>
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DetailsTable.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DetailsTable.tsx
new file mode 100644
index 00000000..8757a5bd
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/DetailsTable.tsx
@@ -0,0 +1,64 @@
+import { DetailsField } from "@/components/DetailsField";
+import { DetailFieldValue } from "@/components/DetailFieldValue";
+import type { MateriaPrimaListServer } from "../types/types";
+
+export const DetailsTable = ({materiaprimaDetalles}: {materiaprimaDetalles: MateriaPrimaListServer}) => {
+  return (
+    <div className="flex items-center gap-20">
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailsField>Nombre</DetailsField>
+            <DetailsField>SKU</DetailsField>
+            <DetailsField>Punto de reorden</DetailsField>
+            <DetailsField>Unidad de medida</DetailsField>
+            <DetailsField>Categoría</DetailsField>
+            <DetailsField>Nombre de empaque</DetailsField>
+            <DetailsField>Cantidad de empaquete</DetailsField>
+            <DetailsField>Unidad de medida de empaque</DetailsField>
+            <DetailsField>Fecha de última actualización</DetailsField>
+            <DetailsField>Fecha de creación del registro</DetailsField>
+            <DetailsField>Fecha de modificación del registro</DetailsField>
+            <DetailsField>Descripción</DetailsField>
+          </div>
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailFieldValue>
+              {materiaprimaDetalles?.nombre || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.SKU || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.punto_reorden || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.unidad_medida_base_detail
+                ?.nombre_completo || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.categoria_detail?.nombre_categoria || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.nombre_empaque_estandar || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.cantidad_empaque_estandar || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.unidad_medida_empaque_estandar_detail
+                ?.nombre_completo || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.fecha_ultima_actualizacion || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.fecha_creacion_registro || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.fecha_modificacion_registro || "-"}
+            </DetailFieldValue>
+            <DetailFieldValue>
+              {materiaprimaDetalles?.descripcion || "-"}
+            </DetailFieldValue>
+          </div>
+        </div>
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterButton.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterButton.tsx
new file mode 100644
index 00000000..64822261
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterButton.tsx
@@ -0,0 +1,351 @@
+import { useEffect, useState, useRef } from "react";
+import { useQueries } from "@tanstack/react-query";
+
+import type { MateriaPrimaList } from "@/features/MateriaPrima/types/types";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import {
+  createCategoriasQueryOptions,
+  createUnidadesQueryOptions,
+} from "@/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions";
+import {
+  MenuIcon,
+  FilledLeftArrowIcon,
+  FiltroIcon,
+} from "@/assets/DashboardAssets";
+
+import FilterOption from "./FilterOption";
+import ResetFilterOption from "./ResetFilterOption";
+
+export default function FilterButton() {
+  const {
+    listaMateriaPrimaCached,
+    setListaMateriaPrimaFiltered,
+    MPFilteredInputSearchApplied,
+    listaMateriaPrimaFilteredInputSearch,
+    setFilteredApplied,
+    filteredApplied,
+    setInputfilterDoubleApplied,
+    setCategoriasMateriaPrima,
+    setUnidadesMedida,
+    categoriasMateriaPrima,
+    unidadesMedida,
+  } = useMateriaPrimaContext();
+
+  const [showFilter, setShowFilter] = useState<boolean>(false);
+  const [showFilterContent, setShowFilterContent] = useState<boolean>(false);
+  const [showCategorias, setShowCategorias] = useState<boolean | null>(null);
+  const [showUnidadesMedida, setShowUnidadesMedida] = useState<boolean | null>(
+    null,
+  );
+  const [showFechaCreacion, setShowFechaCreacion] = useState<boolean | null>(
+    null,
+  );
+  const [isDateInputActive, setIsDateInputActive] = useState(false);
+
+  const [categorias, unidades] = useQueries({
+    queries: [createCategoriasQueryOptions(), createUnidadesQueryOptions()],
+  });
+
+  useEffect(() => {
+    if (categorias.data) {
+      setCategoriasMateriaPrima(categorias.data);
+    }
+    if (unidades.data) {
+      setUnidadesMedida(unidades.data);
+    }
+  }, [
+    categorias.data,
+    unidades.data,
+    setCategoriasMateriaPrima,
+    setUnidadesMedida,
+  ]);
+
+  const filterButtonRef = useRef<HTMLDivElement>(null);
+
+  // Click outside handler
+  useEffect(() => {
+    if (!showFilter) return; // Only add listener when filter is shown
+
+    const handleClickOutside = (event: MouseEvent) => {
+      if (
+        filterButtonRef.current &&
+        !filterButtonRef.current.contains(event.target as Node)
+      ) {
+        setShowFilter(false);
+      }
+    };
+    document.addEventListener("click", handleClickOutside);
+    return () => document.removeEventListener("click", handleClickOutside);
+  }, [showFilter]); // Only re-run when showFilter changes
+
+  const filtrarCategorias = (id: number) => {
+    const categoria = categoriasMateriaPrima.find(
+      (categoria) => categoria.id === id,
+    );
+    let listaFiltrada: MateriaPrimaList[] = [];
+    if (categoria) {
+      if (MPFilteredInputSearchApplied) {
+        listaFiltrada = listaMateriaPrimaFilteredInputSearch.filter(
+          (materiaPrima) =>
+            materiaPrima.category === categoria.nombre_categoria,
+        );
+        setInputfilterDoubleApplied(true);
+      } else {
+        listaFiltrada = listaMateriaPrimaCached.filter(
+          (materiaPrima) =>
+            materiaPrima.category === categoria.nombre_categoria,
+        );
+      }
+
+      setListaMateriaPrimaFiltered(listaFiltrada);
+      setFilteredApplied(true);
+      setShowFilter(false);
+    }
+  };
+
+  const filtrarUnidadesMedida = (id: number) => {
+    const unidadMedida = unidadesMedida.find(
+      (unidadMedida) => unidadMedida.id === id,
+    );
+    let listaFiltrada: MateriaPrimaList[] = [];
+    if (unidadMedida) {
+      if (MPFilteredInputSearchApplied) {
+        listaFiltrada = listaMateriaPrimaFilteredInputSearch.filter(
+          (materiaPrima) => materiaPrima.unit === unidadMedida.nombre_completo,
+        );
+        setInputfilterDoubleApplied(true);
+      } else {
+        listaFiltrada = listaMateriaPrimaCached.filter(
+          (materiaPrima) => materiaPrima.unit === unidadMedida.nombre_completo,
+        );
+      }
+
+      setListaMateriaPrimaFiltered(listaFiltrada);
+      setFilteredApplied(true);
+      setShowFilter(false);
+    }
+  };
+
+  const printCategorias = () => {
+    const elementos = (
+      <>
+        {categoriasMateriaPrima.map((categoria, index) => (
+          <li
+            key={index}
+            onClick={() => filtrarCategorias(categoria.id)}
+            className="flex items-center gap-2 py-2 px-2 font-semibold font-[Roboto] hover:bg-gray-200 cursor-pointer rounded-md"
+          >
+            {categoria.nombre_categoria}
+          </li>
+        ))}
+      </>
+    );
+    return elementos;
+  };
+
+  const printUnidadesMedida = () => {
+    const elementos = (
+      <>
+        {unidadesMedida.map((categoria, index) => (
+          <li
+            key={index}
+            onClick={() => filtrarUnidadesMedida(categoria.id)}
+            className="flex items-center gap-2 py-2 px-2 font-semibold font-[Roboto] hover:bg-gray-200 cursor-pointer rounded-md"
+          >
+            {categoria.nombre_completo}
+          </li>
+        ))}
+      </>
+    );
+    return elementos;
+  };
+
+  const filtrarFechaCreacion = () => {
+    const fechaDesde =
+      (document.getElementById("fechaDesde") as HTMLInputElement) || null;
+    const fechaHasta =
+      (document.getElementById("fechaHasta") as HTMLInputElement) || null;
+    let listaFiltrada: MateriaPrimaList[] = [];
+
+    const fechaDesdeValue = fechaDesde?.value
+      ? new Date(fechaDesde.value)
+      : null;
+    const fechaHastaValue = fechaHasta?.value
+      ? new Date(fechaHasta.value)
+      : null;
+
+    const fechaFiltrada = (fechaCreacion: Date) => {
+      if (fechaDesdeValue && fechaHastaValue) {
+        return (
+          fechaCreacion >= fechaDesdeValue && fechaCreacion <= fechaHastaValue
+        );
+      } else if (fechaDesdeValue && !fechaHastaValue) {
+        return fechaCreacion >= fechaDesdeValue;
+      } else if (!fechaDesdeValue && fechaHastaValue) {
+        return fechaCreacion <= fechaHastaValue;
+      }
+    };
+
+    if (MPFilteredInputSearchApplied) {
+      listaFiltrada = listaMateriaPrimaFilteredInputSearch.filter(
+        (materiaprima) => {
+          const fechaCreacion = new Date(materiaprima.creationDate);
+          return fechaFiltrada(fechaCreacion);
+        },
+      );
+    } else {
+      listaFiltrada = listaMateriaPrimaCached.filter((materiaprima) => {
+        const fechaCreacion = new Date(materiaprima.creationDate);
+        return fechaFiltrada(fechaCreacion);
+      });
+    }
+
+    setListaMateriaPrimaFiltered(listaFiltrada);
+    setFilteredApplied(true);
+    setShowFilter(false);
+  };
+
+  const printFechaCreacion = () => {
+    const elementos = (
+      <>
+        <div className="flex flex-col gap-6 p-2 font-[Roboto] rounded-md">
+          <div className="flex flex-col gap-7">
+            <div>
+              <label htmlFor="fechaDesde" className="font-semibold">
+                Desde:{" "}
+              </label>
+              <div>
+                <input
+                  className="border-3 w-full border-gray-300 rounded-md p-1 cursor-pointer focus:outline-blue-500 focus:outline-3"
+                  id="fechaDesde"
+                  type="date"
+                  onFocus={() => setIsDateInputActive(true)}
+                  onBlur={() => setIsDateInputActive(false)}
+                />
+              </div>
+            </div>
+            <div className="flex flex-col gap-1">
+              <label htmlFor="fechaHasta" className="font-semibold">
+                Hasta:{" "}
+              </label>
+              <div>
+                <input
+                  className="border-3 w-full border-gray-300 rounded-md p-1 cursor-pointer focus:outline-blue-500 focus:outline-3"
+                  id="fechaHasta"
+                  type="date"
+                  onFocus={() => setIsDateInputActive(true)}
+                  onBlur={() => setIsDateInputActive(false)}
+                />
+              </div>
+            </div>
+          </div>
+          <button
+            onClick={filtrarFechaCreacion}
+            className="bg-blue-500 text-white px-4 py-2 rounded-md cursor-pointer"
+          >
+            Filtrar
+          </button>
+        </div>
+      </>
+    );
+    return elementos;
+  };
+
+  const mouseEnterCategorias = () => {
+    setShowFilterContent(true);
+    setShowCategorias(true);
+    setShowUnidadesMedida(false);
+    setShowFechaCreacion(false);
+  };
+
+  const mouseEnterUnidadesMedida = () => {
+    setShowFilterContent(true);
+    setShowUnidadesMedida(true);
+    setShowCategorias(false);
+    setShowFechaCreacion(false);
+  };
+
+  const mouseEnterFechaCreacion = () => {
+    setShowFilterContent(true);
+    setShowFechaCreacion(true);
+    setShowCategorias(false);
+    setShowUnidadesMedida(false);
+  };
+
+  const resetearFiltros = () => {
+    setListaMateriaPrimaFiltered([]);
+    setInputfilterDoubleApplied(false);
+    setFilteredApplied(false);
+    setShowFilter(false);
+    setInputfilterDoubleApplied(false);
+    setIsDateInputActive(false);
+  };
+
+  return (
+    <div
+      ref={filterButtonRef}
+      onMouseLeave={(e) => {
+        if (!isDateInputActive) {
+          const relatedTarget = e.relatedTarget as Node | null;
+          if (
+            !relatedTarget ||
+            !filterButtonRef.current?.contains(relatedTarget)
+          ) {
+            setShowFilterContent(false);
+          }
+        }
+      }}
+      className="relative z-6"
+    >
+      <button
+        type="button"
+        className="flex shadow-md gap-2 items-center bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-md hover:bg-blue-600 font-semibold font-[Roboto] text-white"
+        onClick={() => setShowFilter((prev) => !prev)}
+      >
+        <img src={MenuIcon} alt="Menu" />
+        Filtros
+      </button>
+
+      {showFilter && (
+        <div className="absolute top-12 left-[50%] translate-x-[-75%]">
+          {showFilterContent && (
+            <ul
+              className={`absolute top-0 right-0 translate-x-[-45%] w-55 p-2 border bg-white rounded-md shadow-2xl border-gray-300`}
+            >
+              {showCategorias && printCategorias()}
+              {showUnidadesMedida && printUnidadesMedida()}
+              {showFechaCreacion && printFechaCreacion()}
+            </ul>
+          )}
+
+          <ul className="absolute top-0 left-0 translate-x-[-50%] flex flex-col gap-2 p-2 bg-white rounded-md shadow-2xl w-50 border border-gray-300">
+            <FilterOption
+              mouseEnter={mouseEnterCategorias}
+              icon={FilledLeftArrowIcon}
+              title="Categoría"
+            />
+            <FilterOption
+              mouseEnter={mouseEnterUnidadesMedida}
+              icon={FilledLeftArrowIcon}
+              title="Unidad de medida"
+            />
+            <FilterOption
+              mouseEnter={mouseEnterFechaCreacion}
+              icon={FiltroIcon}
+              title="Fecha de creación"
+            />
+            <ResetFilterOption
+              onClick={() => {
+                if (filteredApplied) {
+                  resetearFiltros();
+                }
+              }}
+              icon={FiltroIcon}
+              title="Resetear filtros"
+            />
+          </ul>
+        </div>
+      )}
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterOption.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterOption.tsx
new file mode 100644
index 00000000..77e5fe98
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterOption.tsx
@@ -0,0 +1,19 @@
+export default function FilterOption({
+  mouseEnter,
+  icon,
+  title,
+}: {
+  mouseEnter: () => void;
+  icon: string;
+  title: string;
+}) {
+  return (
+    <li
+      onMouseEnter={mouseEnter}
+      className="flex items-center gap-2 p-2 font-semibold font-[Roboto] hover:bg-gray-200 cursor-pointer rounded-md"
+    >
+      <img src={icon} alt={icon} className="size-6" />
+      {title}
+    </li>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterSearch.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterSearch.tsx
new file mode 100644
index 00000000..c659c512
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/FilterSearch.tsx
@@ -0,0 +1,25 @@
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+import FilterButton from "./FilterButton";
+import ImportCSV from "../../../components/ImportCSV";
+import NewButton from "../../../components/NewButton";
+import SearchInput from "./SearchInput";
+
+export default function FilterSearch() {
+  const { setShowMateriaprimaForm } = useMateriaPrimaContext();
+
+  const handleNewButtonClick = () => {
+    setShowMateriaprimaForm(true);
+  };
+
+  return (
+    <div className="flex items-center px-8 justify-between">
+      <SearchInput />
+      <div className="flex gap-4">
+        <ImportCSV />
+        <FilterButton />
+        <NewButton onClick={handleNewButtonClick} />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesInputForm.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesInputForm.tsx
new file mode 100644
index 00000000..17239271
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesInputForm.tsx
@@ -0,0 +1,51 @@
+import type { UseFormRegister, Path } from "react-hook-form";
+import type { TLoteMateriaPrimaSchema } from "@/features/MateriaPrima/schemas/schemas";
+
+export const LotesInputForm = ({
+  typeInput,
+  name,
+  register,
+  placeholder = "",
+}: {
+  typeInput: string;
+  name: Path<TLoteMateriaPrimaSchema>;
+  register: UseFormRegister<TLoteMateriaPrimaSchema>;
+  placeholder?: string;
+}) => {
+  let inputElement: React.ReactNode = <></>;
+  if (typeInput === "textarea") {
+    inputElement = (
+      <textarea
+        {...register(name)}
+        name={name}
+        placeholder={placeholder}
+        rows={4}
+        className=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-xs font-[Roboto]
+                                            focus:outline-none focus:ring-indigo-500 focus:border-indigo-500
+                                            sm:text-sm resize-none"
+      />
+    );
+  } else {
+    inputElement = (
+      <input
+        type={typeInput}
+        {...register(name)}
+        name={name}
+        placeholder={placeholder}
+        className={`block w-full px-3 py-2 border border-gray-300 rounded-md shadow-xs
+                    focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm
+                    ${
+                      typeInput === "number"
+                        ? `/* Tailwind's way to hide WebKit arrows */
+                    [&::-webkit-outer-spin-button]:appearance-none
+                    [&::-webkit-inner-spin-button]:appearance-none
+                    
+                    /* Tailwind's way to hide Firefox arrows */
+                    [appearance:textfield]`
+                        : ""
+                    }`}
+      />
+    );
+  }
+  return <div className="basis-2/4">{inputElement}</div>;
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaDetalles.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaDetalles.tsx
new file mode 100644
index 00000000..d7bb79bc
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaDetalles.tsx
@@ -0,0 +1,216 @@
+import Title from "@/components/Title";
+import Button from "../../../../components/Button";
+import { DetailsField } from "../../../../components/DetailsField";
+import { DetailFieldValue } from "../../../../components/DetailFieldValue";
+import { DeleteComponent } from "../DeleteComponent";
+import { LotesMateriaPrimaFormShared } from "./LotesMateriaPrimaFormShared";
+import {
+  EditarIcon,
+  BorrarIcon,
+  CerrarIcon,
+  CheckIcon,
+} from "@/assets/DashboardAssets";
+import { TubeSpinner } from "@/assets";
+
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import {
+  useActivateLoteMateriaPrimaMutation,
+  useDeleteLoteMateriaPrimaMutation,
+} from "../../hooks/mutations/materiaPrimaMutations";
+
+export const LotesMateriaPrimaDetalles = () => {
+  const {
+    materiaprimaDetalles,
+    lotesMateriaPrimaDetalles,
+    registroDelete,
+    updateRegistro,
+    setShowMateriaprimaDetalles,
+    setShowLotesMateriaPrimaDetalles,
+    setUpdateRegistro,
+    setRegistroDelete,
+  } = useMateriaPrimaContext();
+
+  const { mutateAsync: deleteLote, isPending: isLoadingDelete } =
+    useDeleteLoteMateriaPrimaMutation(materiaprimaDetalles?.id, handleClose);
+
+  const { mutateAsync: activateLote, isPending: isLoadingActivate } =
+    useActivateLoteMateriaPrimaMutation(materiaprimaDetalles?.id, handleClose);
+
+  const handleEdit = () => {
+    setUpdateRegistro(true);
+  };
+
+  function handleClose() {
+    setShowMateriaprimaDetalles(true);
+    setUpdateRegistro(false);
+    setShowLotesMateriaPrimaDetalles(false);
+    setRegistroDelete(false);
+  }
+
+  const handleActivate = async () => {
+    if (lotesMateriaPrimaDetalles?.id) {
+      activateLote(lotesMateriaPrimaDetalles.id);
+    }
+  };
+
+  if (updateRegistro && lotesMateriaPrimaDetalles) {
+    return (
+      <LotesMateriaPrimaFormShared
+        title="Editar Lote"
+        isUpdate={true}
+        initialData={lotesMateriaPrimaDetalles}
+        onClose={() => {
+          setUpdateRegistro(false);
+          setShowLotesMateriaPrimaDetalles(true);
+        }}
+        onSubmitSuccess={() => {
+          setUpdateRegistro(false);
+          setShowLotesMateriaPrimaDetalles(false);
+        }}
+      />
+    );
+  }
+  return (
+    <div className="flex flex-col gap-5 mx-8 border border-gray-200 p-5 rounded-lg shadow-md h-full relative">
+      {isLoadingActivate && (
+        <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+          <img src={TubeSpinner} alt="Cargando..." className="size-28" />
+        </div>
+      )}
+      <div className="flex justify-between items-center">
+        <Title>Detalles de lote de materia prima</Title>
+        <div className="flex gap-2">
+          <Button type="edit" onClick={handleEdit}>
+            <div className="flex items-center gap-2">
+              Editar
+              <img src={EditarIcon} alt="Editar" />
+            </div>
+          </Button>
+          <Button type="delete" onClick={() => setRegistroDelete(true)}>
+            <div className="flex items-center gap-2">
+              Eliminar
+              <img src={BorrarIcon} alt="Eliminar" />
+            </div>
+          </Button>
+          <div className="ml-6">
+            <Button type="close" onClick={handleClose}>
+              <img src={CerrarIcon} alt="Cerrar" />
+            </Button>
+          </div>
+        </div>
+      </div>
+      {registroDelete && lotesMateriaPrimaDetalles?.id !== undefined && (
+        <DeleteComponent
+          deleteFunction={() =>
+            deleteLote(lotesMateriaPrimaDetalles.id as number)
+          }
+          isLoading={isLoadingDelete}
+        />
+      )}
+      <div className="flex flex-col gap-6">
+        <h2 className="text-xl font-semibold font-[Roboto] text-blue-600 border-b border-gray-300 pb-2">
+          Detalles
+        </h2>
+
+        <div className="flex items-center gap-20">
+          <div className="grid grid-rows-9 grid-cols-1 gap-2">
+            <DetailsField>
+              <div className="text-lg">Materia prima</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Proveedor</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Fecha de recepción</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Fecha de caducidad</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Cantidad recibida</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Stock actual</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Costo unitario USD</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Detalles Orden de Compra</div>
+            </DetailsField>
+            <DetailsField>
+              <div className="text-lg">Activo</div>
+            </DetailsField>
+          </div>
+          <div className="grid grid-rows-9 grid-cols-1 gap-2">
+            <DetailFieldValue>
+              <div className="text-lg">
+                {materiaprimaDetalles?.nombre || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.proveedor?.nombre_comercial || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.fecha_recepcion
+                  ? new Date(
+                      lotesMateriaPrimaDetalles?.fecha_recepcion,
+                    ).toLocaleDateString("es-ES")
+                  : "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.fecha_caducidad
+                  ? new Date(
+                      lotesMateriaPrimaDetalles?.fecha_caducidad,
+                    ).toLocaleDateString("es-ES")
+                  : "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.cantidad_recibida || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.stock_actual_lote || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.costo_unitario_usd || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.detalle_oc || "-"}
+              </div>
+            </DetailFieldValue>
+            <DetailFieldValue>
+              <div className="text-lg">
+                {lotesMateriaPrimaDetalles?.activo ? "SI" : "NO"}
+              </div>
+            </DetailFieldValue>
+          </div>
+        </div>
+      </div>
+      {lotesMateriaPrimaDetalles?.activo === false ? (
+        <div className="flex justify-end mt-auto mr-2">
+          <Button type="add" onClick={handleActivate}>
+            <div className="flex items-center gap-2 text-xl font-semibold">
+              Activar Lote
+              <img src={CheckIcon} alt="Activar Lote" className="size-7" />
+            </div>
+          </Button>
+        </div>
+      ) : (
+        ""
+      )}
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaFormShared.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaFormShared.tsx
new file mode 100644
index 00000000..4ea81156
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaFormShared.tsx
@@ -0,0 +1,149 @@
+import {
+  loteMateriaPrimaSchema,
+  type TLoteMateriaPrimaSchema,
+} from "@/features/MateriaPrima/schemas/schemas";
+import { useForm } from "react-hook-form";
+import { zodResolver } from "@hookform/resolvers/zod";
+import { useEffect, useState } from "react";
+import { TubeSpinner } from "@/assets";
+
+import Button from "../../../../components/Button";
+import { LotesMateriaPrimaInputContainer } from "./LotesMateriaPrimaInputContainer";
+import { LotesMateriaPrimaSelectContainer } from "./LotesMateriaPrimaSelectContainer";
+import type {
+  LoteMateriaPrimaFormSumit,
+  LotesMateriaPrimaFormSharedProps,
+  Proveedor,
+} from "@/features/MateriaPrima/types/types";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import { createProveedoresQueryOptions } from "@/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions";
+import { useQuery } from "@tanstack/react-query";
+import { useCreateUpdateLoteMateriaPrimaMutation } from "../../hooks/mutations/materiaPrimaMutations";
+
+export const LotesMateriaPrimaFormShared = ({
+  title,
+  isUpdate = false,
+  initialData,
+  onClose,
+  onSubmitSuccess,
+}: LotesMateriaPrimaFormSharedProps) => {
+  const { materiaprimaId } = useMateriaPrimaContext();
+  const {
+    register,
+    handleSubmit,
+    formState: { errors },
+    reset,
+  } = useForm<TLoteMateriaPrimaSchema>({
+    resolver: zodResolver(loteMateriaPrimaSchema),
+    defaultValues: initialData || {},
+  });
+
+  const [proveedores, setProveedores] = useState<Proveedor[]>([]);
+
+  const { mutate: createUpdateLoteMateriaPrima, isPending: isLoading } =
+    useCreateUpdateLoteMateriaPrimaMutation(
+      materiaprimaId!,
+      onSubmitSuccess,
+      reset,
+      isUpdate,
+      initialData?.id,
+    );
+
+  async function onSubmit(data: TLoteMateriaPrimaSchema) {
+    const formatedData: LoteMateriaPrimaFormSumit = {
+      ...data,
+      materia_prima: materiaprimaId!,
+      stock_actual_lote: data.cantidad_recibida,
+      detalle_oc: null,
+    };
+
+    createUpdateLoteMateriaPrima(formatedData);
+  }
+
+  const { data: proveedoresQuery } = useQuery(createProveedoresQueryOptions());
+
+  useEffect(() => {
+    if (proveedoresQuery) {
+      setProveedores(proveedoresQuery);
+    }
+  }, [proveedoresQuery]);
+
+  return (
+    <>
+      <form
+        onSubmit={handleSubmit(onSubmit)}
+        id="lote-form"
+        className="relative h-[95%]"
+      >
+        {isLoading ? (
+          <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+            <img src={TubeSpinner} alt="Cargando..." className="size-20" />
+          </div>
+        ) : (
+          ""
+        )}
+        <div className="flex flex-col mx-8 mt-4 rounded-md border border-gray-200 h-full shadow-md">
+          <div className="p-5 font-[Roboto] text-lg font-semibold border-b border-gray-300 bg-gray-50 rounded-t-md">
+            {title}
+          </div>
+          <div className="flex flex-col justify-between h-full">
+            <div className="flex flex-col gap-2 px-5 bg-white">
+              <div className="flex flex-col gap-8 py-8">
+                <LotesMateriaPrimaInputContainer
+                  inputType="number"
+                  title="Cantidad recibida"
+                  name="cantidad_recibida"
+                  register={register}
+                  errors={errors}
+                />
+                <LotesMateriaPrimaInputContainer
+                  inputType="number"
+                  title="Costo unitario USD"
+                  name="costo_unitario_usd"
+                  register={register}
+                  errors={errors}
+                />
+                <LotesMateriaPrimaSelectContainer
+                  title="Proveedor"
+                  name="proveedor_id"
+                  register={register}
+                  errors={errors}
+                >
+                  <option value="">Selecciona un proveedor</option>
+                  {proveedores.map(({ id, nombre_comercial }) => (
+                    <option key={id} value={id}>
+                      {nombre_comercial}
+                    </option>
+                  ))}
+                </LotesMateriaPrimaSelectContainer>
+
+                <LotesMateriaPrimaInputContainer
+                  inputType="date"
+                  title="Fecha de recepción"
+                  name="fecha_recepcion"
+                  register={register}
+                  errors={errors}
+                />
+                <LotesMateriaPrimaInputContainer
+                  inputType="date"
+                  title="Fecha de caducidad"
+                  name="fecha_caducidad"
+                  register={register}
+                  errors={errors}
+                />
+              </div>
+            </div>
+            <div className="flex gap-2 justify-end py-4 px-5 bg-white border-t border-gray-300">
+              <Button type="cancel" onClick={onClose}>
+                Cerrar
+              </Button>
+              <Button type="submit" onClick={() => {}}>
+                Guardar
+              </Button>
+            </div>
+          </div>
+        </div>
+      </form>
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaInputContainer.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaInputContainer.tsx
new file mode 100644
index 00000000..001dd530
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaInputContainer.tsx
@@ -0,0 +1,27 @@
+import type { LotesMateriaPrimaFormInputContainerProps } from "@/features/MateriaPrima/types/types";
+import { LotesInputForm } from "./LotesInputForm";
+
+export const LotesMateriaPrimaInputContainer = ({
+  inputType,
+  title,
+  name,
+  register,
+  errors,
+  optional,
+}: LotesMateriaPrimaFormInputContainerProps) => {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="flex items-center gap-2">
+        <div
+          className={`basis-1/4 font-[Roboto] text-sm font-semibold ${optional ? "text-black" : "text-red-500"}`}
+        >
+          {title}
+        </div>
+        <LotesInputForm typeInput={inputType} name={name} register={register} />
+      </div>
+      <div className="ml-[27%] text-red-500 text-xs">
+        {errors[name]?.message}
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaSelectContainer.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaSelectContainer.tsx
new file mode 100644
index 00000000..f787e8a4
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesMateriaPrimaSelectContainer.tsx
@@ -0,0 +1,28 @@
+import type { LotesMateriaPrimaFormSelectContainerProps } from "@/features/MateriaPrima/types/types";
+
+export const LotesMateriaPrimaSelectContainer = ({
+  title,
+  name,
+  register,
+  errors,
+  children,
+}: LotesMateriaPrimaFormSelectContainerProps) => {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="flex items-center gap-2">
+        <div className="basis-1/4 font-[Roboto] text-sm font-semibold text-red-500">
+          {title}
+        </div>
+        <select
+          {...register(name)}
+          className="basis-2/4 border border-gray-300 rounded-md p-2"
+        >
+          {children}
+        </select>
+      </div>
+      <div className="ml-[27%] text-red-500 text-xs">
+        {errors[name]?.message}
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTable.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTable.tsx
new file mode 100644
index 00000000..42445fb8
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTable.tsx
@@ -0,0 +1,59 @@
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+import { LotesTableRows } from "./LotesTableRows";
+import { LotesTableHeader } from "./LotesTableHeader";
+
+import type {
+  LoteMateriaPrimaFormResponse,
+  LoteMateriaPrima,
+} from "@/features/MateriaPrima/types/types";
+
+export const LotesTable = ({
+  lotes,
+}: {
+  lotes: LoteMateriaPrimaFormResponse[];
+}) => {
+  const {
+    lotesForm,
+    setLotesMateriaPrimaDetalles,
+    setShowLotesMateriaPrimaDetalles,
+    setShowLotesForm,
+  } = useMateriaPrimaContext();
+
+  const formatedLotes: LoteMateriaPrima[] = lotes.map((lote) => ({
+    id: lote.id!,
+    fecha_recepcion: new Date(lote.fecha_recepcion).toLocaleDateString("es-ES"),
+    fecha_caducidad: new Date(lote.fecha_caducidad).toLocaleDateString("es-ES"),
+    cantidad_recibida: lote.cantidad_recibida,
+    stock_actual_lote: lote.stock_actual_lote,
+    costo_unitario_usd: lote.costo_unitario_usd,
+    proveedor: lote.proveedor?.nombre_comercial || "-",
+    activo: lote.activo || false,
+  }));
+
+  const handleClick = (id: number) => {
+    const lote = lotesForm.find((lote) => lote.id === id);
+    if (lote) {
+      setLotesMateriaPrimaDetalles(lote);
+      setShowLotesMateriaPrimaDetalles(true);
+      setShowLotesForm(false);
+    }
+  };
+
+  return (
+    <div className="flex flex-col gap-2">
+      <LotesTableHeader
+        headers={[
+          "Fecha de recepción",
+          "Fecha de caducidad",
+          "Cantidad recibida",
+          "Stock actual",
+          "Costo unitario USD",
+          "Proveedor",
+          "Activo",
+        ]}
+      />
+      <LotesTableRows data={formatedLotes} onClick={handleClick} />
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableBody.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableBody.tsx
new file mode 100644
index 00000000..e7fb0f8d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableBody.tsx
@@ -0,0 +1,19 @@
+import { LotesTableHeader } from "./LotesTableHeader";
+
+export const LotesTableBody = () => {
+  return (
+    <div>
+      <LotesTableHeader
+        headers={[
+          "Fecha de recepción",
+          "Fecha de caducidad",
+          "Cantidad recibida",
+          "Stock actual",
+          "Costo unitario USD",
+          "Proveedor",
+          "Activo",
+        ]}
+      />
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableHeader.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableHeader.tsx
new file mode 100644
index 00000000..bbb001a2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableHeader.tsx
@@ -0,0 +1,9 @@
+export const LotesTableHeader = ({ headers }: { headers: string[] }) => {
+  return (
+    <div className="grid grid-cols-7 justify-between px-8 py-4 border-b border-t border-gray-300 bg-white font-bold font-[Roboto] text-sm">
+      {headers.map((header) => (
+        <div key={header}>{header}</div>
+      ))}
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableRows.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableRows.tsx
new file mode 100644
index 00000000..28e3eb90
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Lotes/LotesTableRows.tsx
@@ -0,0 +1,51 @@
+import type { LoteMateriaPrima } from "@/features/MateriaPrima/types/types";
+
+export const LotesTableRows = ({
+  data,
+  onClick,
+}: {
+  data: LoteMateriaPrima[];
+  onClick: (id: number) => void;
+}) => {
+  if (data.length === 0) return <></>;
+
+  if (data.length > 1) {
+    data.sort((a, b) => {
+      const dateA = new Date(a.fecha_caducidad);
+      const dateB = new Date(b.fecha_caducidad);
+      return dateA.getTime() - dateB.getTime();
+    });
+
+    const activeLote = data.find((item) => item.activo);
+    if (activeLote) {
+      data.splice(data.indexOf(activeLote), 1);
+      data.unshift(activeLote);
+    }
+  }
+
+  return (
+    <>
+      {data.map((item) => (
+        <div
+          onClick={() => onClick(item.id)}
+          key={item.id}
+          className={`cursor-pointer grid grid-cols-7 justify-between items-center px-8 py-4 border-b border-gray-300 bg-white font-[Roboto] text-sm`}
+        >
+          <div>{item.fecha_recepcion}</div>
+          <div>{item.fecha_caducidad}</div>
+          <div>{item.cantidad_recibida}</div>
+          <div>{item.stock_actual_lote}</div>
+          <div>{item.costo_unitario_usd}</div>
+          <div>{item.proveedor}</div>
+          <div>
+            {item.activo ? (
+              <div className="font-bold pl-3 text-green-700">SI</div>
+            ) : (
+              <div className="font-bold pl-3 text-red-600">NO</div>
+            )}
+          </div>
+        </div>
+      ))}
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaInputForm.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaInputForm.tsx
new file mode 100644
index 00000000..2eeeef20
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaInputForm.tsx
@@ -0,0 +1,51 @@
+import type { UseFormRegister, Path } from "react-hook-form";
+import type { TMateriaPrimaSchema } from "@/features/MateriaPrima/schemas/schemas";
+
+export default function MateriaInputForm({
+  typeInput,
+  name,
+  placeholder = "",
+  register,
+}: {
+  typeInput: string;
+  name: Path<TMateriaPrimaSchema>;
+  placeholder?: string;
+  register: UseFormRegister<TMateriaPrimaSchema>;
+}) {
+  let inputElement: React.ReactNode = <></>;
+  if (typeInput === "textarea") {
+    inputElement = (
+      <textarea
+        {...register(name)}
+        name={name}
+        placeholder={placeholder}
+        rows={4}
+        className=" block w-full px-3 py-2 border border-gray-300 rounded-md shadow-xs font-[Roboto]
+                                            focus:outline-none focus:ring-indigo-500 focus:border-indigo-500
+                                            sm:text-sm resize-none"
+      />
+    );
+  } else {
+    inputElement = (
+      <input
+        type={typeInput}
+        {...register(name)}
+        name={name}
+        placeholder={placeholder}
+        className={`block w-full px-3 py-2 border border-gray-300 rounded-md shadow-xs
+                    focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm
+                    ${
+                      typeInput === "number"
+                        ? `/* Tailwind's way to hide WebKit arrows */
+                    [&::-webkit-outer-spin-button]:appearance-none
+                    [&::-webkit-inner-spin-button]:appearance-none
+                    
+                    /* Tailwind's way to hide Firefox arrows */
+                    [appearance:textfield]`
+                        : ""
+                    }`}
+      />
+    );
+  }
+  return <div className="basis-2/4">{inputElement}</div>;
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaDetalles.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaDetalles.tsx
new file mode 100644
index 00000000..15b79cc5
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaDetalles.tsx
@@ -0,0 +1,182 @@
+import { useEffect } from "react";
+
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import {
+  EditarIcon,
+  BorrarIcon,
+  CerrarIcon,
+  PlussignIcon,
+} from "@/assets/DashboardAssets";
+import { TubeSpinner } from "@/assets";
+
+import Button from "../../../components/Button";
+import Title from "@/components/Title";
+import { LotesTable } from "./Lotes/LotesTable";
+import { DeleteComponent } from "./DeleteComponent";
+import MateriaPrimaFormShared from "./MateriaPrimaFormShared";
+import { LotesMateriaPrimaFormShared } from "./Lotes/LotesMateriaPrimaFormShared";
+import { LotesMateriaPrimaDetalles } from "./Lotes/LotesMateriaPrimaDetalles";
+
+import { useDeleteMateriaPrimaMutation } from "../hooks/mutations/materiaPrimaMutations";
+import { useLotesMateriaPrimaQuery } from "../hooks/queries/queries";
+import { TitleDetails } from "@/components/TitleDetails";
+import { DetailsTable } from "./DetailsTable";
+
+export const MaterialPrimaDetalles = () => {
+  const {
+    showMateriaprimaDetalles,
+    setShowMateriaprimaDetalles,
+    materiaprimaId,
+    materiaprimaDetalles,
+    setMateriaprimaDetalles,
+    registroDelete,
+    setRegistroDelete,
+    updateRegistro,
+    setUpdateRegistro,
+    showLotesForm,
+    setShowLotesForm,
+    lotesForm,
+    setLotesForm,
+    showLotesMateriaPrimaDetalles,
+  } = useMateriaPrimaContext();
+
+  const { mutateAsync: deleteMateriaPrima, isPending } =
+    useDeleteMateriaPrimaMutation(handleClose, materiaprimaId!);
+
+  const { data: lotesData, isFetching: isLoadingLotes } =
+    useLotesMateriaPrimaQuery(materiaprimaId, showMateriaprimaDetalles);
+
+  useEffect(() => {
+    if (lotesData && lotesData.success) {
+      setLotesForm(lotesData.lotes);
+    }
+  }, [lotesData, setLotesForm, showMateriaprimaDetalles]);
+
+  if (!showMateriaprimaDetalles) return <></>;
+
+  function handleClose() {
+    setShowMateriaprimaDetalles(false);
+    setMateriaprimaDetalles(null);
+    setUpdateRegistro(false);
+  }
+
+  const handleCloseUpdate = () => {
+    setUpdateRegistro(false);
+  };
+
+  if (showLotesMateriaPrimaDetalles) {
+    return <LotesMateriaPrimaDetalles />;
+  }
+
+  if (showLotesForm) {
+    return (
+      <LotesMateriaPrimaFormShared
+        title="Nuevo Lote"
+        onClose={() => {
+          setShowLotesForm(false);
+          setShowMateriaprimaDetalles(true);
+        }}
+        onSubmitSuccess={() => {
+          setShowLotesForm(false);
+          setShowMateriaprimaDetalles(true);
+        }}
+      />
+    );
+  }
+
+  if (updateRegistro && materiaprimaDetalles) {
+    return (
+      <MateriaPrimaFormShared
+        isUpdate={true}
+        initialData={materiaprimaDetalles}
+        title="Editar Materia Prima"
+        onClose={handleCloseUpdate}
+        onSubmitSuccess={() => {
+          handleClose();
+        }}
+      />
+    );
+  }
+
+  return (
+    <div className="flex flex-col gap-5 mx-8 border border-gray-200 p-5 rounded-lg shadow-md h-full">
+      <div className="flex justify-between items-center">
+        <Title>{materiaprimaDetalles?.nombre || "-"}</Title>
+        <div className="flex gap-2">
+          <Button type="edit" onClick={() => setUpdateRegistro(true)}>
+            <div className="flex items-center gap-2">
+              Editar
+              <img src={EditarIcon} alt="Editar" />
+            </div>
+          </Button>
+          <Button
+            type="delete"
+            onClick={() => {
+              setRegistroDelete(true);
+            }}
+          >
+            <div className="flex items-center gap-2">
+              Eliminar
+              <img src={BorrarIcon} alt="Eliminar" />
+            </div>
+          </Button>
+          <div className="ml-6">
+            <Button type="close" onClick={handleClose}>
+              <img src={CerrarIcon} alt="Cerrar" />
+            </Button>
+          </div>
+        </div>
+      </div>
+
+      {registroDelete && materiaprimaId !== null && (
+        <DeleteComponent
+          deleteFunction={() => deleteMateriaPrima(materiaprimaId!)}
+          isLoading={isPending}
+        />
+      )}
+      <div className="flex flex-col gap-6">
+        <TitleDetails>
+          Detalles
+        </TitleDetails>
+        {materiaprimaDetalles && (
+          <DetailsTable materiaprimaDetalles={materiaprimaDetalles} />
+        )}
+    
+      </div>
+
+      <div className="flex flex-col gap-4 mt-5 h-full">
+        <div className="flex justify-between items-center pr-5">
+          <Title extraClass="text-blue-600">Lotes de materia prima</Title>
+          <Button
+            type="add"
+            onClick={() => {
+              setShowLotesForm(true);
+            }}
+          >
+            <div className="flex items-center gap-2">
+              Agregar Lote
+              <img
+                className="p-0.5 border border-white rounded-full size-7"
+                src={PlussignIcon}
+                alt="agregar"
+              />
+            </div>
+          </Button>
+        </div>
+        {isLoadingLotes ? (
+          <div className="flex justify-center items-center h-full rounded-md border border-gray-300">
+            <img src={TubeSpinner} alt="Cargando..." className="size-28" />
+          </div>
+        ) : lotesForm.length > 0 ? (
+          <LotesTable lotes={lotesForm} />
+        ) : (
+          <div className="flex justify-center items-center h-full rounded-md border border-gray-300">
+            <p className="text-lg text-gray-500 font-bold font-[Roboto]">
+              No hay lotes registrados
+            </p>
+          </div>
+        )}
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormInputContainer.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormInputContainer.tsx
new file mode 100644
index 00000000..fa96f1ce
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormInputContainer.tsx
@@ -0,0 +1,31 @@
+import MateriaInputForm from "./MateriaInputForm";
+import type { MateriaPrimaFormInputContainerProps } from "@/features/MateriaPrima/types/types";
+
+export const MateriaPrimaFormInputContainer = ({
+  inputType,
+  title,
+  name,
+  register,
+  errors,
+  optional,
+}: MateriaPrimaFormInputContainerProps) => {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="flex items-center gap-2">
+        <div
+          className={`basis-1/4 font-[Roboto] text-sm font-semibold ${optional ? "text-black" : "text-red-500"}`}
+        >
+          {title}
+        </div>
+        <MateriaInputForm
+          typeInput={inputType}
+          name={name}
+          register={register}
+        />
+      </div>
+      <div className="ml-[27%] text-red-500 text-xs">
+        {errors[name]?.message}
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormSelectContainer.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormSelectContainer.tsx
new file mode 100644
index 00000000..890b13a4
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormSelectContainer.tsx
@@ -0,0 +1,31 @@
+import type { MateriaPrimaFormSelectContainerProps } from "@/features/MateriaPrima/types/types";
+
+export const MateriaPrimaFormSelectContainer = ({
+  title,
+  name,
+  register,
+  errors,
+  children,
+  optional,
+}: MateriaPrimaFormSelectContainerProps) => {
+  return (
+    <div className="flex flex-col gap-1">
+      <div className="flex items-center gap-2">
+        <div
+          className={`basis-1/4 font-[Roboto] text-sm font-semibold ${optional ? "text-black" : "text-red-500"}`}
+        >
+          {title}
+        </div>
+        <select
+          {...register(name)}
+          className="basis-2/4 border border-gray-300 rounded-md p-2"
+        >
+          {children}
+        </select>
+      </div>
+      <div className="ml-[27%] text-red-500 text-xs">
+        {errors[name]?.message}
+      </div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormShared.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormShared.tsx
new file mode 100644
index 00000000..82fae512
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaFormShared.tsx
@@ -0,0 +1,317 @@
+import { useForm } from "react-hook-form";
+
+import { zodResolver } from "@hookform/resolvers/zod";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import { TubeSpinner } from "@/assets";
+
+import type { TMateriaPrimaSchema } from "@/features/MateriaPrima/schemas/schemas";
+import type {
+  MateriaPrimaFormSharedProps,
+  submitMateriaPrima,
+} from "@/features/MateriaPrima/types/types";
+
+import { materiaPrimaSchema } from "@/features/MateriaPrima/schemas/schemas";
+
+import Button from "../../../components/Button";
+import { MateriaPrimaFormInputContainer } from "./MateriaPrimaFormInputContainer";
+import { MateriaPrimaFormSelectContainer } from "./MateriaPrimaFormSelectContainer";
+import { useCreateUpdateMateriaPrimaMutation } from "../hooks/mutations/materiaPrimaMutations";
+
+export default function MateriaPrimaFormShared({
+  isUpdate = false,
+  initialData,
+  onClose,
+  onSubmitSuccess,
+  title,
+}: MateriaPrimaFormSharedProps) {
+  const { categoriasMateriaPrima, unidadesMedida } = useMateriaPrimaContext();
+
+  const {
+    register,
+    formState: { errors },
+    handleSubmit,
+    setError,
+    reset,
+  } = useForm<TMateriaPrimaSchema>({
+    resolver: zodResolver(materiaPrimaSchema),
+    defaultValues:
+      isUpdate && initialData
+        ? {
+            nombre: initialData.nombre,
+            SKU: initialData.SKU,
+            nombre_empaque_estandar: initialData.nombre_empaque_estandar || "",
+            cantidad_empaque_estandar:
+              initialData.cantidad_empaque_estandar || undefined,
+            unidad_medida_empaque_estandar:
+              initialData.unidad_medida_empaque_estandar_detail?.id,
+            punto_reorden: initialData.punto_reorden,
+            unidad_medida_base: initialData.unidad_medida_base_detail.id,
+            categoria: initialData.categoria_detail.id,
+            descripcion: initialData.descripcion || "",
+          }
+        : {},
+  });
+
+  const {
+    mutate: handleMateriaPrimaMutation,
+    isPending: isMateriaPrimaMutationPending,
+  } = useCreateUpdateMateriaPrimaMutation(
+    onSubmitSuccess,
+    setError,
+    initialData?.id,
+  );
+
+  function renderCategoriasMateriaPrima() {
+    if (isUpdate && initialData) {
+      return (
+        <>
+          <option value={initialData.categoria_detail?.id}>
+            {initialData.categoria_detail?.nombre_categoria}
+          </option>
+          {categoriasMateriaPrima.map(
+            ({
+              id,
+              nombre_categoria,
+            }: {
+              id: number;
+              nombre_categoria: string;
+            }) =>
+              id !== initialData.categoria_detail?.id && (
+                <option key={id} value={id}>
+                  {nombre_categoria}
+                </option>
+              ),
+          )}
+        </>
+      );
+    }
+
+    return (
+      <>
+        <option value="">Seleccione una categoria</option>
+        {categoriasMateriaPrima.map(
+          ({
+            id,
+            nombre_categoria,
+          }: {
+            id: number;
+            nombre_categoria: string;
+          }) => (
+            <option key={id} value={id}>
+              {nombre_categoria}
+            </option>
+          ),
+        )}
+      </>
+    );
+  }
+
+  function renderUnidadesMedida(type: string) {
+    if (type === "base" && isUpdate && initialData) {
+      return (
+        <>
+          <option value={initialData.unidad_medida_base_detail.id}>
+            {initialData.unidad_medida_base_detail.nombre_completo}
+          </option>
+          {unidadesMedida.map(
+            ({
+              id,
+              nombre_completo,
+            }: {
+              id: number;
+              nombre_completo: string;
+            }) =>
+              id !== initialData.unidad_medida_base_detail.id && (
+                <option key={id} value={id}>
+                  {nombre_completo}
+                </option>
+              ),
+          )}
+        </>
+      );
+    } else if (
+      type === "empaque" &&
+      isUpdate &&
+      initialData &&
+      initialData.unidad_medida_empaque_estandar_detail
+    ) {
+      return (
+        <>
+          <option value={initialData.unidad_medida_empaque_estandar_detail.id}>
+            {initialData.unidad_medida_empaque_estandar_detail.nombre_completo}
+          </option>
+          {unidadesMedida.map(
+            ({
+              id,
+              nombre_completo,
+            }: {
+              id: number;
+              nombre_completo: string;
+            }) =>
+              id !== initialData.unidad_medida_empaque_estandar_detail.id && (
+                <option key={id} value={id}>
+                  {nombre_completo}
+                </option>
+              ),
+          )}
+        </>
+      );
+    }
+
+    return (
+      <>
+        <option value="">Seleccione una unidad de medida</option>
+        {unidadesMedida.map(
+          ({
+            id,
+            nombre_completo,
+          }: {
+            id: number;
+            nombre_completo: string;
+          }) => (
+            <option key={id} value={id}>
+              {nombre_completo}
+            </option>
+          ),
+        )}
+      </>
+    );
+  }
+
+  const handleCancelButtonClick = () => {
+    if (isUpdate) {
+      reset();
+      onClose();
+    } else {
+      onClose();
+    }
+  };
+
+  const onSubmit = async (data: TMateriaPrimaSchema) => {
+    //Clean up the data before sending
+    const cleanedData: submitMateriaPrima = {
+      ...data,
+      cantidad_empaque_estandar: data.cantidad_empaque_estandar || null,
+      unidad_medida_empaque_estandar:
+        data.unidad_medida_empaque_estandar || null,
+      nombre_empaque_estandar: data.nombre_empaque_estandar?.trim() || null,
+      descripcion: data.descripcion?.trim() || null,
+    };
+
+    handleMateriaPrimaMutation(cleanedData);
+  };
+
+  return (
+    <form
+      onSubmit={handleSubmit(onSubmit)}
+      id="materiaprima-form"
+      className="relative "
+    >
+      {isMateriaPrimaMutationPending ? (
+        <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+          <img src={TubeSpinner} alt="Cargando..." className="size-20" />
+        </div>
+      ) : (
+        ""
+      )}
+      <div className="flex flex-col mx-8 mt-4 rounded-md border border-gray-200 shadow-md">
+        <div className="p-5 font-[Roboto] text-lg font-semibold border-b border-gray-300 bg-gray-50 rounded-t-md">
+          {title}
+        </div>
+        <div className="flex flex-col gap-2 px-5 bg-white">
+          <div className="flex flex-col gap-2 border-b border-gray-300 py-8">
+            <MateriaPrimaFormInputContainer
+              inputType="text"
+              title="Nombre"
+              name="nombre"
+              register={register}
+              errors={errors}
+            />
+            <MateriaPrimaFormInputContainer
+              inputType="text"
+              title="SKU"
+              name="SKU"
+              register={register}
+              errors={errors}
+            />
+            <MateriaPrimaFormInputContainer
+              inputType="text"
+              title="Nombre del empaque"
+              name="nombre_empaque_estandar"
+              register={register}
+              errors={errors}
+              optional={true}
+            />
+            <MateriaPrimaFormInputContainer
+              inputType="number"
+              title="Cantidad del empaque"
+              name="cantidad_empaque_estandar"
+              register={register}
+              errors={errors}
+              optional={true}
+            />
+
+            <MateriaPrimaFormSelectContainer
+              title="Unidad de medida empaque"
+              name="unidad_medida_empaque_estandar"
+              register={register}
+              errors={errors}
+              optional={true}
+            >
+              {isUpdate && initialData
+                ? renderUnidadesMedida("empaque")
+                : renderUnidadesMedida("")}
+            </MateriaPrimaFormSelectContainer>
+          </div>
+
+          <div className="flex flex-col gap-2 py-8 border-b border-gray-300">
+            <MateriaPrimaFormInputContainer
+              inputType="number"
+              title="Punto de reorden"
+              name="punto_reorden"
+              register={register}
+              errors={errors}
+            />
+
+            <MateriaPrimaFormSelectContainer
+              title="Unidad de medida base"
+              name="unidad_medida_base"
+              register={register}
+              errors={errors}
+            >
+              {isUpdate && initialData
+                ? renderUnidadesMedida("base")
+                : renderUnidadesMedida("")}
+            </MateriaPrimaFormSelectContainer>
+
+            <MateriaPrimaFormSelectContainer
+              title="Categoria"
+              name="categoria"
+              register={register}
+              errors={errors}
+            >
+              {renderCategoriasMateriaPrima()}
+            </MateriaPrimaFormSelectContainer>
+
+            <MateriaPrimaFormInputContainer
+              inputType="textarea"
+              title="Descripcion"
+              name="descripcion"
+              register={register}
+              errors={errors}
+              optional={true}
+            />
+          </div>
+        </div>
+        <div className="flex gap-2 justify-end py-4 px-5 bg-white">
+          <Button type="cancel" onClick={handleCancelButtonClick}>
+            Cancelar
+          </Button>
+          <Button type="submit" onClick={() => {}}>
+            Guardar
+          </Button>
+        </div>
+      </div>
+    </form>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaLista.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaLista.tsx
new file mode 100644
index 00000000..fdb39dd6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaLista.tsx
@@ -0,0 +1,33 @@
+import { TubeSpinner } from "@/assets";
+
+import { TableBody } from "@/features/MateriaPrima/components/TableBody";
+import { TableHeader } from "@/features/MateriaPrima/components/TableHeader";
+
+export default function MateriaPrimaLista({isLoadingDetalles}: {isLoadingDetalles: boolean}) {
+
+  return (
+    <>
+        <div className="relative mx-8 border border-gray-200 rounded-md min-h-[80%]">
+          <TableHeader
+            headers={[
+              "Id",
+              "Nombre",
+              "Unidad de medida",
+              "Categoria",
+              "Cantidad",
+              "Punto de reorden",
+              "Fecha de creación",
+            ]}
+          />
+          <TableBody />
+          {isLoadingDetalles ? (
+            <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+              <img src={TubeSpinner} alt="Cargando..." className="size-28" />
+            </div>
+          ) : (
+            ""
+          )}
+        </div>
+    </>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaPanel.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaPanel.tsx
new file mode 100644
index 00000000..b110b848
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriaPrimaPanel.tsx
@@ -0,0 +1,20 @@
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+import FilterSearch from "@/features/MateriaPrima/components/FilterSearch";
+import MateriaPrimaLista from "./MateriaPrimaLista";
+
+export default function MateriaPrimaPanel() {
+  const { showMateriaprimaForm, showMateriaprimaDetalles, isLoadingDetalles } =
+    useMateriaPrimaContext();
+
+  if (showMateriaprimaForm || showMateriaprimaDetalles) return <></>;
+
+  return (
+    <>
+      <div className="flex flex-col gap-6 h-full">
+        <FilterSearch />
+        <MateriaPrimaLista isLoadingDetalles={isLoadingDetalles} />
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriasPrimasForma.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriasPrimasForma.tsx
new file mode 100644
index 00000000..8038655f
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/MateriasPrimasForma.tsx
@@ -0,0 +1,21 @@
+import MateriaPrimaFormShared from "./MateriaPrimaFormShared";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+export default function MateriasPrimasForma() {
+  const { showMateriaprimaForm, setShowMateriaprimaForm } =
+    useMateriaPrimaContext();
+
+  const handleSuccessClose = () => {
+    setShowMateriaprimaForm(false);
+  };
+
+  if (!showMateriaprimaForm) return <></>;
+
+  return (
+    <MateriaPrimaFormShared
+      title="Nueva Materia Prima"
+      onClose={handleSuccessClose}
+      onSubmitSuccess={handleSuccessClose}
+    />
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/ResetFilterOption.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/ResetFilterOption.tsx
new file mode 100644
index 00000000..e8e14585
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/ResetFilterOption.tsx
@@ -0,0 +1,23 @@
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+export default function ResetFilterOption({
+  onClick,
+  icon,
+  title,
+}: {
+  onClick: () => void;
+  icon: string;
+  title: string;
+}) {
+  const { filteredApplied } = useMateriaPrimaContext();
+
+  return (
+    <li
+      onClick={onClick}
+      className={`flex items-center gap-2 p-2 font-semibold font-[Roboto] hover:bg-gray-200 rounded-md ${filteredApplied ? "text-black cursor-pointer" : "text-gray-400 cursor-not-allowed"}`}
+    >
+      <img src={icon} alt={icon} className="size-6" />
+      {title}
+    </li>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SearchInput.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SearchInput.tsx
new file mode 100644
index 00000000..637609cc
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SearchInput.tsx
@@ -0,0 +1,102 @@
+import React from "react";
+import type { KeyboardEvent } from "react";
+import type { MateriaPrimaList } from "@/features/MateriaPrima/types/types";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import { XIcon, SearchIcon } from "@/assets/DashboardAssets";
+
+export default function SearchInput() {
+  const {
+    searchInputRef,
+    listaMateriaPrimaCached,
+    listaMateriaPrimaFiltered,
+    MPFilteredInputSearchApplied,
+    filteredApplied,
+    inputfilterDoubleApplied,
+    setListaMateriaPrimaFiltered,
+    setListaMateriaPrimaFilteredInputSearch,
+    setMPFilteredInputSearchApplied,
+    setFilteredApplied,
+    setInputfilterDoubleApplied,
+  } = useMateriaPrimaContext();
+
+  const handleSearchInputChange = (
+    e: KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLButtonElement>,
+  ) => {
+    if ("key" in e && e.key !== "Enter") return;
+
+    const searchValue = searchInputRef.current?.value;
+
+    if (searchValue === "") {
+      setListaMateriaPrimaFilteredInputSearch([]);
+      setMPFilteredInputSearchApplied(false);
+      return;
+    }
+
+    let filteredMateriaPrimaByName: MateriaPrimaList[] = [];
+
+    if (filteredApplied) {
+      filteredMateriaPrimaByName = listaMateriaPrimaFiltered.filter(
+        (materiaprima) =>
+          materiaprima.name
+            .toLowerCase()
+            .includes(searchValue?.toLowerCase() || ""),
+      );
+    } else if (listaMateriaPrimaCached.length > 0) {
+      filteredMateriaPrimaByName = listaMateriaPrimaCached.filter(
+        (materiaprima) =>
+          materiaprima.name
+            .toLowerCase()
+            .includes(searchValue?.toLowerCase() || ""),
+      );
+    }
+
+    if (inputfilterDoubleApplied) {
+      setListaMateriaPrimaFiltered(filteredMateriaPrimaByName);
+    } else {
+      setListaMateriaPrimaFilteredInputSearch(filteredMateriaPrimaByName);
+    }
+    setMPFilteredInputSearchApplied(true);
+  };
+
+  const handleResetSearch = () => {
+    if (inputfilterDoubleApplied) {
+      // resetear filtros de categorias y unidades de medida en caso de que se haya aplicado un filtro doble
+      setListaMateriaPrimaFiltered([]);
+      setInputfilterDoubleApplied(false);
+      setFilteredApplied(false);
+    }
+    setListaMateriaPrimaFilteredInputSearch([]);
+    setMPFilteredInputSearchApplied(false);
+    searchInputRef.current!.value = "";
+  };
+
+  return (
+    <div className="w-[400px] shadow-sm bg-white rounded-full flex items-center justify-between gap-4 p-1 relative border border-gray-200">
+      <div className="flex-1 pl-4">
+        <input
+          id="searchInput"
+          type="text"
+          placeholder="Buscar materia prima..."
+          className="font-semibold font-[Roboto] outline-none w-full"
+          ref={searchInputRef}
+          onKeyDown={handleSearchInputChange}
+        />
+      </div>
+      {MPFilteredInputSearchApplied && (
+        <button
+          onClick={handleResetSearch}
+          className="absolute right-[13%] flex items-center justify-center p-0.5 rounded-full bg-gray-200 cursor-pointer hover:bg-gray-300 "
+        >
+          <img className="size-4" src={XIcon} alt="X" />
+        </button>
+      )}
+
+      <button
+        className="bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-full hover:bg-blue-600"
+        onClick={handleSearchInputChange}
+      >
+        <img src={SearchIcon} alt="Search" />
+      </button>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SelectInput.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SelectInput.tsx
new file mode 100644
index 00000000..05d11d27
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/SelectInput.tsx
@@ -0,0 +1,35 @@
+import type { UseFormRegister } from "react-hook-form";
+import type { TMateriaPrimaSchema } from "@/features/MateriaPrima/schemas/schemas";
+import type { Path } from "react-hook-form";
+import type { FieldErrors } from "react-hook-form";
+
+export default function SelectInput({
+  name,
+  register,
+  options,
+  errors,
+}: {
+  name: Path<TMateriaPrimaSchema>;
+  register: UseFormRegister<TMateriaPrimaSchema>;
+  options: string[];
+  errors: FieldErrors<TMateriaPrimaSchema>;
+}) {
+  return (
+    <div className="flex items-center gap-2">
+      <div className="basis-1/4 font-[Roboto] text-sm font-semibold text-red-500">
+        Categoria
+      </div>
+      <select
+        {...register(name)}
+        className="basis-2/4 border border-gray-300 rounded-md p-2"
+      >
+        {options.map((option, index) => (
+          <option key={index + 1} value={option}>
+            {option}
+          </option>
+        ))}
+      </select>
+      <div className="text-red-500 text-xs">{errors[name]?.message}</div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableBody.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableBody.tsx
new file mode 100644
index 00000000..468aa9ce
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableBody.tsx
@@ -0,0 +1,75 @@
+import { useEffect } from "react";
+import { useQuery } from "@tanstack/react-query";
+import { createMateriaPrimaListQueryOptions } from "@/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions";
+import { DoubleSpinner } from "@/assets";
+
+import type { MateriaPrimaList } from "@/features/MateriaPrima/types/types";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+
+import { TableRows } from "./TableRows";
+
+export const TableBody = () => {
+  const {
+    listaMateriaPrimaCached,
+    setListaMateriaPrimaCached,
+    listaMateriaPrimaFiltered,
+    filteredApplied,
+    listaMateriaPrimaFilteredInputSearch,
+    MPFilteredInputSearchApplied,
+    inputfilterDoubleApplied,
+  } = useMateriaPrimaContext();
+
+  const { data: materiaPrimaList, isFetching: isMateriaPrimaListFetching } =
+    useQuery(createMateriaPrimaListQueryOptions());
+
+  useEffect(() => {
+    if (materiaPrimaList) {
+      setListaMateriaPrimaCached(materiaPrimaList);
+    }
+  }, [materiaPrimaList, setListaMateriaPrimaCached]);
+
+  const getDisplayData = (): MateriaPrimaList[] | null => {
+    if (inputfilterDoubleApplied) {
+      return listaMateriaPrimaFiltered.length > 0
+        ? listaMateriaPrimaFiltered
+        : null;
+    }
+
+    if (MPFilteredInputSearchApplied) {
+      return listaMateriaPrimaFilteredInputSearch.length > 0
+        ? listaMateriaPrimaFilteredInputSearch
+        : null;
+    }
+
+    if (filteredApplied) {
+      return listaMateriaPrimaFiltered.length > 0
+        ? listaMateriaPrimaFiltered
+        : null;
+    }
+
+    return listaMateriaPrimaCached.length > 0 ? listaMateriaPrimaCached : null;
+  };
+
+  const displayData = getDisplayData()?.sort((a, b) => a.id - b.id);
+
+  const NoDataMessage = () => (
+    <div className="flex justify-center h-full items-center font-bold text-2xl text-gray-700">
+      No hay datos Registrados
+    </div>
+  );
+
+  return (
+    <>
+      {isMateriaPrimaListFetching ? (
+        <div className="flex justify-center h-full font-bold text-2xl text-black items-center">
+          <img src={DoubleSpinner} alt="Cargando..." className="size-28" />
+          <span className="ml-2">Cargando...</span>
+        </div>
+      ) : displayData ? (
+        <TableRows data={displayData} />
+      ) : (
+        <NoDataMessage />
+      )}
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableHeader.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableHeader.tsx
new file mode 100644
index 00000000..00680afc
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableHeader.tsx
@@ -0,0 +1,9 @@
+export const TableHeader = ({ headers }: { headers: string[] }) => {
+  return (
+    <div className="grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr] justify-between px-8 py-4 border-b border-gray-300 font-semibold font-[Roboto] text-sm bg-[#f7feff] text-[#1261A0] rounded-t-md">
+      {headers.map((header) => (
+        <div key={header}>{header}</div>
+      ))}
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableRows.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableRows.tsx
new file mode 100644
index 00000000..a7896866
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/TableRows.tsx
@@ -0,0 +1,13 @@
+import { TableRow } from "./Tablerow";
+
+import type { MateriaPrimaList } from "@/features/MateriaPrima/types/types";
+
+export const TableRows = ({ data }: { data: MateriaPrimaList[] }) => {
+  return (
+    <>
+      {data.map((item, index) => (
+        <TableRow item={item} index={index} key={item.id} />
+      ))}
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Tablerow.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Tablerow.tsx
new file mode 100644
index 00000000..b72626ca
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/components/Tablerow.tsx
@@ -0,0 +1,49 @@
+import type { MateriaPrimaList } from "@/features/MateriaPrima/types/types";
+import { useMateriaPrimaContext } from "@/context/MateriaPrimaContext";
+import { createMateriaPrimaListPKQueryOptions } from "@/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions";
+import { useQueryClient } from "@tanstack/react-query";
+
+export const TableRow = ({
+  item,
+  index,
+}: {
+  item: MateriaPrimaList;
+  index: number;
+}) => {
+  const queryClient = useQueryClient();
+  const {
+    setShowMateriaprimaDetalles,
+    setMateriaprimaDetalles,
+    setMateriaprimaId,
+    setLotesForm,
+    setIsLoadingDetalles,
+  } = useMateriaPrimaContext();
+
+  async function setDetails(pk: number) {
+    setIsLoadingDetalles(true);
+    const materiaPrimaListPK = await queryClient.fetchQuery(
+      createMateriaPrimaListPKQueryOptions(pk),
+    );
+    setShowMateriaprimaDetalles(true);
+    setMateriaprimaDetalles(materiaPrimaListPK || null);
+    setMateriaprimaId(pk);
+    setLotesForm([]);
+    setIsLoadingDetalles(false);
+  }
+
+  return (
+    <div
+      onClick={() => setDetails(item.id)}
+      key={item.id}
+      className={`cursor-pointer hover:bg-gray-100 grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr] justify-between items-center px-8 py-4 border-b border-gray-300 ${index % 2 == 0 ? "bg-white" : "bg-gray-50"} font-[Roboto] text-sm`}
+    >
+      <div>{item.id}</div>
+      <div>{item.name}</div>
+      <div>{item.unit}</div>
+      <div>{item.category}</div>
+      <div>{item.quantity}</div>
+      <div>{item.reorderPoint}</div>
+      <div>{item.creationDate}</div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/mutations/materiaPrimaMutations.tsx b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/mutations/materiaPrimaMutations.tsx
new file mode 100644
index 00000000..85a2a7de
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/mutations/materiaPrimaMutations.tsx
@@ -0,0 +1,172 @@
+import { useMutation } from "@tanstack/react-query";
+
+import {
+  handleActivateLoteMateriaPrima,
+  handleDeleteLoteMateriaPrima,
+  handleDeleteMateriaPrima,
+  handleCreateUpdateLoteMateriaPrima,
+  handleCreateUpdateMateriaPrima,
+} from "../../api/api";
+
+import {
+  createLotesMateriaPrimaQueryOptions,
+  createMateriaPrimaListQueryOptions,
+} from "../../hooks/queries/materiaPrimaQueryOptions";
+
+import { createMateriaPrimaListPKQueryOptions } from "../../hooks/queries/materiaPrimaQueryOptions";
+import { useQueryClient } from "@tanstack/react-query";
+
+import type {
+  LoteMateriaPrimaFormSumit,
+  submitMateriaPrima,
+} from "../../types/types";
+import type { TMateriaPrimaSchema } from "../../schemas/schemas";
+import { translateApiError } from "@/data/translations";
+
+import type { UseFormSetError } from "react-hook-form";
+
+export const useDeleteMateriaPrimaMutation = (
+  handleClose: () => void,
+  materiaprimaId: number | undefined,
+) => {
+  const queryClient = useQueryClient();
+
+  return useMutation({
+    mutationFn: async (id: number) => {
+      await handleDeleteMateriaPrima(id);
+    },
+    onSuccess: async () => {
+      await Promise.all([
+        queryClient.invalidateQueries({
+          queryKey: createMateriaPrimaListQueryOptions().queryKey,
+        }),
+        queryClient.invalidateQueries({
+          queryKey: createMateriaPrimaListPKQueryOptions(materiaprimaId!)
+            .queryKey,
+        }),
+      ]);
+      handleClose();
+    },
+  });
+};
+
+export const useCreateUpdateMateriaPrimaMutation = (
+  onSubmitSuccess: () => void,
+  setError: UseFormSetError<TMateriaPrimaSchema>,
+  initialDataId?: number | undefined,
+) => {
+  const queryClient = useQueryClient();
+
+  return useMutation({
+    mutationFn: async (data: submitMateriaPrima) => {
+      const response = await handleCreateUpdateMateriaPrima(
+        data,
+        initialDataId,
+      );
+      if (response.failed) {
+        throw response; // This will trigger the onError callback
+      }
+      return response;
+    },
+    onSuccess: async () => {
+      onSubmitSuccess();
+      await Promise.all([
+        queryClient.invalidateQueries({
+          queryKey: createMateriaPrimaListQueryOptions().queryKey,
+        }),
+        queryClient.invalidateQueries({
+          queryKey: createMateriaPrimaListPKQueryOptions(initialDataId || null)
+            .queryKey,
+        }),
+      ]);
+    },
+    onError: (error: {
+      failed: boolean;
+      errorData: Record<string, string[]>;
+    }) => {
+      if (error.failed) {
+        for (const fieldName in error.errorData) {
+          if (
+            Object.prototype.hasOwnProperty.call(error.errorData, fieldName)
+          ) {
+            const errorMessages = error.errorData[fieldName];
+            if (Array.isArray(errorMessages) && errorMessages.length > 0) {
+              const message = translateApiError(errorMessages[0]);
+              setError(fieldName as keyof TMateriaPrimaSchema, { message });
+            } else if (typeof errorMessages === "string") {
+              const message = translateApiError(errorMessages);
+              setError(fieldName as keyof TMateriaPrimaSchema, { message });
+            }
+          }
+        }
+      }
+    },
+  });
+};
+
+// Lotes Materia Prima
+export const useDeleteLoteMateriaPrimaMutation = (
+  materiaprimaId: number | undefined,
+  handleClose: () => void,
+) => {
+  const queryClient = useQueryClient();
+
+  return useMutation({
+    mutationFn: async (id: number) => {
+      await handleDeleteLoteMateriaPrima(id);
+    },
+    onSuccess: async () => {
+      if (materiaprimaId) {
+        await queryClient.invalidateQueries({
+          queryKey:
+            createLotesMateriaPrimaQueryOptions(materiaprimaId).queryKey,
+        });
+        handleClose();
+      }
+    },
+  });
+};
+
+export const useActivateLoteMateriaPrimaMutation = (
+  materiaPrimaId: number | undefined,
+  handleClose: () => void,
+) => {
+  const queryClient = useQueryClient();
+
+  return useMutation({
+    mutationFn: (id: number) => handleActivateLoteMateriaPrima(id),
+    onSuccess: () => {
+      handleClose();
+      if (materiaPrimaId) {
+        queryClient.invalidateQueries({
+          queryKey:
+            createLotesMateriaPrimaQueryOptions(materiaPrimaId).queryKey,
+        });
+      }
+    },
+  });
+};
+
+export const useCreateUpdateLoteMateriaPrimaMutation = (
+  materiaprimaId: number | undefined,
+  onSubmitSuccess: () => void,
+  reset: () => void,
+  isUpdate?: boolean,
+  initialDataId?: number | undefined,
+) => {
+  const queryClient = useQueryClient();
+  return useMutation({
+    mutationFn: (data: LoteMateriaPrimaFormSumit) =>
+      handleCreateUpdateLoteMateriaPrima(
+        data,
+        isUpdate ? initialDataId : undefined,
+      ),
+    onSuccess: async () => {
+      reset();
+      onSubmitSuccess();
+      await queryClient.invalidateQueries({
+        queryKey: createLotesMateriaPrimaQueryOptions(materiaprimaId!).queryKey,
+      });
+    },
+  });
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions.ts b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions.ts
new file mode 100644
index 00000000..62db041e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/materiaPrimaQueryOptions.ts
@@ -0,0 +1,62 @@
+import {
+  fetchCategoriasMateriaPrima,
+  fetchUnidadesMedida,
+  handleMateriaPrimaList,
+  handleMateriaPrimaListPK,
+  handleProveedores,
+  handleLotesMateriaPrimaLotes,
+} from "@/features/MateriaPrima/api/api";
+
+export const createUnidadesQueryOptions = () => {
+  return {
+    queryKey: ["unidadesMedidaMateriaPrima"],
+    queryFn: () => fetchUnidadesMedida(),
+    staleTime: Infinity,
+  };
+};
+
+export const createCategoriasQueryOptions = () => {
+  return {
+    queryKey: ["categoriasMateriaPrima"],
+    queryFn: () => fetchCategoriasMateriaPrima(),
+    staleTime: Infinity,
+  };
+};
+
+export const createMateriaPrimaListQueryOptions = () => {
+  return {
+    queryKey: ["materiaPrimaList"],
+    queryFn: () => handleMateriaPrimaList(),
+    staleTime: Infinity,
+  };
+};
+
+export const createMateriaPrimaListPKQueryOptions = (pk: number | null) => {
+  if (!pk) {
+    throw new Error("pk is required");
+  }
+  return {
+    queryKey: ["materiaPrimaListPK", pk],
+    queryFn: () => handleMateriaPrimaListPK(pk),
+    staleTime: Infinity,
+  };
+};
+
+export const createProveedoresQueryOptions = () => {
+  return {
+    queryKey: ["proveedores"],
+    queryFn: () => handleProveedores(),
+    staleTime: Infinity,
+  };
+};
+
+export const createLotesMateriaPrimaQueryOptions = (pk: number) => {
+  return {
+    queryKey: ["lotesMateriaPrima", pk],
+    queryFn: () => {
+      const data = handleLotesMateriaPrimaLotes(pk);
+      return data;
+    },
+    staleTime: Infinity,
+  };
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/queries.ts b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/queries.ts
new file mode 100644
index 00000000..7f53a85d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/hooks/queries/queries.ts
@@ -0,0 +1,12 @@
+import { useQuery } from "@tanstack/react-query";
+import { createLotesMateriaPrimaQueryOptions } from "./materiaPrimaQueryOptions";
+
+export const useLotesMateriaPrimaQuery = (
+  materiaprimaId: number | null,
+  showMateriaprimaDetalles: boolean,
+) => {
+  return useQuery({
+    ...createLotesMateriaPrimaQueryOptions(materiaprimaId!),
+    enabled: !!materiaprimaId && showMateriaprimaDetalles,
+  });
+};
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/schemas/schemas.ts b/frontend/panaderia-interfaz/src/features/MateriaPrima/schemas/schemas.ts
new file mode 100644
index 00000000..67991672
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/schemas/schemas.ts
@@ -0,0 +1,70 @@
+import { z } from "zod";
+
+export const materiaPrimaSchema = z.object({
+  nombre: z.string().min(3, "El nombre debe tener al menos 3 caracteres"),
+  SKU: z.string().min(3, "El SKU debe tener al menos 3 caracteres"),
+  nombre_empaque_estandar: z.string().optional().nullable(),
+  cantidad_empaque_estandar: z.coerce.number().optional().nullable(),
+  unidad_medida_empaque_estandar: z.coerce
+    .number({
+      required_error: "La unidad de medida es requerida",
+      invalid_type_error: "La unidad de medida no es válida",
+    })
+    .optional()
+    .nullable(),
+  punto_reorden: z.coerce
+    .number()
+    .positive()
+    .min(1, "El punto de reorden debe ser mayor a 0"),
+  unidad_medida_base: z.coerce
+    .number({
+      required_error: "La unidad de medida es requerida",
+      invalid_type_error: "La unidad de medida no es válida",
+    })
+    .min(1, "La unidad de medida es requerida"),
+  categoria: z.coerce
+    .number({
+      required_error: "La categoría es requerida",
+      invalid_type_error: "La categoría no es válida",
+    })
+    .min(1, "La categoría es requerida"),
+  descripcion: z
+    .string()
+    .min(0, "La descripción debe tener al menos 5 caracteres")
+    .optional()
+    .nullable(),
+});
+
+export const loteMateriaPrimaSchema = z
+  .object({
+    proveedor_id: z.coerce
+      .number({
+        required_error: "El proveedor es requerido",
+        invalid_type_error: "El proveedor no es válido",
+      })
+      .min(1, "El proveedor es requerido"),
+    fecha_recepcion: z.coerce.date({
+      required_error: "La fecha de recepción es requerida",
+      invalid_type_error: "La fecha de recepción no es válida",
+    }),
+    fecha_caducidad: z.coerce.date({
+      required_error: "La fecha de caducidad es requerida",
+      invalid_type_error: "La fecha de caducidad no es válida",
+    }),
+    cantidad_recibida: z.coerce
+      .number({
+        required_error: "La cantidad recibida es requerida",
+        invalid_type_error: "La cantidad recibida no es válida",
+      })
+      .min(1, "La cantidad recibida debe ser mayor a 0"),
+    costo_unitario_usd: z.coerce
+      .number()
+      .min(0, "El costo unitario debe ser mayor a 0"),
+  })
+  .refine((data) => data.fecha_recepcion < data.fecha_caducidad, {
+    message: "La fecha de recepción debe ser anterior a la fecha de caducidad",
+    path: ["fecha_recepcion"],
+  });
+
+export type TLoteMateriaPrimaSchema = z.infer<typeof loteMateriaPrimaSchema>;
+export type TMateriaPrimaSchema = z.infer<typeof materiaPrimaSchema>;
diff --git a/frontend/panaderia-interfaz/src/features/MateriaPrima/types/types.ts b/frontend/panaderia-interfaz/src/features/MateriaPrima/types/types.ts
new file mode 100644
index 00000000..98a57986
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/MateriaPrima/types/types.ts
@@ -0,0 +1,176 @@
+import type { UseFormRegister, FieldErrors } from "react-hook-form";
+import type {
+  TMateriaPrimaSchema,
+  TLoteMateriaPrimaSchema,
+} from "@/features/MateriaPrima/schemas/schemas";
+import type { ReactNode, MouseEvent } from "react";
+
+export interface SidebarCardProps {
+  children: ReactNode;
+  icon: string;
+  onclick: (e: MouseEvent<HTMLDivElement>) => void;
+  link?: string;
+  id?: string;
+}
+
+export type childrenProp = {
+  children: ReactNode;
+};
+
+export type UnidadMedida = {
+  id: number;
+  nombre_completo: string;
+  abreviatura: string;
+  descripcion: string | null;
+  tipo_medida: "peso" | "volumen" | "unidad";
+};
+
+export type CategoriaMateriaPrima = {
+  id: number;
+  nombre_categoria: string;
+  descripcion: string | null;
+};
+
+export type MateriaPrimaList = {
+  id: number;
+  name: string;
+  unit: string;
+  category: string;
+  quantity: number;
+  reorderPoint: number;
+  creationDate: string;
+};
+
+export type MateriaPrimaListServer = {
+  id: number;
+  nombre: string;
+  unidad_medida_base_detail: UnidadMedida;
+  categoria_detail: CategoriaMateriaPrima;
+  stock_actual: number;
+  SKU: string;
+  nombre_empaque_estandar: string;
+  cantidad_empaque_estandar: number;
+  unidad_medida_empaque_estandar_detail: UnidadMedida;
+  punto_reorden: number;
+  fecha_ultima_actualizacion: string;
+  fecha_creacion_registro: string;
+  fecha_modificacion_registro: string;
+  descripcion: string;
+};
+
+export type submitMateriaPrima = {
+  cantidad_empaque_estandar: number | null;
+  unidad_medida_empaque_estandar: number | null;
+  nombre_empaque_estandar: string | null;
+  descripcion: string | null;
+  nombre: string;
+  SKU: string;
+  punto_reorden: number;
+  unidad_medida_base: number;
+  categoria: number;
+};
+
+export type MateriaPrimaFormSharedProps = {
+  isUpdate?: boolean;
+  initialData?: MateriaPrimaListServer;
+  onClose: () => void;
+  onSubmitSuccess: () => void;
+  title: string;
+};
+
+export type MateriaPrimaFormInputContainerProps = {
+  inputType: string;
+  title: string;
+  name: keyof TMateriaPrimaSchema;
+  register: UseFormRegister<TMateriaPrimaSchema>;
+  errors: FieldErrors<TMateriaPrimaSchema>;
+  optional?: boolean;
+};
+
+export type MateriaPrimaFormSelectContainerProps = {
+  title: string;
+  name: keyof TMateriaPrimaSchema;
+  register: UseFormRegister<TMateriaPrimaSchema>;
+  errors: FieldErrors<TMateriaPrimaSchema>;
+  children: ReactNode;
+  optional?: boolean;
+};
+
+export type LoteMateriaPrima = {
+  id: number;
+  fecha_recepcion: string;
+  fecha_caducidad: string;
+  cantidad_recibida: number;
+  stock_actual_lote: number;
+  costo_unitario_usd: number;
+  proveedor: string;
+  activo: boolean;
+};
+
+export type Proveedor = {
+  id?: number;
+  nombre_proveedor: string;
+  apellido_proveedor: string;
+  nombre_comercial: string;
+  email_contacto: string;
+  telefono_contacto: string;
+  fecha_creacion_registro: string;
+  usuario_registro: number | null;
+  notas: string | null;
+};
+
+export type LotesMateriaPrimaFormInputContainerProps = {
+  inputType: string;
+  title: string;
+  name: keyof TLoteMateriaPrimaSchema;
+  register: UseFormRegister<TLoteMateriaPrimaSchema>;
+  errors: FieldErrors<TLoteMateriaPrimaSchema>;
+  optional?: boolean;
+};
+
+export type LotesMateriaPrimaFormSelectContainerProps = {
+  title: string;
+  name: keyof TLoteMateriaPrimaSchema;
+  register: UseFormRegister<TLoteMateriaPrimaSchema>;
+  errors: FieldErrors<TLoteMateriaPrimaSchema>;
+  children: ReactNode;
+};
+
+export type LoteMateriaPrimaFormResponse = {
+  id?: number;
+  materia_prima: number;
+  proveedor: Proveedor;
+  fecha_recepcion: Date;
+  fecha_caducidad: Date;
+  cantidad_recibida: number;
+  stock_actual_lote: number;
+  costo_unitario_usd: number;
+  detalle_oc: number | null;
+  activo?: boolean;
+};
+
+export type emptyLoteMateriaPrima = {
+  materia_prima: number;
+  empty: true;
+};
+
+export type LoteMateriaPrimaFormSumit = {
+  id?: number;
+  materia_prima: number;
+  proveedor_id: number;
+  fecha_recepcion: Date;
+  fecha_caducidad: Date;
+  cantidad_recibida: number;
+  stock_actual_lote: number;
+  costo_unitario_usd: number;
+  detalle_oc: number | null;
+  activo?: boolean;
+};
+
+export type LotesMateriaPrimaFormSharedProps = {
+  isUpdate?: boolean;
+  initialData?: LoteMateriaPrimaFormResponse;
+  onClose: () => void;
+  onSubmitSuccess: () => void;
+  title: string;
+};
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DeleteComponent.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DeleteComponent.tsx
new file mode 100644
index 00000000..e68c2da2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DeleteComponent.tsx
@@ -0,0 +1,7 @@
+export const DeleteComponent = () => {
+    return (
+        <div>
+            <h1>DeleteComponent</h1>
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DetailsTable.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DetailsTable.tsx
new file mode 100644
index 00000000..b41670e2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/DetailsTable.tsx
@@ -0,0 +1,61 @@
+import { DetailsField } from "@/components/DetailsField";
+import { DetailFieldValue } from "@/components/DetailFieldValue";
+
+export const DetailsTable = () => {
+  return (
+    <div className="flex items-center gap-20">
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailsField>Nombre</DetailsField>
+            <DetailsField>SKU</DetailsField>
+            <DetailsField>Punto de reorden</DetailsField>
+            <DetailsField>Unidad de medida</DetailsField>
+            <DetailsField>Categoría</DetailsField>
+            <DetailsField>Nombre de empaque</DetailsField>
+            <DetailsField>Cantidad de empaquete</DetailsField>
+            <DetailsField>Unidad de medida de empaque</DetailsField>
+            <DetailsField>Fecha de última actualización</DetailsField>
+            <DetailsField>Fecha de creación del registro</DetailsField>
+            <DetailsField>Fecha de modificación del registro</DetailsField>
+            <DetailsField>Descripción</DetailsField>
+          </div>
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailFieldValue>
+              Randon Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+          </div>
+        </div>  
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterButton.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterButton.tsx
new file mode 100644
index 00000000..81f15e41
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterButton.tsx
@@ -0,0 +1,17 @@
+import {
+  MenuIcon
+} from "@/assets/DashboardAssets";
+
+export default function FilterButton() {
+
+  return (
+    <button
+        type="button"
+        className="flex shadow-md gap-2 items-center bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-md hover:bg-blue-600 font-semibold font-[Roboto] text-white"
+        onClick={() => {}}
+      >
+        <img src={MenuIcon} alt="Menu" />
+        Filtros
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterSearch.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterSearch.tsx
new file mode 100644
index 00000000..923d8fb5
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/FilterSearch.tsx
@@ -0,0 +1,22 @@
+import FilterButton from "./FilterButton";
+import ImportCSV from "@/components/ImportCSV";
+import NewButton from "@/components/NewButton";
+import SearchInput from "@/features/ProductosIntermedios/components/SearchInput";
+import { useProductosIntermediosContext } from "@/context/ProductosIntermediosContext";
+
+export default function FilterSearch() {
+
+  const { setShowProductosIntermediosForm } = useProductosIntermediosContext();
+  return (
+    <div className="flex items-center px-8 justify-between">
+      <SearchInput />
+      <div className="flex gap-4">
+        <ImportCSV />
+        <FilterButton />
+        <NewButton onClick={() => {
+          setShowProductosIntermediosForm(true);
+        }} />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableBody.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableBody.tsx
new file mode 100644
index 00000000..9d861cfb
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableBody.tsx
@@ -0,0 +1,25 @@
+// import { useEffect } from "react";
+// import { DoubleSpinner } from "@/assets";
+
+import { PITableRows } from "./PITableRows";
+
+export const PITableBody = () => {
+
+    const displayData: any[] = []
+
+  const NoDataMessage = () => (
+    <div className="flex justify-center h-full items-center font-bold text-2xl text-gray-700">
+      No hay datos Registrados
+    </div>
+  );
+
+  return (
+    <>
+      { displayData ? (
+        <PITableRows data={displayData} />
+      ) : (
+        <NoDataMessage />
+      )}
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableHeader.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableHeader.tsx
new file mode 100644
index 00000000..ffd9c5eb
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableHeader.tsx
@@ -0,0 +1,10 @@
+export const PITableHeader = ({ headers }: { headers: string[] }) => {
+    return (
+      <div className="grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr_1fr] justify-between px-8 py-4 border-b border-gray-300 font-semibold font-[Roboto] text-sm bg-[#f7feff] text-[#1261A0] rounded-t-md">
+        {headers.map((header) => (
+          <div key={header}>{header}</div>
+        ))}
+      </div>
+    );
+  };
+  
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableRows.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableRows.tsx
new file mode 100644
index 00000000..53cd392c
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITableRows.tsx
@@ -0,0 +1,13 @@
+import { PITableRow } from "./PITablerow";
+
+export const PITableRows = ({ data }: { data: any[] }) => {
+  return (
+    <>
+      {data.map((item, index) => (
+        <PITableRow item={item} index={index} key={item.id} />
+      ))}
+
+      <PITableRow item={{}} index={123} key={123} />
+    </>
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITablerow.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITablerow.tsx
new file mode 100644
index 00000000..a6b573c6
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/PITablerow.tsx
@@ -0,0 +1,32 @@
+import { useProductosIntermediosContext } from "@/context/ProductosIntermediosContext";
+
+export const PITableRow = ({
+  item,
+  index,
+}: {
+  item: any;
+  index: number;
+}) => {
+
+  const { setShowProductosIntermediosDetalles, setProductoIntermedioId } = useProductosIntermediosContext();
+  const setDetails = () => {
+    setShowProductosIntermediosDetalles(true);
+    setProductoIntermedioId(item.id || null);
+  }
+  return (
+    <div
+      onClick={setDetails}
+      key={item.id}
+      className={`cursor-pointer hover:bg-gray-100 grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr_1fr] justify-between items-center px-8 py-4 border-b border-gray-300 ${index % 2 == 0 ? "bg-white" : "bg-gray-50"} font-[Roboto] text-sm`}
+    >
+      <div>{item.id || "-"}</div>
+      <div>{item.name || "-"}</div>
+      <div>{item.unit || "-"}</div>
+      <div>{item.category || "-"}</div>
+      <div>{item.quantity || "-"}</div>
+      <div>{item.reorderPoint || "-"}</div>
+      <div>{item.creationDate || "-"}</div>
+      <div>{item.description || "-"}</div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosDetalles.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosDetalles.tsx
new file mode 100644
index 00000000..534bdb56
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosDetalles.tsx
@@ -0,0 +1,84 @@
+import { DeleteComponent } from "./DeleteComponent";
+import { useProductosIntermediosContext } from "@/context/ProductosIntermediosContext";
+import ProductosIntermediosFormShared from "./ProductosIntermediosFormShared";
+import Title from "@/components/Title";
+import Button from "@/components/Button";
+
+import { 
+  EditarIcon, 
+  BorrarIcon, 
+  CerrarIcon 
+} from "@/assets/DashboardAssets";
+import { TitleDetails } from "@/components/TitleDetails";
+import { DetailsTable } from "./DetailsTable";
+
+
+export default function ProductosIntermediosDetalles() {
+  
+  const { showProductosIntermediosDetalles, updateRegistro, setUpdateRegistro, setRegistroDelete, setShowProductosIntermediosDetalles, registroDelete, productoIntermedioId } = useProductosIntermediosContext();
+  
+  if (!showProductosIntermediosDetalles) return <></>;
+
+  const handleCloseUpdate = () => {
+    setShowProductosIntermediosDetalles(false);
+    setUpdateRegistro(false);
+  };
+
+  function handleClose() {
+    setShowProductosIntermediosDetalles(false);
+  }
+
+  if (updateRegistro) {
+    return <ProductosIntermediosFormShared 
+      title="Editar Producto Intermedio"
+      isUpdate={true}
+      onClose={handleCloseUpdate}
+      onSubmitSuccess={handleCloseUpdate}
+    />
+  }
+
+  return (
+    <div className="flex flex-col gap-5 mx-8 border border-gray-200 p-5 rounded-lg shadow-md h-full">
+      <div className="flex justify-between items-center">
+        <Title>Text</Title>
+        <div className="flex gap-2">
+          <Button type="edit" onClick={() => {
+            setUpdateRegistro(true);
+          }}>
+            <div className="flex items-center gap-2">
+              Editar
+              <img src={EditarIcon} alt="Editar" />
+            </div>
+          </Button>
+          <Button
+            type="delete"
+            onClick={() => {
+              setRegistroDelete(true);
+            }}
+          >
+            <div className="flex items-center gap-2">
+              Eliminar
+              <img src={BorrarIcon} alt="Eliminar" />
+            </div>
+          </Button>
+          <div className="ml-6">
+            <Button type="close" onClick={handleClose}>
+              <img src={CerrarIcon} alt="Cerrar" />
+            </Button>
+          </div>
+        </div>
+      </div>
+
+      {registroDelete && productoIntermedioId !== null && (
+        <DeleteComponent
+        />
+      )}
+      <div className="flex flex-col gap-6">
+        <TitleDetails>
+          Detalles
+        </TitleDetails>
+        <DetailsTable />
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosFormShared.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosFormShared.tsx
new file mode 100644
index 00000000..025831f7
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosFormShared.tsx
@@ -0,0 +1,51 @@
+import Button from "@/components/Button";
+import type { ProductosIntermediosFormSharedProps } from "@/features/ProductosIntermedios/types/types";
+
+export default function ProductosIntermediosFormShared(
+    {
+        title,
+        isUpdate=false,
+        onClose,
+        onSubmitSuccess,
+    }: ProductosIntermediosFormSharedProps
+) {
+
+    const handleCancelButtonClick = () => {
+        onClose();
+    }
+
+    return (
+        <form
+          onSubmit={() => {}}
+          id="productos-intermedios-form"
+          className="relative "
+        >
+          <div className="flex flex-col mx-8 mt-4 rounded-md border border-gray-200 shadow-md">
+            <div className="p-5 font-[Roboto] text-lg font-semibold border-b border-gray-300 bg-gray-50 rounded-t-md">
+              {title}
+            </div>
+            <div className="flex flex-col gap-2 px-5 bg-white">
+              <div className="flex flex-col gap-2 border-b border-gray-300 py-8">
+                {isUpdate ? (
+                    <div>
+                        <h1>Update</h1>
+                    </div>
+                ) : (
+                    <div>
+                        <h1>Create</h1>
+                    </div>
+                )}
+              </div>
+            </div>
+            <div className="flex gap-2 justify-end py-4 px-5 bg-white">
+              <Button type="cancel" onClick={handleCancelButtonClick}>
+                Cancelar
+              </Button>
+              <Button type="submit" onClick={() => {}}>
+                Guardar
+              </Button>
+            </div>
+          </div>
+        </form>
+      );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosForma.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosForma.tsx
new file mode 100644
index 00000000..d4b68997
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosForma.tsx
@@ -0,0 +1,22 @@
+import { useProductosIntermediosContext } from "@/context/ProductosIntermediosContext";
+import ProductosIntermediosFormShared from "./ProductosIntermediosFormShared";
+
+
+export default function ProductosIntermediosForma() {
+
+  const { showProductosIntermediosForm, setShowProductosIntermediosForm } = useProductosIntermediosContext();
+
+  const handleSuccessClose = () => {
+    setShowProductosIntermediosForm(false);
+  };
+
+  if (!showProductosIntermediosForm) return <></>;
+
+  return (
+    <ProductosIntermediosFormShared
+      title="Nuevo Producto Intermedio"
+      onClose={handleSuccessClose}
+      onSubmitSuccess={handleSuccessClose}
+    />
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosLista.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosLista.tsx
new file mode 100644
index 00000000..34cd970e
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosLista.tsx
@@ -0,0 +1,35 @@
+import { TubeSpinner } from "@/assets";
+
+import { PITableBody } from "./PITableBody";
+import { PITableHeader } from "./PITableHeader";
+
+
+export default function MateriaPrimaLista({isLoadingDetalles}: {isLoadingDetalles: boolean}) {
+
+  return (
+    <>
+        <div className="relative mx-8 border border-gray-200 rounded-md min-h-[80%]">
+          <PITableHeader
+            headers={[
+              "ID",
+              "Nombre",
+              "SKU",
+              "Precio Promedio",
+              "Stock",
+              "Categoria",
+              "Punto de reorden",
+              "Fecha de creación",
+            ]}
+          />
+          <PITableBody />
+          {isLoadingDetalles ? (
+            <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+              <img src={TubeSpinner} alt="Cargando..." className="size-28" />
+            </div>
+          ) : (
+            ""
+          )}
+        </div>
+    </>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosPanel.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosPanel.tsx
new file mode 100644
index 00000000..af2afe98
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/ProductosIntermediosPanel.tsx
@@ -0,0 +1,19 @@
+import FilterSearch from "./FilterSearch";
+import ProductosIntermediosLista from "./ProductosIntermediosLista";
+import { useProductosIntermediosContext } from "@/context/ProductosIntermediosContext";
+
+export default function ProductosIntermediosPanel() {
+
+  const { showProductosIntermediosForm, showProductosIntermediosDetalles } = useProductosIntermediosContext();
+
+  if (showProductosIntermediosForm || showProductosIntermediosDetalles) return <></>;
+
+  return (
+    <>
+      <div className="flex flex-col gap-6 h-full">
+        <FilterSearch />
+        <ProductosIntermediosLista isLoadingDetalles={false} />
+      </div>
+    </>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/SearchInput.tsx b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/SearchInput.tsx
new file mode 100644
index 00000000..ca061c29
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/components/SearchInput.tsx
@@ -0,0 +1,37 @@
+
+import { XIcon, SearchIcon } from "@/assets/DashboardAssets";
+
+export default function SearchInput() {
+
+  return (
+    <div className="w-[var(--search-input-width)] shadow-sm bg-white rounded-full flex items-center justify-between gap-4 p-1 relative border border-gray-200">
+
+      <div className="flex-1 pl-4">
+        <input
+          id="searchInput"
+          type="text"
+          placeholder="Buscar materia prima..."
+          className="font-semibold font-[Roboto] outline-none w-full"
+          ref={() => {}}
+          onKeyDown={() => {}}
+        />
+      </div>
+
+
+        {/* TODO: Implementar el reset de la busqueda */}
+          <button
+            onClick={() => {}}
+            className="absolute right-[13%] flex items-center justify-center p-0.5 rounded-full bg-gray-200 cursor-pointer hover:bg-gray-300 "
+          >
+            <img className="size-4" src={XIcon} alt="X" />
+          </button>
+
+      <button
+        className="bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-full hover:bg-blue-600"
+        onClick={() => {}}
+      >
+        <img src={SearchIcon} alt="Search" />
+      </button>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/ProductosIntermedios/types/types.ts b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/types/types.ts
new file mode 100644
index 00000000..b9cf9aa9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/ProductosIntermedios/types/types.ts
@@ -0,0 +1,12 @@
+import type { ReactNode } from "react";
+
+export type childrenProp = {
+    children: ReactNode;
+  };
+  
+export type ProductosIntermediosFormSharedProps = {
+    title: string;
+    isUpdate?: boolean;
+    onClose: () => void;
+    onSubmitSuccess: () => void;
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/api/api.ts b/frontend/panaderia-interfaz/src/features/Recetas/api/api.ts
new file mode 100644
index 00000000..b4fe24b3
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/api/api.ts
@@ -0,0 +1,22 @@
+import apiClient from '@/api/client';
+import type { TRecetasFormSchema } from '../schemas/schemas';
+
+export const componentesRecetaSearch = async (search: string) => {
+    try {
+        const response = await apiClient.get(`/api/materiaprimasearch/search-materia-prima/?search=${search}`)
+        return response.data
+    } catch (error) {
+        console.error('Error fetching componentes receta search:', error)
+        throw error
+    }
+}
+
+export const registerReceta = async (data: TRecetasFormSchema) => {
+    try {
+        const response = await apiClient.post('/api/recetas/', data)
+        return response.data
+    } catch (error) {
+        console.error('Error registering receta:', error)
+        throw error
+    }
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/DeleteComponent.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/DeleteComponent.tsx
new file mode 100644
index 00000000..e68c2da2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/DeleteComponent.tsx
@@ -0,0 +1,7 @@
+export const DeleteComponent = () => {
+    return (
+        <div>
+            <h1>DeleteComponent</h1>
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/DetailsTable.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/DetailsTable.tsx
new file mode 100644
index 00000000..b41670e2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/DetailsTable.tsx
@@ -0,0 +1,61 @@
+import { DetailsField } from "@/components/DetailsField";
+import { DetailFieldValue } from "@/components/DetailFieldValue";
+
+export const DetailsTable = () => {
+  return (
+    <div className="flex items-center gap-20">
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailsField>Nombre</DetailsField>
+            <DetailsField>SKU</DetailsField>
+            <DetailsField>Punto de reorden</DetailsField>
+            <DetailsField>Unidad de medida</DetailsField>
+            <DetailsField>Categoría</DetailsField>
+            <DetailsField>Nombre de empaque</DetailsField>
+            <DetailsField>Cantidad de empaquete</DetailsField>
+            <DetailsField>Unidad de medida de empaque</DetailsField>
+            <DetailsField>Fecha de última actualización</DetailsField>
+            <DetailsField>Fecha de creación del registro</DetailsField>
+            <DetailsField>Fecha de modificación del registro</DetailsField>
+            <DetailsField>Descripción</DetailsField>
+          </div>
+          <div className="grid grid-rows-12 grid-cols-1 gap-2">
+            <DetailFieldValue>
+              Randon Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+            <DetailFieldValue>
+              Random Text
+            </DetailFieldValue>
+          </div>
+        </div>  
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/FilterButton.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/FilterButton.tsx
new file mode 100644
index 00000000..81f15e41
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/FilterButton.tsx
@@ -0,0 +1,17 @@
+import {
+  MenuIcon
+} from "@/assets/DashboardAssets";
+
+export default function FilterButton() {
+
+  return (
+    <button
+        type="button"
+        className="flex shadow-md gap-2 items-center bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-md hover:bg-blue-600 font-semibold font-[Roboto] text-white"
+        onClick={() => {}}
+      >
+        <img src={MenuIcon} alt="Menu" />
+        Filtros
+    </button>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/FilterSearch.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/FilterSearch.tsx
new file mode 100644
index 00000000..d8bb949c
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/FilterSearch.tsx
@@ -0,0 +1,22 @@
+import FilterButton from "./FilterButton";
+import ImportCSV from "@/components/ImportCSV";
+import NewButton from "@/components/NewButton";
+import SearchInput from "@/features/Recetas/components/SearchInput";
+import { useRecetasContext } from "@/context/RecetasContext";
+
+export default function FilterSearch() {
+
+  const { setShowRecetasForm } = useRecetasContext();
+  return (
+    <div className="flex items-center px-8 justify-between">
+      <SearchInput />
+      <div className="flex gap-4">
+        <ImportCSV />
+        <FilterButton />
+        <NewButton onClick={() => {
+          setShowRecetasForm(true);
+        }} />
+      </div>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/NoResults.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/NoResults.tsx
new file mode 100644
index 00000000..82bfac10
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/NoResults.tsx
@@ -0,0 +1,9 @@
+export default function NoResults() {
+    return (
+        <div className="flex flex-col justify-center px-4 border border-gray-300 w-full h-[var(--search-list-short-height)] shadow-lg
+                        font-[Roboto] text-md font-semibold
+                        overflow-y-auto absolute top-[86px] left-0 bg-white z-10">
+            Ningun componente encontrado...
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchInput.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchInput.tsx
new file mode 100644
index 00000000..20f97c13
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchInput.tsx
@@ -0,0 +1,50 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+import type { RecetasFormSearchInputProps } from "../types/types";
+
+export default function RecetaSearchInput({
+    typeInput,
+    placeholder = "",
+    onChange,
+}: RecetasFormSearchInputProps) {
+    const { searchListRecetasRef, setSearchListActiveRecetas, setSearchListItems, searchListItems} = useRecetasContext();
+
+    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+        if (onChange) {
+            if (e.target.value === "") {
+                setSearchListItems([]);
+            } else {
+                onChange(e.target.value);
+            }
+        }
+
+        setSearchListActiveRecetas(true);
+    }
+
+    const resetSearchList = () => {
+        setSearchListActiveRecetas(false);
+        setSearchListItems([]);
+        if (searchListRecetasRef.current) {
+            searchListRecetasRef.current.value = "";
+        }
+    }
+
+
+    return (
+        <div className="relative">
+            <input
+                    type={typeInput}
+                    onChange={handleChange}   
+                    ref={searchListRecetasRef as React.RefObject<HTMLInputElement>}
+                    placeholder={placeholder}
+                    className="block w-full px-3 py-4 border border-gray-300 rounded-md shadow-xs font-[Roboto]
+                            focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
+                />
+                {searchListItems.length > 0 && (
+                    <div className="absolute right-2 bottom-2.5 flex items-center justify-center border border-gray-300 px-2 py-1 rounded-md cursor-pointer" 
+                    onClick={resetSearchList}>
+                        Cerrar
+                    </div>
+                )}
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchListItem.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchListItem.tsx
new file mode 100644
index 00000000..33dd6eb1
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaSearchListItem.tsx
@@ -0,0 +1,50 @@
+import type { componenteListadosReceta, itemRecetasSearchList, watchSetValueProps } from "../types/types"
+import { useRecetasContext } from "@/context/RecetasContext"
+
+export default function RecetaSearchListItem({nombre, id, tipo, watch, setValue}: itemRecetasSearchList & watchSetValueProps) {
+    const { setComponentesListadosReceta, componentesListadosReceta } = useRecetasContext();
+
+    const handleClick = () => {
+    const componente: componenteListadosReceta = {
+        id_componente: id,
+        componente_tipo: tipo,
+        nombre: nombre,
+    }
+
+    // Create the component data for the form
+    let componenteReceta;
+    if (tipo === "MateriaPrima") {
+        componenteReceta = {
+            componente_id: Number(id),
+            materia_prima: true,
+        }
+    } else {
+        componenteReceta = {
+            componente_id: Number(id),
+            producto_intermedio: true,
+        }
+    }
+    
+    const currentFormData = watch("componente_receta") || [];
+    // Check if component already exists in context (for display)
+    if (componentesListadosReceta.find((componente) => componente.id_componente === id) || 
+        currentFormData.find((item) => item.componente_id === Number(id))) {
+        return;
+    }
+    
+    // Update context for display
+    setComponentesListadosReceta([...componentesListadosReceta, componente]);
+    
+    // Update form field
+    setValue("componente_receta", [...currentFormData, componenteReceta]);
+    }
+
+    return (
+        <li 
+        data-tipo={tipo}
+        id={id} 
+        className={`py-2 px-6 border-b border-gray-300 hover:bg-gray-100 cursor-pointer `} onClick={() => handleClick()}>
+            {nombre}
+        </li>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaTablerow.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaTablerow.tsx
new file mode 100644
index 00000000..33ec51ce
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetaTablerow.tsx
@@ -0,0 +1,32 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+
+export const RecetaTablerow = ({
+  item,
+  index,
+}: {
+  item: any;
+  index: number;
+}) => {
+
+  const { setShowRecetasDetalles, setRecetaId } = useRecetasContext();
+  const setDetails = () => {
+    setShowRecetasDetalles(true);
+    setRecetaId(item.id || null);
+  }
+  return (
+    <div
+      onClick={setDetails}
+      key={item.id}
+      className={`cursor-pointer hover:bg-gray-100 grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr_1fr] justify-between items-center px-8 py-4 border-b border-gray-300 ${index % 2 == 0 ? "bg-white" : "bg-gray-50"} font-[Roboto] text-sm`}
+    >
+      <div>{item.id || "-"}</div>
+      <div>{item.name || "-"}</div>
+      <div>{item.unit || "-"}</div>
+      <div>{item.category || "-"}</div>
+      <div>{item.quantity || "-"}</div>
+      <div>{item.reorderPoint || "-"}</div>
+      <div>{item.creationDate || "-"}</div>
+      <div>{item.description || "-"}</div>
+    </div>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasComponentList.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasComponentList.tsx
new file mode 100644
index 00000000..ccc4984c
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasComponentList.tsx
@@ -0,0 +1,27 @@
+import { XRedIcon } from "@/assets/DashboardAssets/";
+import { useRecetasContext } from "@/context/RecetasContext";
+import type { recetasComponentListProps, watchSetValueProps } from "../types/types";
+
+export default function RecetasComponentList({nombre, type, id, last, watch, setValue}: recetasComponentListProps & watchSetValueProps) {
+    const { setComponentesListadosReceta, componentesListadosReceta } = useRecetasContext();
+
+    const handleDelete = () => {
+
+        if (componentesListadosReceta.length < 1) return;
+        
+        const listaFiltrada = componentesListadosReceta.filter((componente) => componente.id_componente !== id);
+        setComponentesListadosReceta(listaFiltrada);
+        
+        const listaFiltradaValidacion = watch("componente_receta")?.filter(({componente_id}: {componente_id: number}) => componente_id !== Number(id));
+        setValue("componente_receta", listaFiltradaValidacion || []);
+    }
+
+    return (
+        <div className={`flex items-center justify-between text-md p-3 ${last ? "" : "border-b border-gray-300"}`}>
+            {type === 'MateriaPrima' ? 'Materia Prima' : 'Producto Intermedio'} : {nombre}
+            <div onClick={handleDelete} className="cursor-pointer">
+                <img src={XRedIcon} alt="delete" className="size-6" />
+            </div>
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasDetalles.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasDetalles.tsx
new file mode 100644
index 00000000..20b85c8b
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasDetalles.tsx
@@ -0,0 +1,91 @@
+import { DeleteComponent } from "./DeleteComponent";
+import { useRecetasContext } from "@/context/RecetasContext";
+import RecetasFormShared from "./RecetasFormShared";
+import Title from "@/components/Title";
+import Button from "@/components/Button";
+
+import { 
+  EditarIcon, 
+  BorrarIcon, 
+  CerrarIcon 
+} from "@/assets/DashboardAssets";
+import { TitleDetails } from "@/components/TitleDetails";
+import { DetailsTable } from "./DetailsTable";
+
+
+export default function RecetasDetalles() {
+  
+  const { 
+    showRecetasDetalles, 
+    updateRegistro, 
+    setUpdateRegistro, 
+    setRegistroDelete, 
+    setShowRecetasDetalles, 
+    registroDelete, 
+    recetaId } = useRecetasContext();
+  
+  if (!showRecetasDetalles) return <></>;
+
+  const handleCloseUpdate = () => {
+    setShowRecetasDetalles(false);
+    setUpdateRegistro(false);
+  };
+
+  function handleClose() {
+    setShowRecetasDetalles(false);
+  }
+
+  if (updateRegistro) {
+    return <RecetasFormShared 
+      title="Editar Receta"
+      isUpdate={true}
+      onClose={handleCloseUpdate}
+      onSubmitSuccess={handleCloseUpdate}
+    />
+  }
+
+  return (
+    <div className="flex flex-col gap-5 mx-8 border border-gray-200 p-5 rounded-lg shadow-md h-full">
+      <div className="flex justify-between items-center">
+        <Title>Text</Title>
+        <div className="flex gap-2">
+          <Button type="edit" onClick={() => {
+            setUpdateRegistro(true);
+          }}>
+            <div className="flex items-center gap-2">
+              Editar
+              <img src={EditarIcon} alt="Editar" />
+            </div>
+          </Button>
+          <Button
+            type="delete"
+            onClick={() => {
+              setRegistroDelete(true);
+            }}
+          >
+            <div className="flex items-center gap-2">
+              Eliminar
+              <img src={BorrarIcon} alt="Eliminar" />
+            </div>
+          </Button>
+          <div className="ml-6">
+            <Button type="close" onClick={handleClose}>
+              <img src={CerrarIcon} alt="Cerrar" />
+            </Button>
+          </div>
+        </div>
+      </div>
+
+      {registroDelete && recetaId !== null && (
+        <DeleteComponent
+        />
+      )}
+      <div className="flex flex-col gap-6">
+        <TitleDetails>
+          Detalles
+        </TitleDetails>
+        <DetailsTable />
+      </div>
+    </div>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormInputContainer.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormInputContainer.tsx
new file mode 100644
index 00000000..5f0fd62b
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormInputContainer.tsx
@@ -0,0 +1,45 @@
+import { get } from "react-hook-form";
+import RecetasInput from "./RecetasInput";
+import type { RecetasFormInputContainerProps } from "../types/types";
+import RecetasSearchInput from "./RecetaSearchInput";
+
+export default function RecetasFormInputContainer({
+    register,
+    title,
+    name,
+    errors,
+    inputType,
+    recetaBusqueda,
+    optional,
+    onChange,
+}: RecetasFormInputContainerProps) {
+    return (
+        <div className="flex flex-col gap-4 ">
+
+                <div className="flex flex-col gap-2">
+                    <div
+                    className={`font-[Roboto] text-md font-semibold ${optional ? "text-black" : "text-red-500"}`}
+                    >
+                    {title}
+                    </div>
+                    {recetaBusqueda ? (
+                        <RecetasSearchInput
+                            typeInput={inputType}
+                            placeholder="Busca componentes..."
+                            onChange={onChange}
+                        />
+                    ): (
+                        <RecetasInput
+                            register={register}
+                            name={name}
+                            typeInput={inputType}
+                        />
+                    )}
+                </div>
+
+                <div className="pl-1 text-red-500 text-xs">
+                    {get(errors, name)?.message}
+                </div>
+        </div>
+        );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormLoading.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormLoading.tsx
new file mode 100644
index 00000000..51b01d8c
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormLoading.tsx
@@ -0,0 +1,12 @@
+import { TubeSpinner } from "@/assets";
+
+export default function RecetasFormLoading() {;
+    return (
+        <div className="flex flex-col border border-gray-300 w-full h-[120px] shadow-lg
+                        absolute top-[86px] left-0 bg-white z-10">
+            <div className="flex justify-center items-center h-full p-3">
+                <img src={TubeSpinner} alt="loading" className="size-20" />
+            </div>
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormShared.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormShared.tsx
new file mode 100644
index 00000000..91ee1e68
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasFormShared.tsx
@@ -0,0 +1,144 @@
+import Button from "@/components/Button";
+import type { RecetasFormSharedProps } from "@/features/Recetas/types/types";
+import { recetasFormSchema, type TRecetasFormSchema } from "../schemas/schemas";
+import { useForm } from "react-hook-form";
+import { zodResolver } from "@hookform/resolvers/zod";
+import RecetasFormInputContainer from "./RecetasFormInputContainer";
+import { useRecetasContext } from "@/context/RecetasContext";
+import { useEffect } from "react";
+import { useComponentesRecetaSearchMutation, useRegisterRecetaMutation } from "../hooks/mutations/recetasMutations";
+
+import NoResults from "./NoResults";
+import RecetasSearchListContainer from "./RecetasSearchListContainer";
+import RecetasFormLoading from "./RecetasFormLoading";
+import RecetesComponentesListados from "./RecetesComponentesListados";
+
+export default function RecetasFormShared(
+    {
+        title,
+        isUpdate: _isUpdate=false, // eslint-disable-line @typescript-eslint/no-unused-vars
+        onClose,
+        onSubmitSuccess,
+    }: RecetasFormSharedProps
+) {
+    const { searchListActiveRecetas, setSearchListActiveRecetas, searchListItems, timer, setTimer} = useRecetasContext();
+
+    const { mutate: componentesRecetaSearchMutation, isPending: isComponentesRecetaSearchPending } 
+    = useComponentesRecetaSearchMutation();
+
+    const { mutate: registerRecetaMutation  } = useRegisterRecetaMutation();
+    
+    const { register, formState: { errors } , handleSubmit, watch, setValue} = useForm<TRecetasFormSchema>({
+        resolver: zodResolver(recetasFormSchema),
+        defaultValues: {
+            nombre: "",
+            componente_receta: [],
+        },
+    });
+
+
+
+
+    useEffect(() => {
+        if (!searchListActiveRecetas) return;
+        const componentesRecetaContainer = document.getElementById("componentes-receta-container");
+
+        const handleClickOutside = (event: MouseEvent) => {
+            if (componentesRecetaContainer && !componentesRecetaContainer.contains(event.target as Node)) {
+              setSearchListActiveRecetas(false);
+            }
+        }
+
+        document.addEventListener("click", handleClickOutside);
+        return () =>  document.removeEventListener("click", handleClickOutside);
+    }, [searchListActiveRecetas, setSearchListActiveRecetas]);
+
+    const handleCancelButtonClick = () => {
+        onClose();
+    }
+
+    const handleSearchListFocus = async (search: string) => {
+      if (timer) {
+        clearTimeout(timer);
+      }
+      const interval = setTimeout(() => {
+            componentesRecetaSearchMutation(search);
+            setTimer(null);
+        }, 1000);
+        setTimer(interval as NodeJS.Timeout);
+    }
+
+
+    const onSubmit = async (data: TRecetasFormSchema) => {
+        registerRecetaMutation(data);
+        onSubmitSuccess();
+    }
+
+    return (
+        <form
+          onSubmit={handleSubmit(onSubmit)}
+          id="productos-intermedios-form"
+          className="relative "
+        >
+          <div className="flex flex-col mx-8 mt-4 rounded-md border border-gray-200 shadow-md">
+            <div className="p-5 font-[Roboto] text-lg font-semibold border-b border-gray-300 bg-gray-50 rounded-t-md">
+              {title}
+            </div>
+
+
+            <div className="flex flex-col gap-15 px-5 bg-white">
+              <div className="flex flex-col gap-2 border-gray-300 py-8 w-[80%] self-center">
+
+                <RecetasFormInputContainer
+                  register={register}
+                  title="Nombre"
+                  name="nombre"
+                  errors={errors}
+                  inputType="text"
+                />
+
+                <div className="flex flex-col relative" id="componentes-receta-container">
+                  <RecetasFormInputContainer
+                    title="Componentes"
+                    name="componente_receta"
+                    errors={errors}
+                    inputType="text"
+                    recetaBusqueda={true}
+                    onChange={handleSearchListFocus}
+                  />
+
+                  {searchListActiveRecetas && (
+                      isComponentesRecetaSearchPending ? (
+                        <RecetasFormLoading />
+                      ) : (
+                        searchListItems.length > 0 ? (
+                        <RecetasSearchListContainer watch={watch} setValue={setValue} />
+                        ) : (
+                          !timer && <NoResults />
+                        )
+                  ))}
+
+                </div>
+              </div>
+
+              <div className="flex flex-col gap-2 border border-gray-300 py-5 px-7 rounded-md font-[Roboto]">
+
+                <div className=" text-lg font-semibold ">
+                  Componentes Listados
+                </div>
+                <RecetesComponentesListados watch={watch} setValue={setValue} />
+              </div>
+            </div>
+
+            <div className="flex gap-2 justify-end py-4 px-5 bg-white">
+              <Button type="cancel" onClick={handleCancelButtonClick}>
+                Cancelar
+              </Button>
+              <Button type="submit" onClick={() => {}}>
+                Guardar
+              </Button>
+            </div>
+          </div>
+        </form>
+      );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasForma.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasForma.tsx
new file mode 100644
index 00000000..3f75fd72
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasForma.tsx
@@ -0,0 +1,22 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+import RecetasFormShared from "./RecetasFormShared";
+
+
+export default function RecetasForma() {
+
+  const { showRecetasForm, setShowRecetasForm } = useRecetasContext();
+
+  const handleSuccessClose = () => {
+    setShowRecetasForm(false);
+  };
+
+  if (!showRecetasForm) return <></>;
+
+  return (
+    <RecetasFormShared
+      title="Nueva Receta"
+      onClose={handleSuccessClose}
+      onSubmitSuccess={handleSuccessClose}
+    />
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasInput.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasInput.tsx
new file mode 100644
index 00000000..406872f4
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasInput.tsx
@@ -0,0 +1,28 @@
+import type { RecetasFormInputProps } from "../types/types";
+export default function RecetasInput(
+    {
+        register,
+        name,
+        typeInput,
+        placeholder = "",
+    }: RecetasFormInputProps) {
+
+        if (!register || !name) {
+            return null;
+        }
+
+    return (
+        <input
+            {...register(name)}
+            type={typeInput}
+            placeholder={placeholder}
+            className={`block w-full px-3 py-2 border border-gray-300 rounded-md shadow-xs font-[Roboto]
+                    focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm
+                    ${ typeInput === "number"
+                            ? `[&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none [appearance:textfield]`
+                            : ""
+                    }`}
+        />
+    )
+}
+
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasLista.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasLista.tsx
new file mode 100644
index 00000000..35b3acec
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasLista.tsx
@@ -0,0 +1,34 @@
+import { TubeSpinner } from "@/assets";
+import { RecetasTableHeader } from "./RecetasTableHeader";
+import { RecetasTableBody } from "./RecetasTableBody";
+
+
+export default function RecetasLista({isLoadingDetalles}: {isLoadingDetalles: boolean}) {
+
+  return (
+    <>
+        <div className="relative mx-8 border border-gray-200 rounded-md min-h-[80%]">
+          <RecetasTableHeader
+            headers={[
+              "ID",
+              "Nombre",
+              "SKU",
+              "Precio Promedio",
+              "Stock",
+              "Categoria",
+              "Punto de reorden",
+              "Fecha de creación",
+            ]}
+          />
+          <RecetasTableBody />
+          {isLoadingDetalles ? (
+            <div className="absolute top-0 left-0 w-full h-full flex justify-center items-center bg-white opacity-50">
+              <img src={TubeSpinner} alt="Cargando..." className="size-28" />
+            </div>
+          ) : (
+            ""
+          )}
+        </div>
+    </>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasPanel.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasPanel.tsx
new file mode 100644
index 00000000..d7c0315d
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasPanel.tsx
@@ -0,0 +1,19 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+import RecetasLista from "./RecetasLista";
+import FilterSearch from "./FilterSearch";
+
+export default function RecetasPanel() {
+
+  const { showRecetasForm, showRecetasDetalles } = useRecetasContext();
+
+  if (showRecetasForm || showRecetasDetalles) return <></>;
+
+  return (
+    <>
+      <div className="flex flex-col gap-6 h-full">
+        <FilterSearch />
+        <RecetasLista isLoadingDetalles={false} />
+      </div>
+    </>
+  );
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContainer.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContainer.tsx
new file mode 100644
index 00000000..9b49d3fe
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContainer.tsx
@@ -0,0 +1,19 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+import { RecetasSearchListContent } from "./RecetasSearchListContent";
+import type { watchSetValueProps } from "../types/types";
+
+export default function RecetasSearchListContainer({watch, setValue}: watchSetValueProps) {
+    const { searchListItems } = useRecetasContext();
+    return (
+        <div 
+            className="
+            flex flex-col border border-gray-300 w-full max-h-[var(--search-list-long-height)] shadow-lg
+            overflow-y-auto absolute top-[86px] left-0 bg-white z-10">
+            {
+            searchListItems.map((item, index) => (
+                <RecetasSearchListContent key={index} category={Object.keys(item)[0]} items={Object.values(item)[0]} watch={watch} setValue={setValue} />
+                ))
+            }
+            </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContent.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContent.tsx
new file mode 100644
index 00000000..b7e1e7c9
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasSearchListContent.tsx
@@ -0,0 +1,16 @@
+import RecetaSearchListItem from "./RecetaSearchListItem"
+import type { RecetasSearchListContentProps, watchSetValueProps } from "../types/types"
+
+export const RecetasSearchListContent = ({ category, items, watch, setValue }: RecetasSearchListContentProps & watchSetValueProps) => {
+
+  return (
+    <div className="flex flex-col">
+        <div className="font-[Roboto] text-md font-semibold border-b border-gray-300 py-2 px-5 ">{category}</div>
+            <ul className="flex flex-col"> 
+                {items.map((item, index) => (
+                    <RecetaSearchListItem key={index} nombre={item.nombre} id={item.id} tipo={item.tipo} watch={watch} setValue={setValue} />
+                ))}
+            </ul>
+    </div>
+  )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableBody.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableBody.tsx
new file mode 100644
index 00000000..c7e09af3
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableBody.tsx
@@ -0,0 +1,25 @@
+// import { useEffect } from "react";
+// import { DoubleSpinner } from "@/assets";
+
+import { RecetasTablerows } from "./RecetasTablerows";
+
+export const RecetasTableBody = () => {
+
+    const displayData: any[] = []
+
+  const NoDataMessage = () => (
+    <div className="flex justify-center h-full items-center font-bold text-2xl text-gray-700">
+      No hay datos Registrados
+    </div>
+  );
+
+  return (
+    <>
+      { displayData ? (
+        <RecetasTablerows data={displayData} />
+      ) : (
+        <NoDataMessage />
+      )}
+    </>
+  );
+};
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableHeader.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableHeader.tsx
new file mode 100644
index 00000000..8375fd58
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTableHeader.tsx
@@ -0,0 +1,10 @@
+export const RecetasTableHeader = ({ headers }: { headers: string[] }) => {
+    return (
+      <div className="grid grid-cols-[0.5fr_1.5fr_1fr_1fr_1fr_1fr_1fr_1fr] justify-between px-8 py-4 border-b border-gray-300 font-semibold font-[Roboto] text-sm bg-[#f7feff] text-[#1261A0] rounded-t-md">
+        {headers.map((header) => (
+          <div key={header}>{header}</div>
+        ))}
+      </div>
+    );
+  };
+  
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTablerows.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTablerows.tsx
new file mode 100644
index 00000000..7867282b
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetasTablerows.tsx
@@ -0,0 +1,13 @@
+import { RecetaTablerow } from "./RecetaTablerow";
+
+export const RecetasTablerows = ({ data }: { data: any[] }) => {
+  return (
+    <>
+      {data.map((item, index) => (
+        <RecetaTablerow item={item} index={index} key={item.id} />
+      ))}
+
+      <RecetaTablerow item={{}} index={123} key={123} />
+    </>
+  );
+};
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/RecetesComponentesListados.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetesComponentesListados.tsx
new file mode 100644
index 00000000..9a511e1a
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/RecetesComponentesListados.tsx
@@ -0,0 +1,28 @@
+import { useRecetasContext } from "@/context/RecetasContext";
+import RecetasComponentList from "./RecetasComponentList";
+import type { watchSetValueProps } from "../types/types";
+
+export default function RecetesComponentesListados({watch, setValue}: watchSetValueProps) {
+    const { componentesListadosReceta } = useRecetasContext();
+    return (
+        <div className="flex flex-col border border-gray-300 rounded-md">
+
+                {componentesListadosReceta.length > 0 ? (
+                    componentesListadosReceta.map((componente, index) => (
+                    <RecetasComponentList key={index}
+                        nombre={componente.nombre} 
+                        type={componente.componente_tipo} 
+                        id={componente.id_componente} 
+                        last={index === componentesListadosReceta.length - 1} 
+                        watch={watch}
+                        setValue={setValue}
+                    />
+                    ))
+                ) : (
+                    <div className="text-center text-gray-500 h-[150px] flex items-center justify-center font-[Roboto] text-lg">
+                    No hay componentes listados
+                    </div>
+                )}
+        </div>
+    )
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/components/SearchInput.tsx b/frontend/panaderia-interfaz/src/features/Recetas/components/SearchInput.tsx
new file mode 100644
index 00000000..ca061c29
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/components/SearchInput.tsx
@@ -0,0 +1,37 @@
+
+import { XIcon, SearchIcon } from "@/assets/DashboardAssets";
+
+export default function SearchInput() {
+
+  return (
+    <div className="w-[var(--search-input-width)] shadow-sm bg-white rounded-full flex items-center justify-between gap-4 p-1 relative border border-gray-200">
+
+      <div className="flex-1 pl-4">
+        <input
+          id="searchInput"
+          type="text"
+          placeholder="Buscar materia prima..."
+          className="font-semibold font-[Roboto] outline-none w-full"
+          ref={() => {}}
+          onKeyDown={() => {}}
+        />
+      </div>
+
+
+        {/* TODO: Implementar el reset de la busqueda */}
+          <button
+            onClick={() => {}}
+            className="absolute right-[13%] flex items-center justify-center p-0.5 rounded-full bg-gray-200 cursor-pointer hover:bg-gray-300 "
+          >
+            <img className="size-4" src={XIcon} alt="X" />
+          </button>
+
+      <button
+        className="bg-blue-500 cursor-pointer transition-colors duration-200 p-2 rounded-full hover:bg-blue-600"
+        onClick={() => {}}
+      >
+        <img src={SearchIcon} alt="Search" />
+      </button>
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/hooks/mutations/recetasMutations.ts b/frontend/panaderia-interfaz/src/features/Recetas/hooks/mutations/recetasMutations.ts
new file mode 100644
index 00000000..986b8cb4
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/hooks/mutations/recetasMutations.ts
@@ -0,0 +1,27 @@
+import { useMutation } from "@tanstack/react-query";
+import { componentesRecetaSearch, registerReceta } from "../../api/api";
+import { useRecetasContext } from "@/context/RecetasContext";
+import type { TRecetasFormSchema } from "../../schemas/schemas";
+
+export const useComponentesRecetaSearchMutation = () => {
+    const { setSearchListItems } = useRecetasContext();
+    return useMutation({
+        mutationFn: (search: string) => componentesRecetaSearch(search),
+        onSuccess: (data) => {
+            setSearchListItems(data)
+        },
+        onError: (error) => {
+            console.error('Error fetching componentes receta search:', error)
+        }
+    })
+}
+
+export const useRegisterRecetaMutation = () => {    
+    const { setComponentesListadosReceta } = useRecetasContext();
+    return useMutation({
+        mutationFn: (data: TRecetasFormSchema) => registerReceta(data),
+        onSuccess: () => {
+            setComponentesListadosReceta([]);
+        }
+    })
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/hooks/queries/RecetasQueryOptions.ts b/frontend/panaderia-interfaz/src/features/Recetas/hooks/queries/RecetasQueryOptions.ts
new file mode 100644
index 00000000..e69de29b
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/hooks/queries/queries.ts b/frontend/panaderia-interfaz/src/features/Recetas/hooks/queries/queries.ts
new file mode 100644
index 00000000..e69de29b
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/schemas/schemas.ts b/frontend/panaderia-interfaz/src/features/Recetas/schemas/schemas.ts
new file mode 100644
index 00000000..b639485f
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/schemas/schemas.ts
@@ -0,0 +1,28 @@
+import { z } from "zod";
+
+const materiaPrimaComponenteSchema = z.object({
+    componente_id: z.coerce.number().min(1, { message: "El componente debe ser valido" }),
+    materia_prima: z.boolean(),
+});
+
+const productoIntermedioComponenteSchema = z.object({
+    componente_id: z.coerce.number().min(1, { message: "El componente debe ser valido" }),
+    producto_intermedio: z.boolean(),
+});
+
+const componentesRecetasSchema = z.union([
+    materiaPrimaComponenteSchema,
+    productoIntermedioComponenteSchema
+]);
+
+export const recetasFormSchema = z.object({
+    nombre: z.string({
+        required_error: "El nombre es requerido",
+        invalid_type_error: "El nombre no es válido",
+    }).min(3, "El nombre debe tener al menos 3 caracteres"),
+    componente_receta: z.array(componentesRecetasSchema).min(1, {
+        message: "El componente es requerido",
+    }),
+})
+
+export type TRecetasFormSchema = z.infer<typeof recetasFormSchema>;
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/features/Recetas/types/types.ts b/frontend/panaderia-interfaz/src/features/Recetas/types/types.ts
new file mode 100644
index 00000000..57c92437
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/features/Recetas/types/types.ts
@@ -0,0 +1,79 @@
+import type { ReactNode } from "react";
+import type { TRecetasFormSchema } from "../schemas/schemas";
+import type { FieldErrors, Path, UseFormRegister, UseFormSetValue, UseFormWatch } from "react-hook-form";
+
+export type childrenType = {
+    children: ReactNode;
+}
+
+export type RecetasFormSharedProps = {
+    title: string;
+    isUpdate?: boolean;
+    initialData?: string;
+    onClose: () => void;
+    onSubmitSuccess: () => void;
+}
+
+export type RecetasFormInputProps = {
+    register?: UseFormRegister<TRecetasFormSchema>,
+    name?: Path<TRecetasFormSchema>,
+    typeInput: string, 
+    placeholder?: string
+}
+
+export type RecetasFormSearchInputProps = {
+    typeInput: string, 
+    placeholder?: string,
+    onChange?: (search: string) => void,
+}
+
+export type RecetasFormInputContainerProps = {
+    register?: UseFormRegister<TRecetasFormSchema>,
+    title: string,
+    name?: Path<TRecetasFormSchema>,
+    errors: FieldErrors<TRecetasFormSchema>,
+    inputType: string,
+    optional?: boolean,
+    recetaBusqueda?: boolean,
+    onChange?: (search: string) => void,
+}
+
+export type itemRecetasSearchList = {
+    id: string,
+    nombre: string,
+    tipo: 'MateriaPrima' | 'ProductoIntermedio';
+}
+
+
+export type RecetasSearchListContentProps = {
+    category: string;
+    items: itemRecetasSearchList [];
+}
+
+export type recetasSearchList = {
+    [categoria: string]: itemRecetasSearchList [];
+}
+
+export type componenteListadosReceta = {
+    id_componente: string,
+    componente_tipo: 'MateriaPrima' | 'ProductoIntermedio',
+    nombre: string,
+}
+
+export type componenteListadosRecetaProps = {
+    id_componente: string,
+    componente_tipo: 'MateriaPrima' | 'ProductoIntermedio',
+    nombre: string,
+}
+
+export type recetasComponentListProps = {
+    nombre: string,
+    type: 'MateriaPrima' | 'ProductoIntermedio',
+    id: string,
+    last?: boolean,
+}
+
+export type watchSetValueProps = {
+    watch: UseFormWatch<TRecetasFormSchema>,
+    setValue: UseFormSetValue<TRecetasFormSchema>,
+}
\ No newline at end of file
diff --git a/frontend/panaderia-interfaz/src/index.css b/frontend/panaderia-interfaz/src/index.css
new file mode 100644
index 00000000..ccb07161
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/index.css
@@ -0,0 +1,9 @@
+@import "tailwindcss";
+
+@theme {
+  --sidebar-width: 250px;
+  --header-height: 70px;
+  --search-input-width: 400px;
+  --search-list-long-height: 450px;
+  --search-list-short-height: 70px;
+}
diff --git a/frontend/panaderia-interfaz/src/main.tsx b/frontend/panaderia-interfaz/src/main.tsx
new file mode 100644
index 00000000..3385ec34
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/main.tsx
@@ -0,0 +1,15 @@
+import { createRoot } from "react-dom/client";
+import "./index.css";
+import App from "./App.tsx";
+import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
+import { AppProvider } from "./context/AppContext.tsx";
+
+const queryClient = new QueryClient();
+
+createRoot(document.getElementById("root")!).render(
+  <AppProvider>
+    <QueryClientProvider client={queryClient}>
+      <App />
+    </QueryClientProvider>
+  </AppProvider>,
+);
diff --git a/frontend/panaderia-interfaz/src/pages/LandingPage.tsx b/frontend/panaderia-interfaz/src/pages/LandingPage.tsx
new file mode 100644
index 00000000..a44308a2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/LandingPage.tsx
@@ -0,0 +1,11 @@
+import HeaderBar from "@/components/Layout/HeaderBar/HeaderBar";
+import Sidebar from "../components/Layout/Sidebar/Sidebar";
+
+export function LandingPage() {
+  return (
+    <div>
+      <Sidebar />
+      <HeaderBar />
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/pages/LoginPage.tsx b/frontend/panaderia-interfaz/src/pages/LoginPage.tsx
new file mode 100644
index 00000000..774117ed
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/LoginPage.tsx
@@ -0,0 +1,18 @@
+import { LoginCard } from "@/features/Authentication/components/login/LoginCard";
+
+export function LoginPage() {
+  return (
+    <>
+      <div
+        className="flex justify-center items-center h-screen"
+        style={{
+          backgroundImage: `url(/LoginBG.svg)`,
+          backgroundSize: "cover",
+          backgroundPosition: "center",
+        }}
+      >
+        <LoginCard />
+      </div>
+    </>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/pages/MateriaPrimaPage.tsx b/frontend/panaderia-interfaz/src/pages/MateriaPrimaPage.tsx
new file mode 100644
index 00000000..ac3bab59
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/MateriaPrimaPage.tsx
@@ -0,0 +1,25 @@
+import Sidebar from "../components/Layout/Sidebar/Sidebar";
+import HeaderBar from "@/components/Layout/HeaderBar/HeaderBar";
+import MateriaPrimaPanel from "@/features/MateriaPrima/components/MateriaPrimaPanel";
+import MateriasPrimasForma from "@/features/MateriaPrima/components/MateriasPrimasForma";
+import { MaterialPrimaDetalles } from "@/features/MateriaPrima/components/MateriaPrimaDetalles";
+
+import { MateriaPrimaProvider } from "@/context/MateriaPrimaContext";
+
+export default function MateriaPrimaPage() {
+  return (
+    <MateriaPrimaProvider>
+      <Sidebar />
+      <HeaderBar />
+      <div className="flex min-h-screen">
+        <div className={`flex-1 ml-(--sidebar-width) pt-(--header-height)`}>
+          <main className="pt-7 pb-3 h-full">
+            <MateriaPrimaPanel />
+            <MateriasPrimasForma />
+            <MaterialPrimaDetalles />
+          </main>
+        </div>
+      </div>
+    </MateriaPrimaProvider>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/pages/ProductosIntermediosPage.tsx b/frontend/panaderia-interfaz/src/pages/ProductosIntermediosPage.tsx
new file mode 100644
index 00000000..677ff4bf
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/ProductosIntermediosPage.tsx
@@ -0,0 +1,24 @@
+import Sidebar from "../components/Layout/Sidebar/Sidebar";
+import HeaderBar from "@/components/Layout/HeaderBar/HeaderBar";
+import ProductosIntermediosPanel from "@/features/ProductosIntermedios/components/ProductosIntermediosPanel";
+import ProductosIntermediosForma from "@/features/ProductosIntermedios/components/ProductosIntermediosForma";
+import ProductosIntermediosDetalles from "@/features/ProductosIntermedios/components/ProductosIntermediosDetalles";
+import { ProductosIntermediosProvider } from "@/context/ProductosIntermediosContext";
+
+export default function ProductosIntermediosPage() {
+  return (
+  <ProductosIntermediosProvider>
+    <Sidebar />
+    <HeaderBar />
+    <div className="flex min-h-screen">
+      <div className={`flex-1 ml-(--sidebar-width) pt-(--header-height)`}>
+        <main className="pt-7 pb-3 h-full">
+          <ProductosIntermediosPanel />
+          <ProductosIntermediosForma />
+          <ProductosIntermediosDetalles />
+        </main>
+      </div>
+    </div>
+  </ProductosIntermediosProvider>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/pages/RecetasPage.tsx b/frontend/panaderia-interfaz/src/pages/RecetasPage.tsx
new file mode 100644
index 00000000..2be7ba74
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/RecetasPage.tsx
@@ -0,0 +1,24 @@
+import HeaderBar from "@/components/Layout/HeaderBar/HeaderBar";
+import Sidebar from "@/components/Layout/Sidebar/Sidebar";
+import RecetasPanel from "@/features/Recetas/components/RecetasPanel";
+import RecetasForma from "@/features/Recetas/components/RecetasForma";
+import RecetasDetalles from "@/features/Recetas/components/RecetasDetalles";
+import { RecetasProvider } from "@/context/RecetasContext";
+
+export default function RecetasPage() {
+  return (
+  <RecetasProvider>
+    <Sidebar />
+    <HeaderBar />
+    <div className="flex min-h-screen">
+      <div className={`flex-1 ml-(--sidebar-width) pt-(--header-height)`}>
+        <main className="pt-7 pb-3 h-full">
+          <RecetasPanel />
+          <RecetasForma />
+          <RecetasDetalles />
+        </main>
+      </div>
+    </div>
+  </RecetasProvider>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/pages/RegisterPage.tsx b/frontend/panaderia-interfaz/src/pages/RegisterPage.tsx
new file mode 100644
index 00000000..8eb12a00
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/pages/RegisterPage.tsx
@@ -0,0 +1,16 @@
+import { RegisterCard } from "../features/Authentication/components/register/RegisterCard";
+
+export function RegisterPage() {
+  return (
+    <div
+      className="flex justify-center items-center h-screen"
+      style={{
+        backgroundImage: `url(/LoginBG.svg)`,
+        backgroundSize: "cover",
+        backgroundPosition: "center",
+      }}
+    >
+      <RegisterCard />
+    </div>
+  );
+}
diff --git a/frontend/panaderia-interfaz/src/utils/utils.ts b/frontend/panaderia-interfaz/src/utils/utils.ts
new file mode 100644
index 00000000..be2d4ef8
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/utils/utils.ts
@@ -0,0 +1,5 @@
+// This file previously contained localStorage token utilities.
+// These are no longer needed with the new authentication system
+// that stores tokens in memory and uses HttpOnly cookies for refresh tokens.
+
+// You can add other utility functions here as needed.
diff --git a/frontend/panaderia-interfaz/src/vite-env.d.ts b/frontend/panaderia-interfaz/src/vite-env.d.ts
new file mode 100644
index 00000000..11f02fe2
--- /dev/null
+++ b/frontend/panaderia-interfaz/src/vite-env.d.ts
@@ -0,0 +1 @@
+/// <reference types="vite/client" />
diff --git a/frontend/panaderia-interfaz/tsconfig.app.json b/frontend/panaderia-interfaz/tsconfig.app.json
new file mode 100644
index 00000000..5f5f38f0
--- /dev/null
+++ b/frontend/panaderia-interfaz/tsconfig.app.json
@@ -0,0 +1,31 @@
+{
+  "compilerOptions": {
+    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
+    "target": "ES2022",
+    "useDefineForClassFields": true,
+    "lib": ["ES2022", "DOM", "DOM.Iterable"],
+    "module": "ESNext",
+    "skipLibCheck": true,
+    "baseUrl": ".",
+    "paths": {
+      "@/*": ["./src/*"]
+    },
+
+    /* Bundler mode */
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "verbatimModuleSyntax": true,
+    "moduleDetection": "force",
+    "noEmit": true,
+    "jsx": "react-jsx",
+
+    /* Linting */
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "erasableSyntaxOnly": true,
+    "noFallthroughCasesInSwitch": true,
+    "noUncheckedSideEffectImports": true
+  },
+  "include": ["src", "src/features/MateriaPrima/api/api.ts"]
+}
diff --git a/frontend/panaderia-interfaz/tsconfig.json b/frontend/panaderia-interfaz/tsconfig.json
new file mode 100644
index 00000000..08d70bd1
--- /dev/null
+++ b/frontend/panaderia-interfaz/tsconfig.json
@@ -0,0 +1,13 @@
+{
+  "files": [],
+  "compilerOptions": {
+    "baseUrl": ".",
+    "paths": {
+      "@/*": ["./src/*"]
+    }
+  },
+  "references": [
+    { "path": "./tsconfig.app.json" },
+    { "path": "./tsconfig.node.json" }
+  ]
+}
diff --git a/frontend/panaderia-interfaz/tsconfig.node.json b/frontend/panaderia-interfaz/tsconfig.node.json
new file mode 100644
index 00000000..f85a3990
--- /dev/null
+++ b/frontend/panaderia-interfaz/tsconfig.node.json
@@ -0,0 +1,25 @@
+{
+  "compilerOptions": {
+    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
+    "target": "ES2023",
+    "lib": ["ES2023"],
+    "module": "ESNext",
+    "skipLibCheck": true,
+
+    /* Bundler mode */
+    "moduleResolution": "bundler",
+    "allowImportingTsExtensions": true,
+    "verbatimModuleSyntax": true,
+    "moduleDetection": "force",
+    "noEmit": true,
+
+    /* Linting */
+    "strict": true,
+    "noUnusedLocals": true,
+    "noUnusedParameters": true,
+    "erasableSyntaxOnly": true,
+    "noFallthroughCasesInSwitch": true,
+    "noUncheckedSideEffectImports": true
+  },
+  "include": ["vite.config.ts"]
+}
diff --git a/frontend/panaderia-interfaz/vite.config.ts b/frontend/panaderia-interfaz/vite.config.ts
new file mode 100644
index 00000000..e1588bae
--- /dev/null
+++ b/frontend/panaderia-interfaz/vite.config.ts
@@ -0,0 +1,13 @@
+import { defineConfig } from "vite";
+import react from "@vitejs/plugin-react";
+import tailwindcss from "@tailwindcss/vite";
+import path from "path";
+// https://vite.dev/config/
+export default defineConfig({
+  plugins: [react(), tailwindcss()],
+  resolve: {
+    alias: {
+      "@": path.resolve(__dirname, "./src"),
+    },
+  },
+});
